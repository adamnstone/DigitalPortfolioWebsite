{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Template</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#about","title":"About","text":"<p>I'm Adam Stone, and I go to Charlotte Latin School (Class of '25) in Charlotte, North Carolina. Before moving to Charlotte, I lived in S\u00e3o Paulo, Brazil and Cary, North Carolina.</p> <p>My long-range goal is to create innovative technologies that will empower individuals, especially those who are neurodivergent, to maximize their potential. As an advocate who believes that efficient access to knowledge is a critical component to fostering inclusion and productivity, I dream of using science to create a new industry standard in assistive technologies.</p> <p>I'm passionate about musical theater. Ever since I was very little, I have loved being on stage. Some of my favorite roles have included playing Billy Cane in Bright Star and Lord Farquaad in Shrek the Musical. I was a Best Actor Finalist at the Blumey Awards for both of these roles, which was a great honor.</p> <p>The art of communicating is something I also highly value. When I was young, my family moved to S\u00e3o Paulo, Brazil and enrolled me in a local school. My experience living abroad sparked a love for learning languages and also a desire to use language to make connections. When I was in sixth grade, I joined the Speech &amp; Debate Team at Charlotte Latin School and have been competing in national tournaments every year since in numerous speech events, as well as Lincoln-Douglas debate. For each speech event, a student is required to deliver a ten-minute, memorized speech around a theme of choice. I\u2019ve taken the opportunity to touch on topics that are very important to me, such as the negative impacts of ableism, as well as more entertaining topics like the American obsession with straight teeth and its greater implications. In addition to being the champion speaker at tournaments held by Stanford, Princeton, and Duke Universities, I\u2019ve had the honor of qualifying to compete at the Tournament of Champions at the high school level every year since seventh grade. </p> <p>For most of my life I've trained in martial arts. I'm a third-degree black belt in Taekwondo.</p> <p>I'm also a Youth Ambassador for the Tourette Association of America. In this role, I advocate for funding and research for Tourette Syndrome and tic disorders every year on Capitol Hill, as well as educate students and teachers about the condition to promote inclusion and acceptance. To read more about this, see my advocacy work and Fab Academy Final Project.</p>"},{"location":"advocacy/","title":"Advocacy","text":""},{"location":"advocacy/#advocacy","title":"Advocacy","text":"<p>As a Youth Ambassador for the Tourette Association of America since seventh grade, I\u2019ve found that the key to supporting those affected by Tourette Syndrome is to make accurate information about the condition widely accessible. In promoting awareness in numerous ways, I\u2019ve learned that education always leads to progress and that dreams of a better world are only limited by what we dare to imagine and work towards.</p> <p>In this role, I\u2019ve spoken on Capitol Hill annually, meeting with North Carolina leaders to educate them about Tourette Syndrome and request funding for research and public health education initiatives. I\u2019ve also created and led an advocacy training curriculum for the 100+ new Youth Ambassadors who go to Capitol Hill each year. Additionally, I\u2019ve presented at schools where students with Tourette Syndrome are experiencing bullying, as well as acted in a law enforcement training video to educate police on the neurological disorder to facilitate safe and positive outcomes. While my tics have greatly lessened in intensity as I\u2019ve grown older, my passion for advocacy has skyrocketed. </p> <p>At the end of every high school presentation I give, I lead the student body in reciting a pledge promising to create a world where peole are seen for who they are and not their tics, and to be the change for the Tourette community.</p> <p>I was asked by the Tourette Association of America to help host its first Virtual Fundraising Gala:</p> <p>In March of 2020, Hamilton was my favorite musical. I recorded this video as I was waiting to speak with Senator Burr about Tourette Syndrome. It was posted on Tourette Association of America social media:</p> View this post on Instagram <p>A post shared by Tourette Association (@touretteassociation)</p> <p>During COVID, I made this video which the Tourette Association posted on social media:</p> View this post on Instagram <p>A post shared by Tourette Association (@touretteassociation)</p>"},{"location":"arts/","title":"Arts","text":""},{"location":"arts/#arts","title":"Arts","text":"<p>From the moment I first stepped on stage, I felt the exhilaration of persuading an audience to believe in my story. Motivated to capture the audience\u2019s imagination, I\u2019ve invested a great deal of time honing my dancing, acting, and singing skills. </p> <p>Being a third-degree black belt in Taekwondo has helped my physicality on stage, but several years ago I wanted to get more formal training. I had the opportunity to spend six weeks studying dance at the Charlotte Ballet. I\u2019ve also been fortunate to have studied acting and singing with incredible coaches. </p> <p>I\u2019ve performed in 11 productions and was extremely honored to be a Best Actor Finalist at the Blumey Awards two years in a row for my roles as Billy Cane in Bright Star and Lord Farquaad in Shrek the Musical. The Blumey Awards recognizes exceptional achievements in high school musical theater and is a regional qualifier to the Jimmy Awards, a Broadway program for top talent in musical theater.</p>"},{"location":"arts/#lord-farquaad-shrek-the-musical","title":"Lord Farquaad, Shrek the Musical","text":"<p>In 2023, I played Lord Farquaad in Shrek the Musical at Charlotte Latin School. I was a Blumey Awards Best Actor Finalist for my performance.</p> <p>When I embraced the character of Lord Farquaad, an extremely insecure villain whose distain for uniqueness and diversity drives him to terrorize his kingdom in the name of conformity, every laugh at his expense and applause at his failures showed me that the audience understood that intolerance was detrimental and ridiculous. As an advocate for people with disabilities, I clearly understand the dangers of limiting acceptance to only those who fit a certain norm. I was thrilled to be able to share the message of inclusion in an entertaining way that resonated with audience members of all ages in the Charlotte community.</p> <p>In addition to playing Lord Farquaad, I was the Dance Captain for the production.</p> <p>Here's a video of the musical number \"The Ballad of Farquaad\"</p> <p>Here's a video of the musical number \"What's Up Duloc?\"</p> <p></p> <p>I enjoyed this role so much that during Fab Academy, I made a Farquaad sticker on the vinyl cutter! Here is a link to my documentation of the process.</p>"},{"location":"arts/#billy-cane-bright-star","title":"Billy Cane, Bright Star","text":"<p>In 2022, I played Billy Cane in Bright Star at Charlotte Latin School. I was a Blumey Awards Best Actor Finalist for my performance.</p> <p>Bright Star, a musical written by Steve Martin and Edie Brickell, is set in Blue Ridge Mountains of North Carolina during the 1940s with flashbacks to 1923. Billy Cane is an aspiring young writer who embodies the themes of hope, new beginnings, and the power of dreams. </p>"},{"location":"arts/#admetos-alkestis","title":"Admetos, Alkestis","text":"<p>In 2024, I played Admetos in Alkestis at Charlotte Latin School.</p> <p>Alkestis by Euripides is a Greek Tragedy that follows the story of King Admetos who faces immense grief and regret after his wife, Alkestis, dies in his place to grant him immortality. The play explores the conflict between Admetos' duties to his kingdom and outward perception of hospitality and his familial responsibilities and strenuous relationships.</p>"},{"location":"arts/#adam-stone-theatre-resume","title":"Adam Stone Theatre R\u00e9sum\u00e9","text":""},{"location":"stem/","title":"STEM","text":""},{"location":"stem/#stem","title":"STEM","text":"<p>My long-range goal is to create innovative technologies that will empower individuals to maximize their potential. As a disability advocate who believes that efficient access to knowledge is a critical component to fostering inclusion and productivity, I dream of using science to create a new industry standard in assistive technologies.\u00a0</p> <p>To reach my goal, I\u2019ve furthered my expertise in computer science and engineering through classes, projects, and gaining hands-on experience as an intern at Rhythmlink.</p>"},{"location":"stem/bridge-builder/","title":"Bridge Builder","text":""},{"location":"stem/bridge-builder/#bridge-builder","title":"Bridge Builder","text":"<p>In my Civil Engineering class, students were tasked with determining the optimal size, shape, and material for each beam of a bridge to yield the most cost-effective design capable of sustaining <code>225kN</code> of force. The class was instructed to input specifications for each beam into the West Point Bridge Designer software which calculated the cost and strength of each design. </p> <p>Through trial and error, I arrived at a bridge that sustained the required weight at a relatively low cost. However, I wanted to see whether I could automate the process to test hundreds of thousands of permutations of the three inputs for each beam to come up with a more optimal design. I wrote a Python script to mimic a user entering the three parameters for each beam. Unfortunately, the input process for West Point Bridge Designer software involved multiple drop down menus and animations which significantly slowed the simulation time, making this approach impractical. In order to come up with a more efficient approach, I examined West Point Bridge Designer\u2019s open-source code, written in Java, to understand how it was calculating the forces for the simulation. </p> <p>To circumvent the cumbersome user interface, I coded a more focused bridge simulator without a user interface or animations. I also implemented a genetic algorithm to test many different designs and find the lowest-cost bridge that held the required weight. As the simulator ran, it drove continuous improvements in bridge design and reductions in price.</p> <p>Here's a sample bridge generated by the program after trying 600,000 designs:</p> <p></p> <p></p> <p>Download the Bridge File here!</p>"},{"location":"stem/bridge-builder/#documentation","title":"Documentation","text":"<p>There are two steps in running the simulation: running the genetic algorithm and configuring the shape.</p> <p>Download all of the code for the project here!</p>"},{"location":"stem/bridge-builder/#running-the-genetic-algorithm","title":"Running the Genetic Algorithm","text":"<p><code>main.py</code> is responsible for running the genetic algorithm. The <code>NUM_GENS</code> variable defines for how many generations the simulation will run, and the <code>POP_SIZE</code> variable defines how many bridges will exist in the population of each generation. The script uses <code>Matplotlib</code> to graph the price of bridges versus the generation number.</p> <p>The main loop exists in the <code>run_evo_sim</code> function. It initializes the population, then for each generation, evaluates the fitness of each bridge, removes the bottom 50%, creates offspring from the remaining bridges, mutates bridges randomly, and repeats. I found that looping through the number of bridge members mutated for each bridge in a popuation (i.e. the first bridge mutates one member, the second bridge mutates two members) helped avoid local maximums and continually improve performance even many generations into the simulation. </p> <p>main.py</p> <pre><code>import random, time, pickle\nfrom bridge_utilities import calculate_score, MATERIALS, SIZES, TYPES, get_price, enact_bridge\nimport matplotlib.pyplot as plt\nimport matplotlib as matplt\nfrom bridge_settings import CURRENT_SETTING, INITIALIZED_BRIDGE\nimport pandas as pd\n\n# Function to initialize a population\ndef initialize_population(population_size):\n    population = []\n    for _ in range(population_size):\n        if INITIALIZED_BRIDGE is None:\n            bridge = [(random.choice(MATERIALS), random.choice(TYPES), random.choice(SIZES[14:])) for _ in range(CURRENT_SETTING['num_members'])]\n        else:\n\n            df = pd.read_csv(INITIALIZED_BRIDGE)\n            bridge=[(r['Member ID'], r['Material Type'], [x for x in SIZES if r['Type']== x[0]][0]) for r in [df.iloc[_] for _ in range(CURRENT_SETTING['num_members'])]] \n        population.append(bridge)\n    return population\n\nbridge_mutation_counter = 0\n\n# Function to mutate a bridge\ndef mutate(bridge):\n    global bridge_mutation_counter\n    mutated_bridge = bridge[:]\n    first = True\n    r = random.random()\n    i = 0\n    while i &lt; bridge_mutation_counter % 30:\n        i += 1\n        first = False\n        member_to_mutate = random.randint(0, CURRENT_SETTING['num_members']-1)\n        attribute_to_mutate = random.choice([\"material\", \"type\", \"size\"])\n        if attribute_to_mutate == \"material\":\n            mutated_bridge[member_to_mutate] = (random.choice(MATERIALS), bridge[member_to_mutate][1], bridge[member_to_mutate][2])\n        elif attribute_to_mutate == \"type\":\n            mutated_bridge[member_to_mutate] = (bridge[member_to_mutate][0], random.choice(TYPES), bridge[member_to_mutate][2])\n        else:\n            mutated_bridge[member_to_mutate] = (bridge[member_to_mutate][0], bridge[member_to_mutate][1], random.choice(SIZES))\n    bridge_mutation_counter += 1\n    return mutated_bridge\n\n# Function to run the evolutionary simulation\ndef run_evo_sim(population_size, fig, line1, NUM_GENS):\n    population = initialize_population(population_size)\n    generation = 1\n    highest_fitness_score_over_gen = [0]*(NUM_GENS)\n    while True:\n        # Evaluate the population\n        fitness_scores = [calculate_score(bridge) for bridge in population]\n\n        # Select the top 50% of the bridges\n        top_bridges = [bridge for _, bridge in sorted(zip(fitness_scores, population), key=lambda x: -x[0])][:population_size // 2]\n        highest_fitness_score_over_gen[generation] = get_price(top_bridges[0]) \n\n        # Crossover and mutation\n        new_population = top_bridges[:]\n        while len(new_population) &lt; population_size:\n            parent1, parent2 = random.sample(top_bridges, 2)\n            crossover_point = random.randint(1, CURRENT_SETTING['num_members']-1)\n            child = parent1[:crossover_point] + parent2[crossover_point:]\n            mutated_child = mutate(child)\n            new_population.append(mutated_child)\n\n        population = new_population \n        global bridge_mutation_counter\n        bridge_mutation_counter += 1\n        generation += 1\n        if generation % 100 == 0:\n            print(\"Generation:\", generation, \"| Best Score:\", max(fitness_scores), \" | Price:\",[get_price(_) for _ in top_bridges[0:5]])\n            line1.set_ydata(highest_fitness_score_over_gen)\n            fig.canvas.draw() \n            fig.canvas.flush_events() \n        if generation == NUM_GENS:\n            print(\"FINAL BRIDGE\")\n            print(top_bridges[0])\n            sc = calculate_score(top_bridges[0],log=True)\n            print(\"SCORE:\",sc)\n            with open(f\"bridge_saves/BEST_BRIDGE_fitness_{str(round(get_price(top_bridges[0]),3)).replace('.','-')}.obj\", \"wb\") as file:\n                pickle.dump(top_bridges[0],file)\n            input(\"Press enter to enact the bridge:\")\n            time.sleep(3)\n            enact_bridge(top_bridges[0])\n            break\n\nif __name__ == \"__main__\":\n    NUM_GENS = 3000\n    POP_SIZE = 200\n    plt.ion() \n    fig = plt.figure() \n    ax = fig.add_subplot(1,1,1) \n    line1, = ax.plot(list(range(1,NUM_GENS+1)), [0]*NUM_GENS, 'b-')\n    ax.set_xlabel(\"Generation\")\n    ax.set_ylabel(\"Price ($)\")\n    ax.set_title(f\"Bridge Price Over {NUM_GENS} Generations of {POP_SIZE} Bridges Each\")\n    ax.get_xaxis().set_major_formatter(\n        matplt.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n    ax.get_yaxis().set_major_formatter(\n        matplt.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n    plt.ylim(0, 500000)\n\n    # Running the algorithm\n    run_evo_sim(POP_SIZE, fig,line1, NUM_GENS)\n</code></pre>"},{"location":"stem/bridge-builder/#configuring-the-shape","title":"Configuring the Shape","text":"<p>The simulation is designed to find the optimal combination of member materials, sizes, and shapes, but not design the overall structure of the bridge. I have already configured one bridge shape (you can download a bridge of this shape here).</p> <p>To add a new shape to the simulation, you must generate the <code>minimums_csv</code> file and <code>strength_data</code> files, as well as add the bridge to <code>bridge_settings.py</code>. Click here to find the detailed instructions of collecting strength data, and click here to find the detailed instructions of how to modify the settings file.</p>"},{"location":"stem/bridge-builder/#storing-maximum-member-loads","title":"Storing Maximum Member Loads","text":"<p><code>get_all_strengths.py</code> tests all setting combinations for a bridge member of a given length and records the maximum load that member can sustain. This file relies on opening <code>Google Sheets</code> and the West Point Bridge Designer software. Also, coordinates that fit the computer's screen layout must be collected in <code>get_pos.py</code> and entered before running. Since the maximum load varies slightly as the settings of other bridge members change, I implemented a factor of safety of 1% in <code>bridge_utilities.py</code>.</p> <p>To run this file, first open a new Google Sheet. In West Point Bridge Designer, go to <code>Report &gt; Load Test Results</code> for any bridge of the same shape as your design. Copy the spreadsheet and paste it into Google Sheets. Adjust the row widths until both the cell you pasted the spreadsheet into and the compression strength and tension strength columns of the member you are testing are visible. Use <code>get_pos.py</code> to find the coordinates of each of these cells on the screen, and record them in the variables <code>excel_comp</code>, <code>excel_ten</code>, and <code>excel_pst</code>. Also change the name of the output file (which you will enter into <code>bridge_settings.py</code>). If any of the other coordinate variables do not match your screen size, adjust them as well. Then run this file, quickly open the Google Sheet, then West Point Bridge Designer (the code uses <code>alt+tab</code> to navigate between the pages). To not move the mouse or click anything until the data collection has finished. To emergency stop, move the mouse to the top left side of the screen.</p> <p>get_all_strengths.py</p> <pre><code>import read_text\nfrom time import sleep\nimport pyautogui as pg\nfrom tkinter import Tk\nimport pickle\n\n# three seconds after starting program to open google sheets, then West Point Bridge Designer (so that alt+tab goes between the pages)\nsleep(3)\n\nclass BridgeMember(object):\n    def __init__(self, id, mouse_pos, material_option_pos, num_material_options, type_option_pos, num_type_options, size_option_pos, num_size_options):\n        self.id = id\n        self.mouse_pos = mouse_pos\n        self.material = None\n        self.size = None\n        self._type = None\n        self.num_material_options = num_material_options\n        self.num_type_options = num_type_options\n        self.num_size_options = num_size_options\n        self.material_option_pos = material_option_pos\n        self.type_option_pos = type_option_pos\n        self.size_option_pos = size_option_pos\n\n    def set_material(self, material):\n        self.material = material\n\n    def set_type(self, _type):\n        self._type = _type\n\n    def set_size(self, size):\n        self.size = size\n\n    def enact_member(self, m, t, s):\n\n        f(self.material_option_pos)\n        sleep(0.1)\n        pg.press(\"up\", presses=self.num_material_options, interval=0.01)\n        pg.press(\"down\", presses=m, interval=0.01)\n        pg.press(\"enter\")\n\n        pg.press(\"tab\")\n        pg.press(\"up\", presses=self.num_type_options, interval=0.01)\n        pg.press(\"down\", presses=t, interval=0.01)\n        pg.press(\"enter\")\n\n        pg.press(\"tab\")\n        pg.press(\"up\", presses=self.num_size_options, interval=0.01)\n        pg.press(\"down\", presses=s, interval=0.01)\n        pg.press(\"enter\")\n\n# use get_pos.py to find these coordinates\nexcel_comp = (1095,1195) # compression strength cell in Google Sheet\nexcel_ten = (1545,1191) # tension strength cell in Google Sheet\nexcel_pst = (129,447) # cell where to paste in Google Sheet\ncopy_to_clipboard = (1320,940) # coordinates of copy to clipboard button in `Report &gt; Load Test Results` in West Point Bridge Designer\nTEST_POS = [174, 80] # coordinates of the run simulation test button in West Point Bridge Designer\nSTOP_TEST_POS = [146, 78] # coordinates of the stop simulation test button in West Point Bridge Designer\nreport_tab = (238,47) # coordinates of the `Report` tab in West Point Bridge Designer\nreport_but = (254,101) # coordinates of the `Load Test Results` button in West Point Bridge Designer \nclose = (1535,942) # coordinates of the close button of the popup in West Point Bridge Designer\nbar = (846,399) # coordinates of the bridge member being tested in West Point Bridge Designer\n\nMATERIAL_POS = [186, 121] # position of material selection dropdown for a bridge member in West Point Bridge Designer\n\n# click\ndef click_pos(p):\n    pg.moveTo(p[0],p[1],0.2)\n    pg.click()\n\n# copy\ndef c():\n    data = Tk().clipboard_get()\n    return data\n\n# transfer the bridge data into excel\ndef do_bridge():\n    click_pos(STOP_TEST_POS)\n    sleep(0.5)\n    click_pos(report_tab)\n    click_pos(report_but)\n    click_pos(copy_to_clipboard)\n    click_pos(close)\n    pg.keyDown(\"alt\")\n    pg.press(\"tab\")\n    pg.keyUp(\"alt\")\n    click_pos(excel_pst)\n    pg.keyDown(\"ctrl\")\n    pg.press(\"v\")\n    pg.keyUp(\"ctrl\")\n    sleep(1)\n    click_pos(excel_ten)\n    pg.keyDown(\"ctrl\")\n    pg.press(\"c\")\n    pg.keyUp(\"ctrl\")\n    sleep(0.5)\n    ten = float(c().strip())\n    click_pos(excel_comp)\n    pg.keyDown(\"ctrl\")\n    pg.press(\"c\")\n    pg.keyUp(\"ctrl\")\n    sleep(0.5)\n    com = float(c().strip())\n    pg.keyDown(\"alt\")\n    pg.press(\"tab\")\n    pg.keyUp(\"alt\")\n    return(com,ten)\n\n# all settings options\nSIZES = [(30,2),(35,2),(40,2),(45,2),(50,2),(55,2),(60,3),(65,3),(70,3),(75,3),(80,4),(90,4),(100,5),(110,5),(120,6),(130,6),(140,7),(150,7),(160,8),(170,8),(180,9),(190,9),(200,10),(220,11),(240,12),(260,13),(280,14),(300,15),(320,16),(340,17),(360,18),(400,20),(500,25)]\nMATERIALS = [\"CS\", \"HSS\", \"QTS\"]\nTYPES = [\"Bar\", \"Tube\"]\n\n# boxes if the bridge fails the \"slenderness test\" and gets a store of zero (edge case)\nCLOSE_BOX = {'top': 830, 'left': 1251, 'width': 1306-1251, 'height': 841-826}\nSLENDERNESS_BOX = {'top': 449, 'left': 833, 'width': 1321-833, 'height': 485-449}\n\nDATA = [[[]]]\nfor i,m in enumerate(MATERIALS):\n    for j,t in enumerate(TYPES):\n        for k,s in enumerate(SIZES):\n            b = BridgeMember(0, MATERIAL_POS, 3, None, 2, None, len(SIZES))\n            DATA[i][j].append(None)\n            click_pos(bar)\n            b.enact_member(i,j,k)\n            click_pos(TEST_POS)\n            sleep(1)\n            print(read_text.scan_text(SLENDERNESS_BOX).lower().strip())\n            slenderness_failed = read_text.scan_text(SLENDERNESS_BOX).lower().strip() in [\"a member fails the slenderness test.\",\"a mambhar faile tha clandarnacc tact\"]\n            if slenderness_failed:\n                coor = [CLOSE_BOX['left'] + (CLOSE_BOX['width']/2), CLOSE_BOX['top'] + (CLOSE_BOX['height']/2)]\n                click_pos(coor)\n            else:\n                DATA[i][j][k] = do_bridge()\n        DATA[i].append([])\n    DATA.append([[]])\n\n# store the data in a pickled file - the name of the file is arbitrary\nwith open(\"MEMBER_2_24.obj\", \"wb\") as file:\n    pickle.dump(DATA,file)\n</code></pre>"},{"location":"stem/bridge-builder/#bridge-utilities","title":"Bridge Utilities","text":"<p><code>bridge_utilities.py</code> contains several helper functions and constants for mutating bridges, calculating price and fitness, and entering a bridge into the West Point Bridge Designer software.</p> <p>bridge_utilities.py</p> <pre><code>import pandas as pd\nimport math, pickle\nfrom bridge_settings import CURRENT_SETTING\nfrom time import sleep\nfrom bridge_class import Bridge, MATERIAL_POS, NUM_MEMBER_MATERIAL_OPTIONS, TYPE_POS, NUM_MEMBER_TYPE_OPTIONS, SIZE_POS, NUM_MEMBER_WIDTH_OPTIONS\nfrom bridge_settings import CURRENT_SETTING\n\nSIZES = [(30,2),(35,2),(40,2),(45,2),(50,2),(55,2),(60,3),(65,3),(70,3),(75,3),(80,4),(90,4),(100,5),(110,5),(120,6),(130,6),(140,7),(150,7),(160,8),(170,8),(180,9),(190,9),(200,10),(220,11),(240,12),(260,13),(280,14),(300,15),(320,16),(340,17),(360,18),(400,20),(500,25)]\nMATERIALS = [\"CS\", \"HSS\", \"QTS\"]\nTYPES = [\"Bar\", \"Tube\"]\n\ncsv = pd.read_csv(CURRENT_SETTING['minimums_csv'], index_col=\"#\")\n\n# load forces spreadsheet collected from Bridge Designer\ncompression_force = csv['Compression Force']\ntension_force = csv['Tension Force']\n\n# return load * Factor of Safety\ndef get_load(member_id):\n    return (compression_force[member_id]*1.01, tension_force[member_id]*1.01)\n\n# get cross section area of a member\ndef get_cross_section_area(member):\n    s = member[2][0]/1000\n    inn = member[2][1]/1000\n\n    if member[1] == \"Bar\":\n        return s**2\n    else:\n        return (s**2) - ((s - (2*inn)) ** 2)\n\n# return member length\ndef get_mem_length(m_id):\n    return CURRENT_SETTING['strength_data'](m_id,MEMBER_DATA)[1]\n\n# load member data\nMEMBER_DATA = []\nfor filename in CURRENT_SETTING['strength_data_files']:\n    with open(filename,'rb') as file:\n        MEMBER_DATA.append(pickle.load(file))\n\n# get maximum load for a member\ndef get_maximum_load(member, m_id):\n    sizes_index = -1\n    for i,size in enumerate(SIZES):\n        if size[0] == member[2][0] and size[1] == member[2][1]:\n            sizes_index = i\n            break\n    return CURRENT_SETTING['strength_data'](m_id,MEMBER_DATA)[0][MATERIALS.index(member[0])][TYPES.index(member[1])][sizes_index]\n\n# calculate bridge price\ndef get_price(bridge):\n    num_unique_types = 0\n    uniques = []\n    for member in bridge:\n        for u in uniques:\n            if u[0] == member[0] and u[1] == member[1] and u[2][0] == member[2][0]:\n                break\n        else:\n            uniques.append(member)\n    num_unique_types = len(uniques)\n    total_cost = CURRENT_SETTING['fixed_cost'] + (1000*num_unique_types)\n    for i, member in enumerate(bridge):\n        kgs = (7850 * get_cross_section_area(member)*get_mem_length(i+1))\n        if member[1] == \"Bar\":\n            total_cost += [4.3,5.6,6][MATERIALS.index(member[0])] * kgs * 2\n        else:\n            total_cost += [6.3,7,7.7][MATERIALS.index(member[0])] * kgs * 2\n    return total_cost\n\n# calculate bridge score\ndef calculate_score(bridge,log=False): # [(materials, types, sizes), ...]\n    for i, member in enumerate(bridge):\n        minimum_loads = get_load(i+1)\n        maximum_loads = get_maximum_load(member, i+1)\n        if log:\n            print(\"MIN\", minimum_loads, \"MAX\", maximum_loads)\n            sleep(0.1)\n        # score 0 if bridge failed\n        if maximum_loads is None:\n            return 0\n        if minimum_loads[0] &gt; maximum_loads[0] or minimum_loads[1] &gt; maximum_loads[1]:\n            return 0\n    return 1/get_price(bridge) # lower price = higher score\n\n# put bridge into Bridge Designer program\ndef enact_bridge(bridge_):\n    bridge = [_ for _ in bridge_]\n    b = Bridge(CURRENT_SETTING['num_members'], MATERIAL_POS, NUM_MEMBER_MATERIAL_OPTIONS, TYPE_POS, NUM_MEMBER_TYPE_OPTIONS, SIZE_POS, NUM_MEMBER_WIDTH_OPTIONS)\n    _bridge = []\n    for i,member in enumerate(bridge):\n        sizes_index = -1\n        for i,size in enumerate(SIZES):\n            if size[0] == member[2][0] and size[1] == member[2][1]:\n                sizes_index = i\n                break\n        _bridge.append((member[0],member[1],member[2],sizes_index))\n    b.initialize_members(member_list=[(MATERIALS.index(x[0])+1, TYPES.index(x[1])+1, x[3]+1) for x in _bridge])\n    b.enact_members()\n</code></pre>"},{"location":"stem/bridge-builder/#bridge-settings","title":"Bridge Settings","text":"<p><code>bridge_settings.py</code> is where a new bridge shape can be input for testing.</p> <p>To add a bridge shape, define a dictionary and a new function. The dictionary must contain <code>num_members</code> (the number of bridge members in the design), <code>minimums_csv</code> (the load each member is required to sustain), <code>strength_data_files</code> (a tuple of the filenames generated in <code>get_all_strengths.py</code>), <code>strength_data</code> (a reference to the new function you defined), and <code>fixed_cost</code> (the fixed cost of the bridge, can be found from <code>Report &gt; Cost Calculations</code> -- the simulation will be functional no matter this number, but the price on the graph may not reflect the actual price).</p> <p>The function must take two parameters, the first being the member id, and the second being an array of the file contents of the <code>strength_data_files</code>. The function should return the item of <code>strength_data_files</code> that corresponds to the length of the member. For example, if in my bridge design member #5 is 4m long, and when I ran <code>get_all_strengths.py</code> for a 4m member I saved it as <code>my_strength.obj</code> and made <code>\"my_strength.obj\"</code> it the first item in <code>strength_data_files</code>, the function <code>f(member_id, strength_array)</code> should return <code>strength_array[0]</code>.</p> <p>To generate the <code>maximums_csv</code> for your design, copy <code>Report &gt; Load Test Results</code> for any bridge of your shape into excel. Format the file the same as below. Here's an example of what the first three lines should look like. You can use the same format CSV as the <code>INITIALIZED_BRIDGE</code>.</p> <pre><code>#,Material Type,Cross Section,Size (mm),Length (m),Compression Force,Compression Strength,Compression Status,Tension Force,Tension Strength,Tension Status\n1,QTS,Hollow Tube,120x120x6,3.61,1437.39,648.22,Fail,0,1260.61,OK\n2,QTS,Hollow Tube,120x120x6,3.16,1440.27,746.38,Fail,0,1260.61,OK\n</code></pre> <p>Save the file as a CSV in the same directory as the code.</p> <p>bridge_settings.py</p> <pre><code># Bridge Shape 1\ndef bridge_shape_1_sort_members(x,d):\n    if x in [2,5,6,10]:\n        return d[3]\n    elif x in [1,11,23,24,26,27,32,33,36,37,40,41]:\n        return d[4]\n    elif x in [3,4,7,9]:\n        return d[5]\n    elif x in [8]+list(range(12,23)):\n        return d[0]\n    elif x in [25,34,35,42]:\n        return d[2]\n    elif x in list(range(28,32))+[38,39]:\n        return d[1]\n    else:\n        print(x)\n\nbridge_shape_1 = {'num_members': 42, 'minimums_csv':'minimums.csv',\n                              'strength_data_files':('MEMBER_4.obj','MEMBER_4_47.obj', 'MEMBER_2_24.obj',\n                                                     'MEMBER_3_16.obj', 'MEMBER_3_61.obj', 'MEMBER_4_12.obj'),\n                                'strength_data':bridge_shape_1_sort_members,\n                                'fixed_cost':51700+9000+41800+18400}\n\n# chosen bridge shape\nCURRENT_SETTING = bridge_shape_1\n\n# this is where you can specify a starting bridge instead of beginning from random, for example, \"BRIDGE_DETAIL_NEW.csv\". `None` means start from scratch.\nINITIALIZED_BRIDGE = None \n</code></pre>"},{"location":"stem/bridge-builder/#bridge-class","title":"Bridge Class","text":"<p><code>bridge_class.py</code> contains the <code>Bridge</code> class which controls entering a bridge into the West Point Bridge Designer software after the simulation has been run.</p> <p>bridge_class.py</p> <pre><code>import pyautogui as pg\nfrom time import sleep\nimport numpy as np\nfrom random import random, randint\nfrom bridge_settings import CURRENT_SETTING\n\n# coordinates and settings for Bridge Builder 2016\nTYPE_POS = [385, 125]\nMATERIAL_POS = [186, 121]\nSIZE_POS = [508, 122]\nTEST_POS = [174, 80]\nSTOP_TEST_POS = [146, 78]\nNUM_MEMBER_WIDTH_OPTIONS = 33\nNUM_MEMBER_TYPE_OPTIONS = 2\nNUM_MEMBER_MATERIAL_OPTIONS = 3\n\n# move mouse\ncurrent_mouse_pos = None\ndef move_to(pos):\n    global current_mouse_pos\n    if current_mouse_pos == pos: return\n    current_mouse_pos = pos\n    pg.moveTo(pos[0], pos[1], 0.2)\n\n# click from touple\ndef click(pos):\n    pg.click(pos[0], pos[1])\n\n# brige member - used in Bridge class below\nclass BridgeMember(object):\n    def __init__(self, id, material_option_pos, num_material_options, type_option_pos, num_type_options, size_option_pos, num_size_options):\n        self.id = id\n        self.material = None\n        self.size = None\n        self._type = None\n        self.num_material_options = num_material_options\n        self.num_type_options = num_type_options\n        self.num_size_options = num_size_options\n        self.material_option_pos = material_option_pos\n        self.type_option_pos = type_option_pos\n        self.size_option_pos = size_option_pos\n\n    def set_material(self, material):\n        self.material = material\n\n    def set_type(self, _type):\n        self._type = _type\n\n    def set_size(self, size):\n        self.size = size\n\n    def enact_member(self):\n        move_to(self.material_option_pos)\n        click(self.material_option_pos)\n        pg.press(\"tab\", presses=23, interval=0.01)\n        pg.press(\"up\", presses=CURRENT_SETTING['num_members'], interval=0.01)\n        pg.press(\"down\", presses=self.id, interval=0.01)\n\n        move_to(self.material_option_pos)\n        click(self.material_option_pos)\n        sleep(0.1)\n        pg.press(\"up\", presses=self.num_material_options, interval=0.01)\n        pg.press(\"down\", presses=self.material-1, interval=0.01)\n        pg.press(\"enter\")\n\n        pg.press(\"tab\")\n        pg.press(\"up\", presses=self.num_type_options, interval=0.01)\n        pg.press(\"down\", presses=self._type-1, interval=0.01)\n        pg.press(\"enter\")\n\n        pg.press(\"tab\")\n        pg.press(\"up\", presses=self.num_size_options, interval=0.01)\n        pg.press(\"down\", presses=self.size-1, interval=0.01)\n        pg.press(\"enter\")\n\n    def clamp_values(self):\n        self.set_material(np.clip(self.material, 1, self.num_material_options))\n        self.set_type(np.clip(self._type, 1, self.num_type_options))\n        self.set_size(np.clip(self.size, 1, self.num_size_options))\n\n# for enacting a bridge i.e. entering it into bridge designer via PyAutoGUI\nclass Bridge(object):\n    def __init__(self, num_members, material_option_pos, num_material_options, type_option_pos, num_type_options, size_option_pos, num_size_options):\n        self.num_members = num_members\n        self.num_material_options = num_material_options\n        self.num_type_options = num_type_options\n        self.num_size_options = num_size_options\n        self.material_option_pos = material_option_pos\n        self.type_option_pos = type_option_pos\n        self.size_option_pos = size_option_pos\n        self.fitness = None\n        self.bridge_members = [BridgeMember(i, material_option_pos, num_material_options, type_option_pos, num_type_options, size_option_pos, num_size_options) for i in range(num_members)]\n\n    def initialize_members(self, old_bridge=None, member_list=None, random_func=lambda num_opts,current_opt: randint(1, num_opts)):\n        if member_list is not None:\n            for member_des, member in zip(member_list, self.bridge_members):\n                member.set_material(member_des[0])\n                member.set_type(member_des[1])\n                member.set_size(member_des[2])\n                print(member.material,member._type,member.size)\n            return\n        if old_bridge is None:\n            for member in self.bridge_members:\n                member.set_material(random_func(self.num_material_options,member.material,member.id))\n                member.set_type(random_func(self.num_type_options,member._type,member.id))\n                member.set_size(random_func(self.num_size_options,member.size,member.id))\n        else:\n            for member_new, member_old in zip(self.bridge_members, old_bridge.bridge_members):\n                member_new.set_material(member_old.material)\n                member_new.set_type(member_old._type)\n                member_new.set_size(member_old.size)\n\n    def enact_members(self):\n        for member in self.bridge_members:\n            member.enact_member()\n</code></pre>"},{"location":"stem/bridge-builder/#read-text","title":"Read Text","text":"<p><code>read_text.py</code> uses <code>PyTesseract</code> to read on-screen text in screenshots collected by <code>OpenCV</code>. This is used in <code>get_all_strengths.py</code> to check whether the bridge failed slenderness test popup has appeared, indicating the bridge failed to hold the weight.</p> <p>read_text.py</p> <pre><code>import time\nimport cv2\nimport mss\nimport numpy\nimport pytesseract\n\npytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'\n\ndef scan_text(mon):\n    with mss.mss() as sct:\n        im = numpy.asarray(sct.grab(mon))\n        text = pytesseract.image_to_string(im)\n\n        cv2.imshow('Image', im)\n        if cv2.waitKey(25) &amp; 0xFF == ord('q'):\n            cv2.destroyAllWindows()\n        return text\n</code></pre>"},{"location":"stem/bridge-builder/#record-screen-position","title":"Record Screen Position","text":"<p><code>get_pos.py</code> records the mouse position two seconds after the program is started. This is used to collect coordinates for <code>get_all_strengths.py</code> and <code>bridge_class.py</code> so that, when putting the bridge into West Point Bridge Designer or copying a spreadsheet into <code>Google Sheets</code>, the software knows where to position the mouse.</p> <p>get_pos.py</p> <pre><code>import pyautogui as pg\nimport time\n\ntime.sleep(2)\nprint(pg.position())\n</code></pre>"},{"location":"stem/disability-forewarning-system/","title":"Disability Forewarning System","text":""},{"location":"stem/disability-forewarning-system/#disability-forewarning-system","title":"Disability Forewarning System","text":"<p>Since seventh grade, I have been an active advocate for the Tourette Association of America. I understand how a moment of education can drastically improve the outcome of a situation. When I was in elementary school, I was diagnosed with Tourette Syndrome, a neurological disorder characterized by involuntary motor and vocal tics. Determined to transform an obstacle into an opportunity, I became a Youth Ambassador for the Tourette Association of America. While my tics have greatly lessened in intensity as I\u2019ve grown older, my passion for advocacy has skyrocketed.</p> <p>For people with severe tics, their movements and vocalizations are often misinterpreted by law enforcement as intoxication or aggression, dangerously escalating encounters. In 2022, I was asked to help script and act in a Tourette Syndrome training video for law enforcement. While filming, I understood that this video faced obstacles in facilitating successful interactions, as not all officers would go through the training or recall the information during an encounter. I began dreaming of a device that could be a real-time advocate for people with Tourette Syndrome at a traffic stop.</p> <p>When I enrolled in Fab Academy, I had the opportunity to make this dream a reality. For my final project, I created the Disability Forewarning System, a device that mounts onto the rear window of a car. The device remains out of sight until the driver presses a button that wirelessly moves a screen down, flashing the message \u201cDriver Has Tourette Syndrome.\u201d The Disability Forewarning System was showcased by Fab Academy as a <code>Featured Project</code> and won the <code>Fab Academy Best Assistive Technology Award</code>.</p> <p>To read in-depth about the idea and plan for executing my final project, click here! To see the project summary, click here!</p> <p>Final Project Presentation Video</p> <p>Final Project Presentation Slide</p> <p></p>"},{"location":"stem/disability-forewarning-system/combining-electronics/","title":"Combining Electronics","text":""},{"location":"stem/disability-forewarning-system/combining-electronics/#combining-electronics","title":"Combining Electronics","text":""},{"location":"stem/disability-forewarning-system/combining-electronics/#compiled-code-from-different-pages","title":"Compiled Code From Different Pages","text":"<p>ESP32C3 BLE Code</p> <pre><code>#include &lt;ArduinoBLE.h&gt;\n\nvoid setup() {\n  Serial.begin(9600);\n  while (!Serial);\n\n  // begin initialization\n  if (!BLE.begin()) {\n    Serial.println(\"starting Bluetooth\u00ae Low Energy module failed!\");\n\n    while (1);\n  }\n\n  Serial.println(\"Bluetooth\u00ae Low Energy Central - Peripheral Explorer\");\n\n  // start scanning for peripherals\n  BLE.scanForName(\"DSD TECH\");\n}\n\nvoid loop() {\n  // check if a peripheral has been discovered\n  BLEDevice peripheral = BLE.available();\n\n  if (peripheral) {\n    // discovered a peripheral, print out address, local name, and advertised service\n    Serial.print(\"Found \");\n    Serial.print(peripheral.address());\n    Serial.print(\" '\");\n    Serial.print(peripheral.localName());\n    Serial.print(\"' \");\n    Serial.print(peripheral.advertisedServiceUuid());\n    Serial.println();\n\n    // see if peripheral is a LED\n    if (peripheral.localName() == \"DSD TECH\") { //LED\n      // stop scanning\n      BLE.stopScan();\n\n      explorerPeripheral(peripheral);\n\n      // peripheral disconnected, we are done\n      while (1) {\n        // do nothing\n      }\n    }\n  }\n}\n\nvoid explorerPeripheral(BLEDevice peripheral) {\n  // connect to the peripheral\n  Serial.println(\"Connecting ...\");\n\n  if (peripheral.connect()) {\n    Serial.println(\"Connected\");\n  } else {\n    Serial.println(\"Failed to connect!\");\n    return;\n  }\n\n  // discover peripheral attributes\n  Serial.println(\"Discovering attributes ...\");\n  if (peripheral.discoverAttributes()) {\n    Serial.println(\"Attributes discovered\");\n  } else {\n    Serial.println(\"Attribute discovery failed!\");\n    peripheral.disconnect();\n    return;\n  }\n\n  // read and print device name of peripheral\n  Serial.println();\n  Serial.print(\"Device name: \");\n  Serial.println(peripheral.deviceName());\n  Serial.print(\"Appearance: 0x\");\n  Serial.println(peripheral.appearance(), HEX);\n  Serial.println();\n\n  // loop the services of the peripheral and explore each\n  for (int i = 0; i &lt; peripheral.serviceCount(); i++) {\n    BLEService service = peripheral.service(i);\n\n    exploreService(service);\n  }\n\n  Serial.println();\n\n  // we are done exploring, disconnect\n  Serial.println(\"Disconnecting ...\");\n  peripheral.disconnect();\n  Serial.println(\"Disconnected\");\n}\n\nvoid exploreService(BLEService service) {\n  // print the UUID of the service\n  Serial.print(\"Service \");\n  Serial.println(service.uuid());\n\n  // loop the characteristics of the service and explore each\n  for (int i = 0; i &lt; service.characteristicCount(); i++) {\n    BLECharacteristic characteristic = service.characteristic(i);\n\n    exploreCharacteristic(characteristic);\n  }\n}\n\nvoid exploreCharacteristic(BLECharacteristic characteristic) {\n  // print the UUID and properties of the characteristic\n  Serial.print(\"\\tCharacteristic \");\n  Serial.println(characteristic.uuid());\n  char s[] = \"ffe1\";\n  Serial.print(s[3]);Serial.print(\" == \");Serial.print(characteristic.uuid()[3]);Serial.println(\"? \");Serial.println(characteristic.uuid()[3] == s[3]);\n  if (characteristic.uuid()[3] == s[3]){\n    Serial.print(\"WRITING 6 to \");Serial.println(characteristic.uuid());\n  uint8_t v_ = 6;\n  characteristic.writeValue(v_);\n  }\n  Serial.print(\", properties 0x\");\n  Serial.print(characteristic.properties(), HEX);\n\n  // check if the characteristic is readable\n  if (characteristic.canRead()) {\n    // read the characteristic value\n    characteristic.read();\n\n    if (characteristic.valueLength() &gt; 0) {\n      // print out the value of the characteristic\n      Serial.print(\", value 0x\");\n      printData(characteristic.value(), characteristic.valueLength());\n    }\n  }\n  Serial.println();\n\n  // loop the descriptors of the characteristic and explore each\n  for (int i = 0; i &lt; characteristic.descriptorCount(); i++) {\n    BLEDescriptor descriptor = characteristic.descriptor(i);\n\n    exploreDescriptor(descriptor);\n  }\n}\n\nvoid exploreDescriptor(BLEDescriptor descriptor) {\n  // print the UUID of the descriptor\n  Serial.print(\"\\t\\tDescriptor \");\n  Serial.print(descriptor.uuid());\n\n  // read the descriptor value\n  descriptor.read();\n\n  // print out the value of the descriptor\n  Serial.print(\", value 0x\");\n  printData(descriptor.value(), descriptor.valueLength());\n\n  Serial.println();\n}\n\nvoid printData(const unsigned char data[], int length) {\n  for (int i = 0; i &lt; length; i++) {\n    unsigned char b = data[i];\n\n    if (b &lt; 16) {\n      Serial.print(\"0\");\n    }\n\n    Serial.print(b, HEX);\n  }\n}\n</code></pre> <p>I also added an LED flashing at the start of the ESP32C3 code so that I could easily test whether the program had started when using battieries.</p> <p>Servo Code Pico</p> <pre><code>import utime\nfrom servo import Servo\n\ns1 = Servo(21)       # Servo pin is connected to GP21\n\ndef servo_Map(x, in_min, in_max, out_min, out_max):\n    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min\n\ndef servo_Angle(angle):\n    if angle &lt; 0:\n        angle = 0\n    if angle &gt; 180:\n        angle = 180\n    s1.goto(round(servo_Map(angle,0,180,0,1024))) # Convert range value to angle value\n\nif __name__ == '__main__':\n    while True:\n        utime.sleep(5)\n        servo_Angle(0)\n        utime.sleep(5)\n        servo_Angle(100)\n        \"\"\"try:\n            servo_Angle(float(input(\"&gt;&gt; Angle? \")))\n        except:\n            print(\"Error: NaN\")\"\"\"\n</code></pre> <p>Servo Library Pico (servo.py)</p> <pre><code>from machine import Pin, PWM\n\n\nclass Servo:\n    \"\"\" A simple class for controlling a 9g servo with the Raspberry Pi Pico.\n\n    Attributes:\n\n        minVal: An integer denoting the minimum duty value for the servo motor.\n\n        maxVal: An integer denoting the maximum duty value for the servo motor.\n\n    \"\"\"\n\n    def __init__(self, pin: int or Pin or PWM, minVal=2500, maxVal=7500):\n        \"\"\" Creates a new Servo Object.\n\n        args:\n\n            pin (int or machine.Pin or machine.PWM): Either an integer denoting the number of the GPIO pin or an already constructed Pin or PWM object that is connected to the servo.\n\n            minVal (int): Optional, denotes the minimum duty value to be used for this servo.\n\n            maxVal (int): Optional, denotes the maximum duty value to be used for this servo.\n\n        \"\"\"\n\n        if isinstance(pin, int):\n            pin = Pin(pin, Pin.OUT)\n        if isinstance(pin, Pin):\n            self.__pwm = PWM(pin)\n        if isinstance(pin, PWM):\n            self.__pwm = pin\n        self.__pwm.freq(50)\n        self.minVal = minVal\n        self.maxVal = maxVal\n\n    def deinit(self):\n        \"\"\" Deinitializes the underlying PWM object.\n\n        \"\"\"\n        self.__pwm.deinit()\n\n    def goto(self, value: int):\n        \"\"\" Moves the servo to the specified position.\n\n        args:\n\n            value (int): The position to move to, represented by a value from 0 to 1024 (inclusive).\n\n        \"\"\"\n        if value &lt; 0:\n            value = 0\n        if value &gt; 1024:\n            value = 1024\n        delta = self.maxVal-self.minVal\n        target = int(self.minVal + ((value / 1024) * delta))\n        self.__pwm.duty_u16(target)\n\n    def middle(self):\n        \"\"\" Moves the servo to the middle.\n        \"\"\"\n        self.goto(512)\n\n    def free(self):\n        \"\"\" Allows the servo to be moved freely.\n        \"\"\"\n        self.__pwm.duty_u16(0)\n</code></pre> <p>ESP32C3 Button Code</p> <pre><code>void setup() {\n  pinMode(10, INPUT_PULLUP);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  Serial.println(\"Status?\");\n  if (digitalRead(10) == LOW) {\n    Serial.println(\"Success!\");\n  }\n}\n</code></pre> <p>Pico Code to Read BLE</p> <pre><code>from machine import UART, Pin\nimport time\n\nuart = UART(0, 9600, tx=Pin(0), rx=Pin(1))  # init with given baudrate\nuart.init(9600, bits=8, parity=None, stop=1)\ndef send_command(cmd):\n    uart.write(cmd + '\\r\\n')\n    time.sleep(0.5)  # Wait for command to execute\n\ndef setup():\n    send_command('wakeup')  # Check if HM-10 is responding\n    response = uart.read()\n    print(response)\n    if response == 'OK':\n        print('HM-10 is responding')\n    else:\n        print('HM-10 not responding')\n\n    send_command('AT+ROLE1')  # Set HM-10 to central role\n\n    # Assuming you know the address of your peripheral\n    # Replace the X's with the address of your peripheral\n    send_command('AT+CON348518008C98\\n')  \n\ndef loop():\n    while True:\n        if uart.any():\n            print(uart.readline())\n\nif __name__ == \"__main__\":\n    setup()\n    loop()\n</code></pre> <p>EPaper Code Pico</p> <pre><code>from machine import Pin, SPI\nimport framebuf\nimport utime\n\n# Display resolution\nEPD_WIDTH       = 800\nEPD_HEIGHT      = 480\n\nRST_PIN         = 12\nDC_PIN          = 8\nCS_PIN          = 9\nBUSY_PIN        = 13\n\nclass EPD_7in5(framebuf.FrameBuffer):\n    def __init__(self):\n        self.reset_pin = Pin(RST_PIN, Pin.OUT)\n\n        self.busy_pin = Pin(BUSY_PIN, Pin.IN, Pin.PULL_UP)\n        self.cs_pin = Pin(CS_PIN, Pin.OUT)\n        self.width = EPD_WIDTH \n        self.height = EPD_HEIGHT \n\n        self.spi = SPI(1)\n        self.spi.init(baudrate=4000_000)\n        self.dc_pin = Pin(DC_PIN, Pin.OUT)\n\n        self.buffer = bytearray(self.height * self.width // 8)\n        super().__init__(self.buffer, self.width, self.height, framebuf.MONO_HLSB)\n        self.init()\n\n    def digital_write(self, pin, value):\n        pin.value(value)\n\n    def digital_read(self, pin):\n        return pin.value()\n\n    def delay_ms(self, delaytime):\n        utime.sleep(delaytime / 1000.0)\n\n    def spi_writebyte(self, data):\n        self.spi.write(bytearray(data))\n\n    def module_exit(self):\n        self.digital_write(self.reset_pin, 0)\n\n    # Hardware reset\n    def reset(self):\n        self.digital_write(self.reset_pin, 1)\n        self.delay_ms(50) \n        self.digital_write(self.reset_pin, 0)\n        self.delay_ms(2)\n        self.digital_write(self.reset_pin, 1)\n        self.delay_ms(50)   \n\n    def send_command(self, command):\n        self.digital_write(self.dc_pin, 0)\n        self.digital_write(self.cs_pin, 0)\n        self.spi_writebyte([command])\n        self.digital_write(self.cs_pin, 1)\n\n    def send_data(self, data):\n        self.digital_write(self.dc_pin, 1)\n        self.digital_write(self.cs_pin, 0)\n        self.spi_writebyte([data])\n        self.digital_write(self.cs_pin, 1)\n\n    def send_data1(self, buf):\n        self.digital_write(self.dc_pin, 1)\n        self.digital_write(self.cs_pin, 0)\n        self.spi.write(bytearray(buf))\n        self.digital_write(self.cs_pin, 1)\n\n    def WaitUntilIdle(self):\n        print(\"e-Paper busy\")\n        while(self.digital_read(self.busy_pin) == 0):    # Wait until the busy_pin goes LOW\n            self.send_command(0x71)\n            self.delay_ms(20)\n        self.delay_ms(20) \n        print(\"e-Paper busy release\")  \n\n    def TurnOnDisplay(self):\n        self.send_command(0x12) # DISPLAY REFRESH\n        self.delay_ms(100)      #!!!The delay here is necessary, 200uS at least!!!\n        self.WaitUntilIdle()\n\n    def init(self):\n        # EPD hardware init start     \n        self.reset()\n\n        self.send_command(0x01)  # POWER SETTING\n        self.send_data(0x07)\n        self.send_data(0x07)     # VGH=20V,VGL=-20V\n        self.send_data(0x3f)     # VDH=15V\n        self.send_data(0x3f)     # VDL=-15V\n\n        self.send_command(0x04)  # POWER ON\n        self.delay_ms(100)\n        self.WaitUntilIdle()\n\n        self.send_command(0X00)   # PANNEL SETTING\n        self.send_data(0x1F)      # KW-3f   KWR-2F  BWROTP 0f   BWOTP 1f\n\n        self.send_command(0x61)     # tres\n        self.send_data(0x03)     # source 800\n        self.send_data(0x20)\n        self.send_data(0x01)     # gate 480\n        self.send_data(0xE0)\n\n        self.send_command(0X15)\n        self.send_data(0x00)\n\n        self.send_command(0X50)     # VCOM AND DATA INTERVAL SETTING\n        self.send_data(0x10)\n        self.send_data(0x00)\n\n        self.send_command(0X60)     # TCON SETTING\n        self.send_data(0x22)\n\n        self.send_command(0x65)     # Resolution setting\n        self.send_data(0x00)\n        self.send_data(0x00)     # 800*480\n        self.send_data(0x00)\n        self.send_data(0x00)\n\n        return 0;\n\n    def Clear(self):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10)\n        for i in range(0, wide):\n            self.send_data1([0xff] * high)\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1([0x00] * high)\n\n        self.TurnOnDisplay()\n\n    def ClearBlack(self):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10)\n        for i in range(0, wide):\n            self.send_data1([0x00] * high)\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1([0xff] * high)\n\n        self.TurnOnDisplay()\n\n    def display(self,blackimage):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10) \n        for i in range(0, wide):\n            self.send_data1(blackimage[(i * high) : ((i+1) * high)])\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1(blackimage[(i * high) : ((i+1) * high)])\n\n        self.TurnOnDisplay()\n\n\n    def sleep(self):\n        self.send_command(0x02) # power off\n        self.WaitUntilIdle()\n        self.send_command(0x07) # deep sleep\n        self.send_data(0xa5)\n\nwith open('TS_FINAL_IMG.pbm', 'rb') as f:\n    fb_smile1 = framebuf.FrameBuffer(bytearray(f.read()[12:]), EPD_WIDTH, EPD_HEIGHT, framebuf.MONO_HLSB)\n\nif __name__=='__main__':\n    epd = EPD_7in5()\n    epd.Clear()\n\n    epd.fill(0x00)\n\n    epd.blit(fb_smile1, 0, 0)\n    epd.display(epd.buffer)\n\n    print(\"sleep\")\n    epd.sleep()\n</code></pre>"},{"location":"stem/disability-forewarning-system/combining-electronics/#final-code","title":"Final Code","text":"<p>Final Pico Code (excluding servo library)</p> <pre><code>import utime, time\nfrom servo import Servo\nfrom machine import UART, Pin, SPI\nimport framebuf\n\nuart = UART(0, 9600, tx=Pin(0), rx=Pin(1))  # init with given baudrate\nuart.init(9600, bits=8, parity=None, stop=1)\n\ncurrent_pos = False # false = down, true = up\n\ns1 = Servo(21)       # Servo pin is connected to GP21\n\n# Display resolution\nEPD_WIDTH       = 800\nEPD_HEIGHT      = 480\n\nRST_PIN         = 12\nDC_PIN          = 8\nCS_PIN          = 9\nBUSY_PIN        = 13\n\nclass EPD_7in5(framebuf.FrameBuffer):\n    def __init__(self):\n        self.reset_pin = Pin(RST_PIN, Pin.OUT)\n\n        self.busy_pin = Pin(BUSY_PIN, Pin.IN, Pin.PULL_UP)\n        self.cs_pin = Pin(CS_PIN, Pin.OUT)\n        self.width = EPD_WIDTH \n        self.height = EPD_HEIGHT \n\n        self.spi = SPI(1)\n        self.spi.init(baudrate=4000_000)\n        self.dc_pin = Pin(DC_PIN, Pin.OUT)\n\n        self.buffer = bytearray(self.height * self.width // 8)\n        super().__init__(self.buffer, self.width, self.height, framebuf.MONO_HLSB)\n        self.init()\n\n    def digital_write(self, pin, value):\n        pin.value(value)\n\n    def digital_read(self, pin):\n        return pin.value()\n\n    def delay_ms(self, delaytime):\n        utime.sleep(delaytime / 1000.0)\n\n    def spi_writebyte(self, data):\n        self.spi.write(bytearray(data))\n\n    def module_exit(self):\n        self.digital_write(self.reset_pin, 0)\n\n    # Hardware reset\n    def reset(self):\n        self.digital_write(self.reset_pin, 1)\n        self.delay_ms(50) \n        self.digital_write(self.reset_pin, 0)\n        self.delay_ms(2)\n        self.digital_write(self.reset_pin, 1)\n        self.delay_ms(50)   \n\n    def send_command(self, command):\n        self.digital_write(self.dc_pin, 0)\n        self.digital_write(self.cs_pin, 0)\n        self.spi_writebyte([command])\n        self.digital_write(self.cs_pin, 1)\n\n    def send_data(self, data):\n        self.digital_write(self.dc_pin, 1)\n        self.digital_write(self.cs_pin, 0)\n        self.spi_writebyte([data])\n        self.digital_write(self.cs_pin, 1)\n\n    def send_data1(self, buf):\n        self.digital_write(self.dc_pin, 1)\n        self.digital_write(self.cs_pin, 0)\n        self.spi.write(bytearray(buf))\n        self.digital_write(self.cs_pin, 1)\n\n    def WaitUntilIdle(self):\n        print(\"e-Paper busy\")\n        while(self.digital_read(self.busy_pin) == 0):    # Wait until the busy_pin goes LOW\n            self.send_command(0x71)\n            self.delay_ms(20)\n        self.delay_ms(20) \n        print(\"e-Paper busy release\")  \n\n    def TurnOnDisplay(self):\n        self.send_command(0x12) # DISPLAY REFRESH\n        self.delay_ms(100)      #!!!The delay here is necessary, 200uS at least!!!\n        self.WaitUntilIdle()\n\n    def init(self):\n        # EPD hardware init start     \n        self.reset()\n\n        self.send_command(0x01)  # POWER SETTING\n        self.send_data(0x07)\n        self.send_data(0x07)     # VGH=20V,VGL=-20V\n        self.send_data(0x3f)     # VDH=15V\n        self.send_data(0x3f)     # VDL=-15V\n\n        self.send_command(0x04)  # POWER ON\n        self.delay_ms(100)\n        self.WaitUntilIdle()\n\n        self.send_command(0X00)   # PANNEL SETTING\n        self.send_data(0x1F)      # KW-3f   KWR-2F  BWROTP 0f   BWOTP 1f\n\n        self.send_command(0x61)     # tres\n        self.send_data(0x03)     # source 800\n        self.send_data(0x20)\n        self.send_data(0x01)     # gate 480\n        self.send_data(0xE0)\n\n        self.send_command(0X15)\n        self.send_data(0x00)\n\n        self.send_command(0X50)     # VCOM AND DATA INTERVAL SETTING\n        self.send_data(0x10)\n        self.send_data(0x00)\n\n        self.send_command(0X60)     # TCON SETTING\n        self.send_data(0x22)\n\n        self.send_command(0x65)     # Resolution setting\n        self.send_data(0x00)\n        self.send_data(0x00)     # 800*480\n        self.send_data(0x00)\n        self.send_data(0x00)\n\n        return 0;\n\n    def Clear(self):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10)\n        for i in range(0, wide):\n            self.send_data1([0xff] * high)\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1([0x00] * high)\n\n        self.TurnOnDisplay()\n\n    def ClearBlack(self):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10)\n        for i in range(0, wide):\n            self.send_data1([0x00] * high)\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1([0xff] * high)\n\n        self.TurnOnDisplay()\n\n    def display(self,blackimage):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10) \n        for i in range(0, wide):\n            self.send_data1(blackimage[(i * high) : ((i+1) * high)])\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1(blackimage[(i * high) : ((i+1) * high)])\n\n        self.TurnOnDisplay()\n\n\n    def sleep(self):\n        self.send_command(0x02) # power off\n        self.WaitUntilIdle()\n        self.send_command(0x07) # deep sleep\n        self.send_data(0xa5)\n\ndef InitializeEpaper():\n    with open('TS_FINAL_IMG.pbm', 'rb') as f:\n        fb_smile1 = framebuf.FrameBuffer(bytearray(f.read()[12:]), EPD_WIDTH, EPD_HEIGHT, framebuf.MONO_HLSB)\n    epd = EPD_7in5()\n    epd.Clear()\n\n    epd.fill(0x00)\n\ndef DisplayImage():\n    epd.blit(fb_smile1, 0, 0)\n    epd.display(epd.buffer)\n    #print(\"sleep\")\n    #epd.sleep()\n\ndef send_command(cmd):\n    uart.write(cmd + '\\r\\n')\n    time.sleep(0.5)  # Wait for command to execute\n\ndef bluetooth_setup():\n    send_command('wakeup')  # Check if HM-10 is responding\n    response = uart.read()\n    print(response)\n    if response == 'OK':\n        print('HM-10 is responding')\n    else:\n        print('HM-10 not responding')\n\n    send_command('AT+ROLE1')  # Set HM-10 to central role\n\n    # Assuming you know the address of your peripheral\n    # Replace the X's with the address of your peripheral\n    send_command('AT+CON348518008C98\\n')  \n\ndef bluetooth_loop(func_arg):\n    while True:\n        if uart.any():\n            func_arg(uart.readline())\n\ndef servo_Map(x, in_min, in_max, out_min, out_max):\n    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min\n\ndef servo_Angle(angle):\n    if angle &lt; 0:\n        angle = 0\n    if angle &gt; 180:\n        angle = 180\n    s1.goto(round(servo_Map(angle,0,180,0,1024))) # Convert range value to angle value\n\ndef move_up():\n    global current_pos\n    servo_Angle(100)\n    current_pos = True\n    #utime.sleep(5) # ensures that the motor will never go crazy\n\ndef move_down():\n    global current_pos\n    servo_Angle(0)\n    current_pos = False\n    DisplayImage()\n    #utime.sleep(5) # ensures that the motor will never go crazy\n\ndef process_data(bytes_recieved):\n    print(bytes_recieved)\n    try:\n        i = ord(bytes_recieved)\n    except:\n        print(\"Error processing bytes\")\n        return\n    print(f\"Recieved: {i}\")\n    if i == 1 and not current_pos: # UP command recieved &amp; not currently up\n        move_up()\n    elif i == 2 and current_pos: # DOWN command recieved &amp; currently up\n        move_down()\n    else:\n        print(f\"Code not recognized\")\n\n\ndef loop():\n    bluetooth_loop(process_data)\n\nif __name__ == '__main__':\n    InitializeEpaper()\n    bluetooth_setup()\n    loop()\n</code></pre> <p>Final ESP32C3 Code</p> <pre><code>#include &lt;ArduinoBLE.h&gt;\n\nBLECharacteristic correctCharacteristic;\n\nbool displayDown = true;\n\nbool buttonAlreadyPressed = false;\n\nbool connectionEstablished = false;\n\nvoid InitializeBluetooth() {\n  if (!BLE.begin()) {\n    while (1);\n  }\n  BLE.scanForName(\"DSD TECH\");\n}\n\n\nvoid explorerPeripheral(BLEDevice peripheral) {\n  // connect to the peripheral\n\n  if (!peripheral.connect()) return;\n\n  if (!peripheral.discoverAttributes()) {\n    peripheral.disconnect();\n    return;\n  }\n\n  bool correctServiceFound = false;\n\n  // loop the services of the peripheral and explore each\n  for (int i = 0; i &lt; peripheral.serviceCount(); i++) {\n    BLEService service = peripheral.service(i);\n\n    bool isCorrectService = exploreService(service);\n    if (isCorrectService) {correctServiceFound = true; break;}\n  }\n\n  if (!correctServiceFound) peripheral.disconnect();\n}\n\nbool exploreService(BLEService service) {\n\n    bool foundCorrectCharacteristic = false;\n\n  // loop the characteristics of the service and explore each\n  for (int i = 0; i &lt; service.characteristicCount(); i++) {\n    BLECharacteristic characteristic = service.characteristic(i);\n\n    bool isCorrectCharacteristic = exploreCharacteristic(characteristic);\n    if (isCorrectCharacteristic) {\n        foundCorrectCharacteristic = true;\n        break;\n    }\n  }\n  return foundCorrectCharacteristic;\n}\n\nvoid WriteVal(uint8_t value) {\n if (correctCharacteristic) correctCharacteristic.writeValue(value);\n}\n\nbool exploreCharacteristic(BLECharacteristic characteristic) {\n  // print the UUID and properties of the characteristic\n  char s[] = \"ffe1\";\n  if (characteristic.uuid()[0] == s[0] &amp;&amp; characteristic.uuid()[1] == s[1] &amp;&amp; characteristic.uuid()[2] == s[2] &amp;&amp; characteristic.uuid()[3] == s[3]){\n    correctCharacteristic = characteristic;\n    return true;\n  }\n    return false;\n}\n\nvoid InitializeButton() {\n    pinMode(10, INPUT_PULLUP);\n}\n\nbool ButtonIsPressed() {\n    return digitalRead(10) == LOW;\n}\n\nvoid ToggleDisplay() {\n    if (displayDown) {\n        // send message to move display up\n        Serial.println(\"Writing 1\");\n        WriteVal(1); // 1 = UP\n    }\n    else {\n        // send message to move display down\n        Serial.println(\"Writing 2\");\n        WriteVal(2); // 2 = DOWN\n    }\n    displayDown = !displayDown;\n}\n\nvoid setup() {\n  pinMode(D9, OUTPUT);\n  digitalWrite(D9, HIGH);\n    delay(1000);\n    digitalWrite(D9, LOW);\n    delay(1000);\n    digitalWrite(D9, HIGH);\n    delay(750);\n    digitalWrite(D9, LOW);\n    delay(500);\n    digitalWrite(D9, HIGH);\n    delay(250);\n    digitalWrite(D9, LOW);\n    delay(100);\n    digitalWrite(D9, HIGH);\n    delay(10);\n    digitalWrite(D9, LOW);\n    delay(10);\n  Serial.begin(9600);\n    InitializeButton();\n    InitializeBluetooth();\n\n}\n\nvoid loop() {\n    if (connectionEstablished) {\n        bool buttonIsPressed = ButtonIsPressed();\n        if (buttonIsPressed &amp;&amp; !buttonAlreadyPressed) {\n            buttonAlreadyPressed = true;\n            ToggleDisplay();\n            delay(1000);\n        }\n        else if (!buttonIsPressed) {\n            buttonAlreadyPressed = false;\n        }\n    }\n    else {\n        // check if a peripheral has been discovered\n        BLEDevice peripheral = BLE.available();\n\n        if (peripheral) {\n            if (peripheral.localName() == \"DSD TECH\") { //LED\n            // stop scanning\n            BLE.stopScan();\n\n            explorerPeripheral(peripheral);\n\n            connectionEstablished = true;\n            Serial.println(\"Connection established\");\n            Serial.println(correctCharacteristic.uuid());\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"stem/disability-forewarning-system/cupholder-electronics/","title":"Cupholder Electronics","text":""},{"location":"stem/disability-forewarning-system/cupholder-electronics/#cupholder-electronics","title":"Cupholder Electronics","text":""},{"location":"stem/disability-forewarning-system/cupholder-electronics/#code-and-casing","title":"Code and Casing","text":"<p>The button fit perfectly into the 3D printed lid!</p> <p></p> <p></p> <p></p> <p>I spent a very long time trying to get code to upload to the XIAO Seeed Studio ESP32C3 and I learned two things: I need to use the board under the <code>Seeed</code> package, and that when I see <code>Leaving... Hard resetting via RTS pin...</code> in the Arduino IDE after uploading with the Bootloader button, I need to press the <code>Reset</code> button on the board.</p> <p>I realized that my old design was faulty, and decided to, instead, utilize the built in pull-up resistor in the ESP32c3. As I redesign it I also want to keep in mind that, according to this forum I found previously, pins <code>D0-3</code> don't have built in pull-up resistors.</p> <p></p> <p>I had to remember to uncheck <code>Solder Mask</code> when pushing to the 3D PCB.</p> <p>There was only a blank cylinder when I pushed to the 3D PCB. To fix this problem, under the drop down where I selected to push to 3D PCB, I selected to break the link to the 3D PCB, then created a new one, which worked. This issue probably had something to do with the EIP workflow and my PCB design being imported into another model. I unchecked the component with the package bodies then followed the same steps as this page to mill on my home machine - I also had to create a new <code>0.5mm</code> tool and configure the settings. I created two toolpaths in the setup, both <code>2D Contours</code>.</p> <p></p> <p>After re-milling the board, I used a knife to cut one small connection at a corner that wasn't cut all the way. Then I soldered the board on using solder paste for the bottom connections and a heat gun, but ultimately there were shorts between the paris of output pins. Removing the board using the heat gun revealed that the short was due not to the board, but because of a solder bridge underneath. I also tried using a knife to scrape out the rest of the copper underneath the board to avoid shorts. As I implemented these solutions, I ended up ripping the traces on the header pins. After the fact, I also realized I was using the wrong pin numbers in the code.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>I then redesigned the board to be simpler and cause less issues, which worked (I had planned to mill out all of the excess copper if this failed, but in the end, I didn't have to)! The only problem is that the surrounding copper of the board has continuity with the ground, but since none of the other header pins have continuity with it, this should be find (there were some bridges where I connected continuity with other pins, but all of those didn't do anything). I also modified the wiring to use a pull-up resistor instead of a pull-down resistor. I also used a different footprint (in the WirePad library) called <code>SMD5</code>.</p> <p></p> <p></p> <p></p> <p></p> <p>Here was the final, working code for the button.</p> <pre><code>void setup() {\n  pinMode(10, INPUT_PULLUP);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  Serial.println(\"Status?\");\n  if (digitalRead(10) == LOW) {\n    Serial.println(\"Success!\");\n  }\n}\n</code></pre>"},{"location":"stem/disability-forewarning-system/cupholder-electronics/#rechargeable-batteries","title":"Rechargeable Batteries","text":"<p>Using the same battery as the display electronics, I didn't see a light when I plugged it in, but the multimeter revealed 3v3 was working.</p> <p>After recharging the battery, I was getting inconsistent results, and I decided to use a USB plug into the car instead. I drilled a hole in the bottom of the cup and used a USB to USBC wire so that the cupholder device can be plugged into the car! This worked wonderfully! I also redid the design to where there is a hole in the bottom side of the botton, but I never ended up printing it.</p> <p></p>"},{"location":"stem/disability-forewarning-system/cupholder-electronics/#melted-button","title":"Melted Button","text":"<p>One time the solder for the button became undone, but after resoldering it, the button stopped working and was stuck shut. I opened up the button, but I was unable to open the electronics box (I believe it melted shut). My solution was to simply use a different spare button, but I was very careful to never have the solder touching the button for more than a couple of seconds at a time, and I instead created a circular shape out of the wire, melted a substantial amount of solder onto it, then moved it quickly onto the button. This method worked!</p>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/","title":"Cupholder Mechanism","text":""},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#designing-the-mold","title":"Designing The Mold","text":""},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#overall-understanding","title":"Overall Understanding","text":"<p>Teddy Warner taught us about different molding processes.</p> <ul> <li>for hard parts, mold from a milled or 3d-printed design then use the casted mold for the final part</li> <li>for soft parts, mill or 3d-print the mold</li> </ul> <p>Ms. Morrow's Tutorial (~13:40) explains that this is because a hard substance won't pull out of another hard substance well.</p> <p>Mr. Budzichowski said our machines have <code>5/8\"</code> depth of cut.</p>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#overall-planning","title":"Overall Planning","text":"<p>Here's my plan for this week.</p> <pre><code>- watch the lecture\n- look at past documentation\n- make the design\n- mill the mold\n- carry out the mold\n</code></pre>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#looking-at-past-projects","title":"Looking At Past Projects","text":""},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#making-the-design","title":"Making The Design","text":"<p>I decided I'll mold the lid of the trigger mechanism for my final project. Due to the shape of the design and overhangs, it will need to be a three part mold. I used Fusion 360 to make the design. The first step was to make extrusions larger than the part then use the <code>Combine</code> tool with the <code>Cut</code> setting. After making different pieces in such a way that they'll fit onto one another, I made another box and used the <code>Combine</code> tool to simulate the mold to make sure it would work, and after some adjustments, I made a design I was happy with. I then made molds for the molds in the same way, adding extruded holes in the top piece for a place to pour and a place for trapped air to be released. I also added <code>1 deg</code> drafts to most of the pieces (not in the final mold but in the rubber mold) that way I could easily remove the pieces, but I didn't stress about making them for all pieces since having a soft component of every cast will make it easier to separate pieces.</p> <p>I also decided I wouldn't need any tolerance since the pieces casted from the milled wax would be soft.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#milling-the-mold","title":"Milling The Mold","text":""},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#exporting-the-files","title":"Exporting The Files","text":"<p>I followed Dr. Taylor's Workflow (included in weekly files) for using the <code>Manufacturing</code> workspace in Fusion 360. I used <code>Pocket</code> cuts as a roughing pass, set the feed rate to <code>750 mm/min</code> and set the maximum roughing stepdown to <code>0.75mm</code> (for the top and bottom molds). I used the 1/8\" ball end mill wax bit for both the roughing and finishing pass, although I later learned that a flat end mill is more appropriate for the roughing pass as it will drastically reduce the job time, and I will be sure to use this for future milling endeavors. I also did a <code>Parallel</code> toolpath as a finishing pass for the ramps on the middle mold. I also used a top offset of <code>0.75 mm</code> for the middle mold  to account for uneveness in the top face of the wax. If any of this is unclear, please see the <code>Setup</code>s and timeline in the Fusion 360 files for Week 12 on the Reflection Page. </p>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#preparing-the-wax","title":"Preparing The Wax","text":"<p>I used the video on Ms. Morrow's Documentation as a basis for fusing wax blocks together, as I needed more width than was available on one wax block. After a couple of failed attempts, I learned that heating one side really hot until its very melty, while having the other slide a little shiny, works very well. I used the highest setting on the heat gun for everything. After they were somewhat stuck together, I used the heat gun to melt all of the creases between the two blocks. I learned that holding the heat gun at a 45 degree angle and then flipping it to the other side help make the wax one cohesive piece once it rehardened. I right-clicked on the setup and clicked <code>Machining Time</code> as well as <code>Simulate</code> to make sure the result was what I wanted.</p> <p>After I had made the first mold (documented below), Mr. Budzichowski helped me use the Bandsaw to cut away the excess mold from my first piece I milled. I used this wax, as well as other wax, to make two more wide enough pieces for the top and bottom molds.</p> <p>I also copied the tool from the <code>Othermill</code> library and modified the values as follows to fit with the longer bit the lab ordered.</p> <p></p>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#milling","title":"Milling","text":"<p>I used the Bantam Milling Machine which followed the same procedure as my other times milling. It was a very smooth process.</p>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#middle-mold","title":"Middle Mold","text":"<p>This piece worked first try. I slightly underestimated the y-offset (even though I used calipers), but it didn't affect the final cast whatsoever.</p> <p></p>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#top-mold","title":"Top Mold","text":"<p>This piece was also very smooth. I used a large block of wax that the lab melted down from scaps and used the bandsaw to remove excess, reusable wax. Because the shape of the top face of the large block was slightly concave, I had to remove my nitto tape and put it on the other side (it wouldn't contact with the bed of the milling machine).</p> <p></p> <p>The only problem is that the cut was very thin on the bottom since the toolpath was so close to the bottom of the wax. I learned that I not only need to check that the toolpath doesn't give any errors, but also give several millimeters of extra room at the bottom of the cut.</p> <p></p> <p></p> <p></p> <p>Additionally, I gathered much of the sawdust (or waxdust) by hand and put it in a ziploc bag to be melted down and reused by other students.</p> <p></p>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#bottom-mold","title":"Bottom Mold","text":"<p>This piece also worked on the first try. The piece of wax I used was fiver other smaller pieces heat-welded together, so I was nervous about it sticking together. In the end, it did, but the only trouble spot was an uneven top surface. One wax piece was higher than the rest and the bit, for the first layer, cut through significantly more wax when cutting through that block and made an unpleasant sound. I watched it through the first layer and it didn't melt or cause other issues, and from that point on, the rest of the process was smooth.</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#casting","title":"Casting","text":"<p>I refered to the datasheet for Mold Star 16 Platinum Silicone Rubber and the datasheet for Task 8 Heat Resistant Polyurethane Resin before opening the containers.</p>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#soft","title":"Soft","text":""},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#middle","title":"Middle","text":"<p>When I was using the Bandsaw to cut away excess wax, the mold split apart along the two pieces of was I had fused together. I used a double-folded rubber band to hold it together. </p> <p></p> <p>I mixed <code>20oz</code> Part A and <code>20oz</code> Part B of <code>Platinum Silicone Rubber</code> (Ryan Kim and I were casting together - it was more than necessary for my part). </p> <p></p> <p>We poured the parts into separate plastic cups then slowly poured them together and mixed for ~45sec. I then poured it into my mold and used a popsickle stick to remove excess material from the top (I was especially worried about this since this rubber piece will be the middle part of the three-part mold). I then gently but firmly slammed the cast into the table ~10 times to remove air bubbles. One time the mold slipped apart, but I quickly put it back together. </p> <p></p> <p>When I removed the mold, it worked very well! For the first protruding bit I needed to use an exacto knife to remove it without ripping, but I was able to carefully remove the rest of it with my fingers. The only problem was that, around the areas where the two wax pieces were held together, there were very thin pieces of rubber that couldn't be easily ripped off. I carefully removed the parts I could by ripping, but I used scissors for the other parts.</p> <p></p> <p></p> <p></p> <p></p> <p>Also the bottom side of the rubber allowed me to see how many bubbles were still in the material (my other silicone casts below looked similar on the bottom).</p> <p></p> <p>This piece really allowed me to see how much of an impact the finishing pass made.</p> <p></p>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#top","title":"Top","text":"<p>I followed the same process as the middle soft cast, and it was relatively smooth. The first time I had slightly too little material so I let the cast set for <code>30min</code> then removed it.</p> <p></p> <p>I then redid it and mixed excess material (I would measure using water first but since the bottom layer of the wax was very this and partially breaking the water would have simply leaked out). I had some leakage on the bottom of the cast, but it was still successful and I used a razor blade to cut off the excess as well as I could.</p> <p></p> <p></p> <p></p> <p></p> <p>Also when I casted the bottom piece (see below) I had accidentally poured way too much so I poured the rest back into the top mold since I didn't want to waste the mixed material, but I again had just too little so I ended up scraping this other mold.</p> <p></p> <p></p> <p></p> <p>It leaked a lot and when removing the cast the mold broke (I think I was too generous when using the bandsaw to cut off excess material, sacrificing structural integrity; I also had to eyeball the position of the middle piece with the thin connection, which had broken; the middle piece also had pieces chip off of the bottom, slightly thicker square).</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#bottom","title":"Bottom","text":"<p>I followed the same process as the previous two soft casts. This one worked first try, although there was some leaking, so I tried my best to take up the edge, and this was somewhat successful for the vertical edges but relatively ineffective for the bottom of the mold (the part touching the carboard on the table).</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#hard","title":"Hard","text":"<p>I aligned the three rubber molds together to make the final hard mold. I was very satisfied with the first of the bottom and middle pieces, although I wish it was tighter.</p> <p></p> <p></p> <p>I tried filling it up with water to measure the exact volume, but it spilled out of a thin slice that had ruptured in the bottom piece. </p> <p></p> <p>I simply filled it up with the mixed hard material (I poured slightly too much, but I aimed to overestimate which worked well). I then realized it started leaking (even though I had put tape in that spot) so I pushed down on the rubber to try to stop it and also poured more to make sure the mold was full. I then waited until the casting material was more viscous and moved it away from the spilled material. I noticed that the cast got fairly hot, and at one point, it quickly changed to a whiter color. The cast worked faily well, especially for my first time casting plastic being a 3-part mold out of other casted silicone pieces. I used wire cutters and a chisel to remove excess material that had gotten in cracks and noticed that it's very hard to get a 3-part mold to be water-tight, so I'm considering 3D-printing this part for my final project, instead. Also, the small middle mold piece had been coated in a thin layer of plastic, but I couldn't remove it by hand, so I used a wire cutter to cut away at the plastic, and with Mr. Dubick's help, I removed the mold, but unfortunately it had broken.</p> <p></p> <p>Here's the final result!</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#result-design-shift","title":"Result &amp; Design Shift","text":"<p>Since this mold didn't turn out wonderfully and has many chipped pieces, as well as considering the complexity of making an air-tight 3-part silicone mold, I've decided to 3D print the lid instead.</p>"},{"location":"stem/disability-forewarning-system/cupholder-mechanism/#3d-printing","title":"3D Printing","text":"<p>I set <code>Supports</code> to <code>Everywhere</code> and <code>Infill</code> to <code>20%</code> in Prusa slicer for both the lid and the container. To export only the <code>STL</code> of those components, I clicked the eye icon on the other components to hide them then exported the entire model, and this wokred. Both of the prints were very smooth; here are images of the results.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Removing the supports was surprisingly easy. The pieces fit together perfectly! It tightens enough where it is difficult, but still possible, to take apart!</p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/display-electronics/","title":"Display Electronics","text":""},{"location":"stem/disability-forewarning-system/display-electronics/#updating-board-design","title":"Updating Board Design","text":""},{"location":"stem/disability-forewarning-system/display-electronics/#choosing-a-microcontroller","title":"Choosing A Microcontroller","text":"<p>Since I have two different boards for the driver-side electronics and back-of-car electronics, I need to choose an appropriate microcontroller to design a second board with.</p> <p>This forum revealed to me that the <code>ESP32-C3</code> isn't suitable for controlling servo motors.</p> <p>In hindsight, it's good that I designed my first board with a microcontroller that can use WiFi and Bluetooth because some part of the board will need to communicate the custom message to display on the screen, which can be updated remotely from an app or website. I might also want to consider handling this functionality on the other board, but I feel it's not necessary.</p> <p>Prompt</p> <pre><code>I'm designing a PCB board to control a servo motor, an e-paper/e-ink LCD display, and receive signals  over bluetooth (or wifi - they won't be connected to internet so bluetooth is probably a better idea). I am trying to use a microcontroller. I originally was going to use the ESP32-C3 because of the built in bluetooth and wifi, but read some forum posts which revealed that it's not great at controlling a servo motor. I also want to use an integrated circuit and not an arduino or raspberry pi pico, but a board, for example, like the XIAO Seeed rp2040 or an ATTINYMEGA/ATTINY. What do you recommend? Also comment on any choices I've described to you and provide feedback for anything that's not a well-warranted decision or explain why my choices are logical.\n</code></pre> <p>Response</p> <pre><code>Your requirement to control a servo motor, an e-paper/e-ink LCD display, and receive signals over Bluetooth (or WiFi) can be achieved using various microcontroller options. Since you prefer not to use an Arduino or Raspberry Pi Pico, I will recommend a few alternatives.\n\nSTM32 microcontrollers: STM32 microcontrollers, particularly the STM32F series (e.g., STM32F103C8T6), offer a good balance of performance, power efficiency, and a variety of peripherals. They can handle servo motor control, e-paper/e-ink displays, and can be paired with a separate Bluetooth module (e.g., HC-05) for communication. You can find various STM32 development boards, such as the Blue Pill, that can be programmed using the Arduino IDE or other development environments.\n\nnRF52 series microcontrollers: The nRF52832 and nRF52840 are ARM Cortex-M4-based microcontrollers with built-in Bluetooth Low Energy (BLE) capabilities. They have sufficient processing power and peripherals to control a servo motor and e-paper/e-ink displays. They are designed for low-power applications, which might be beneficial if power consumption is a concern.\n\nATSAMD21/51 microcontrollers: These microcontrollers from Microchip (previously Atmel) are ARM Cortex-M0+/M4 based and have good performance for controlling servo motors and e-paper/e-ink displays. You can pair them with an HC-05 Bluetooth module for communication. The Adafruit Feather M0/M4 boards use these microcontrollers, and you can find a variety of examples for controlling peripherals and communication.\n\nRegarding your original choice of ESP32-C3, it is true that it might not be the best option for precise servo motor control due to the\n</code></pre> <p>Prompt</p> <pre><code>pick up where you left off\n</code></pre> <p>Response</p> <pre><code>Due to the fact that ESP32-C3 uses an RISC-V based core, it might not be the best option for precise servo motor control as it can have timing-related challenges. It is also designed with WiFi and Bluetooth connectivity as its primary focus, which can be overkill if you only require Bluetooth communication.\n\nIn summary, based on your requirements, I would recommend considering STM32 microcontrollers, nRF52 series microcontrollers, or ATSAMD21/51 microcontrollers as potential options for your PCB board design. These microcontrollers provide sufficient processing power and peripherals to handle servo motor control, e-paper/e-ink displays, and can be paired with a separate Bluetooth module for communication.\n\nEnsure that you verify the specific peripherals and communication interfaces required for your chosen e-paper/e-ink display, servo motor, and Bluetooth module, and make sure the selected microcontroller supports those interfaces. Additionally, consider factors such as power consumption, form factor, and the availability of development resources, libraries, and community support when making your decision.\n</code></pre> <p>Prompt </p> <pre><code>This servo motor which moves the display needs to move the display onto the back window of a car, from the inside. How to you recommend I mount it?\n</code></pre> <p>Response</p> <pre><code>Mounting a servo motor to move a display inside a car can be done in a few steps. I will outline a general approach, but please note that the specific details may vary depending on the make and model of your car, the size and weight of the display, and the type of servo motor you are using.\n\nDetermine the best mounting location: Choose a location on the inside of the car's back window where the servo motor can be securely mounted and has sufficient space for the display to move. Make sure there are no obstructions and the window is not tinted in a way that would hinder the visibility of the display.\n\nDesign a mounting bracket: Create a custom mounting bracket that can securely hold the servo motor and attach it to the car's interior. The bracket should be made from a durable, lightweight material like aluminum or a strong plastic. The design should also consider cable management for the servo motor, display, and any other required connections.\n\nAttach the mounting bracket: Attach the mounting bracket to the car's interior using strong adhesives, like automotive-grade double-sided tape or adhesive sealant, or by using screws or other fasteners if the car's design allows for it. Ensure that the mounting is secure and does not interfere with any other vehicle functions.\n\nAttach the servo motor to the bracket: Secure the servo motor to the mounting bracket using screws, bolts, or other suitable fasteners. Make sure the servo motor is positioned correctly to move the display as desired.\n\n5\n</code></pre> <p>It didn't finish its response for the last prompt, but that's fine since it advise was far to general to be helpful.</p> <p>The responses for the microcontroller suggestion were helpful, though.</p> <p>I took a look at Florian Becker and asked ChatGPT 4.0 several other questions.</p> <p>Prompt</p> <pre><code>which of the three suggested microcontrollers should i use\n</code></pre> <p>Response</p> <pre><code>Selecting the most suitable microcontroller from the three suggested options depends on your specific requirements, priorities, and design constraints. I will provide a brief comparison to help you decide:\n\nSTM32 microcontrollers: STM32 microcontrollers, particularly the STM32F series, offer a good balance of performance, power efficiency, and a variety of peripherals. They are widely used in the maker community, and you can find extensive resources, libraries, and examples for various applications. If you want a powerful, well-supported microcontroller and don't mind adding a separate Bluetooth module, the STM32 is a solid choice.\n\nnRF52 series microcontrollers: The nRF52832 and nRF52840 are ARM Cortex-M4-based microcontrollers with built-in Bluetooth Low Energy (BLE) capabilities. They are particularly suitable for low-power applications, and their integrated BLE support simplifies the design. If power consumption is a concern or you prefer an integrated Bluetooth solution, the nRF52 series is an excellent option.\n\nATSAMD21/51 microcontrollers: These microcontrollers from Microchip (previously Atmel) are ARM Cortex-M0+/M4 based and have good performance for controlling peripherals. They are less powerful than STM32 microcontrollers but still provide sufficient resources for your application. If you are already familiar with Atmel microcontrollers or prefer a lower-cost solution, consider the ATSAMD21/51 microcontrollers\n</code></pre> <p>I decided on a STM32F series board and found this Instructables tutorial on how to wire and program an e-paper/e-ink display to the microcontroller. I also downloaded this EagleCAD library and imported it into Fusion 360.</p> <p>I found this site which explains naming conventions for the STM32 boards. </p> <p></p> <p>In the EagleCAD library I saw four boards:</p> <ul> <li>STM32F10XCXT6</li> <li>STM32F10XRXT6</li> <li>STM32F10XTXU6</li> <li>STM32F10XVXT6</li> </ul> <p>I decided on the first board, STM32F10XCXT6, since it has the least number of pins (from what I could tell in the EagleCAD schematic) and is surface-mount where the pin headers are exposed (unlike the STM32F10XTXU6).</p> <p></p> <p></p> <p>When I put the component in my schematic I at first only saw a small portion of the pins from one port. I then realized that if I kept added components the other pins would be added. I was quickly overwhelmed by the amount of boards and decided to switch to one with less pins.</p> <p></p> <p>Based on the Instructable I decided to assign different pins on a 2x5 SMD pin header I found (<code>PINHD-2X5-SMD</code> in the <code>fab</code> library) to the following.</p> Header Pin STM32 Pin 1 SDA 2 SCL 3 CS 4 DC 5 RST 6 BU 7 BS <p></p> <p></p> <p>I realized this chip has even more pins than an RP2040 (<code>ATTINY328P</code>) so I may as well just use that one. I could also use that XIAO Seeed RP2040 but am worried it won't have enough pins. This example confirms my worries.</p> <p></p> <p>I instead decided to use an ATTINY328P-AN. The DigiKey site linked to this page where I could download a component that I thought I could import into EagleCAD (I selected the <code>Eaglecad6 Library</code> format in the DigiKey download). That format didn't work so I selected <code>Fusion360 PCB</code> which gave an LBR file, as needed.</p> <p>After talking to Mr. Dubick, I decided to use a Raspberry Pi Pico which allows for me to more easily use an RP2040 with a lot of pins. I downloaded the EagleCAD library here. I used this of the three components since it was the entire Pico board (not just the RP2040 microprocessor) and is surface mount.</p> <p></p> <p>I also found this schematic for an e-paper HAT driver linked on this page from this website. I also found this post which compares different methods of operating the e-paper display, and I also skimmed this article.</p> <p>This website confirmed that SPI communication can be achieved with the Raspberry Pi Pico, and this tutorial eloborates on how to implement it. I also learned that there's a specific HAT driver for a smaller e-paper display designed for the Pico, which is concerned as to whether it's possible to use the Pico to operate a larger display. This website suggested a potential wiring for Arduino to talk to the driver. Here is a detailed pinout sheet for the Pico and here is a detailed pinout sheet for the Arduino Uno.</p> <p>I then watched this tutorial to gain a better understanding of e-paper displays. This revealed to me that the other wiring I got wasn't correct.</p> <p>I wasn't sure whether my display was a <code>7.5\"</code>, <code>7.5\"B</code>, or <code>7.5\"C</code> display, so I guessed <code>7.5\"</code> for now. I then downloaded a zip file of the code. I copied the <code>epd7in5</code> folder in the <code>7.5in</code> display folder to the Arduino Library folder (<code>C:\\Users\\*YOUR_USER*\\Documents\\Arduino\\libraries</code>). Then it appeared in the Arduino IDE!</p> <p></p> <p>I clicked in which added the following to the top of my code.</p> <pre><code>#include &lt;epd7in5.h&gt;\n#include &lt;epdif.h&gt;\n</code></pre> <p>I then went to <code>File &gt; Examples &gt; epd7in5 &gt; epd7in5-demo</code> but got an error that the path didn't exist. I then realized that this used a different address (which I accidentally put the library in before) so I wanted to copy the folder there, as well. But before I did that, I tried again, clicking the library under <code>Examples from Custom Libraries</code> and the example opened! I uploaded the code but got the following error.</p> <pre><code>:\\Users\\*USER*\\AppData\\Local\\Temp\\.arduinoIDE-unsaved2023223-2744-55l82c.2wca4\\epd7in5-demo\\imagedata.cpp:27:10: fatal error: avr/pgmspace.h: No such file or directory\n #include &lt;avr/pgmspace.h&gt;\n          ^~~~~~~~~~~~~~~~\ncompilation terminated.\n\nUsing library SPI at version 2.0.0 in folder: C:\\Users\\*USER*\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\2.0.7\\libraries\\SPI \nUsing library epd7in5 at version 1.0 in folder: C:\\Users\\*USER*\\Documents\\Arduino\\libraries\\epd7in5 \nexit status 1\n\nCompilation error: avr/pgmspace.h: No such file or directory\n</code></pre> <p>This site recommended that I simply commented out this include statement, so I changed the top of <code>imagedata.cpp</code> to the following.</p> <pre><code>#include \"imagedata.h\"\n//#include &lt;avr/pgmspace.h&gt;\n</code></pre> <p>The same post later suggested that I change it to the following, and the compilation was successful, but I got an error that I forgot to select a port. I also changed the board to Arduino Uno.</p> <pre><code>#include \"imagedata.h\"\n//#include &lt;avr/pgmspace.h&gt;\n#if defined(AVR)\n#include &lt;avr/pgmspace.h&gt;\n#else  //defined(AVR)\n#include &lt;pgmspace.h&gt;\n#endif  //defined(AVR)\n</code></pre> <p>I then got an error that the sketch was too large.</p> <pre><code>Sketch too big; see https://support.arduino.cc/hc/en-us/articles/360013825179 for tips on reducing it.\nSketch uses 33522 bytes (103%) of program storage space. Maximum is 32256 bytes.\nGlobal variables use 185 bytes (9%) of dynamic memory, leaving 1863 bytes for local variables. Maximum is 2048 bytes.\ntext section exceeds available space in board\n\nCompilation error: text section exceeds available space in board\n</code></pre> <p>I then tried to use an Arduino Mega 2560 that had more memory. I was able to upload the sketch but nothing happened on the screen. I tried directly connecting the screen to the hat without the long ribbon cable and I tried the B/C and V2 versions of the examples in the Waveshare E-Paper library but nothing worked. I tried both the wiring configuration on this website and the one on this website none of which worked!</p> <p></p> <p>I copied my documentation thus far into ChatGPT (excluding long parts at the end of some links to reduce the number of tokens) and asked it for advice. It's response wasn't helpful.</p> <pre><code>It seems like you have tried several different approaches to get the 7.5\" e-paper waveshare display to work with your Raspberry Pi Pico, but haven't had success yet. Here are some suggestions that may help:\n\nDouble check the wiring connections: It's important to make sure that all the wiring connections between the display and the Pico are correct. Make sure to consult the datasheets and schematics of both the display and the Pico to ensure that you're connecting the correct pins.\n\nCheck the power supply: Make sure that the display is receiving adequate power. E-paper displays require a high voltage to operate, and it's possible that the power supply you're using isn't providing enough voltage.\n\nTry a different library: If you're having trouble with the library you're currently using, try a different one. There are several libraries available for e-paper displays that work with the Raspberry Pi Pico, so try a few to see which one works best for your setup.\n\nVerify the code: Make sure that the code you're using is correct and that it's compatible with your display and Pico. Double-check the code and verify that it matches the wiring connections.\n\nTry a different display: If you're still having trouble, it's possible that the display itself is faulty. Try using a different display to see if that works with your Pico.\n\nI hope these suggestions help you get your e-paper display working with your Raspberry Pi Pico. Good luck!\n</code></pre> <p>I then installed MicroPython using my old documentation as a tutorial. I had already downloaded a ZIP file of this entire repo so I copied the <code>waveshare_epd</code> folder into the RP2040 disk drive that appears when I plug it in while holding the bootloader button.</p> <p>I installed MicroPython using my old documentation then followed ChatGPT's advice for writing a program in MicroPython using the Waveshare E-Paper library. I right-clicked a file and clicked <code>Upload to /</code> to move it into the Raspberry Pi Pico's harddrive.</p> <p></p> <p>I encountered many errors using ChatGPT and spent several hours going down a rabbit hole telling it everything that wasn't working. It told me that actually this wouldn't work with MircoPython and gave me the files and a workflow for how to install CircuitPython on a Raspberry Pi Pico. I held the bootloader button while plugging it in then dragged a UF2 file into the drive, causing the board to restart. Here is the full text of my conversation with ChatGPT, or just skip it and move on. The formatting may be slightly strange. In essence, there were so many hallucinations, and it was extremely unhelpful. I learned that I can be much more efficient if I just try to do it myself.</p>"},{"location":"stem/disability-forewarning-system/display-electronics/#different-approach","title":"Different Approach","text":"<p>I give up - too much hallucination.</p> <p>Luckily, I found this library that specifically deals with e-paper in MicroPython, but it doesn't go up to the <code>9.7\"</code> display, so for now I'll just focus on the <code>7.5\"</code> display.</p> <p>Board not showing up - Press Bootsel, reset button, releaes Bootsel, release reset button.</p> <p>When I selected <code>&lt; Try to detect port automatically &gt;</code> finally worked. Turns out it wasn't the 3V output plugged into the e-paper display.</p> <pre><code>from micropython import const\nfrom time import sleep_ms\nimport ustruct\n\n# Display resolution\nEPD_WIDTH  = const(640)\nEPD_HEIGHT = const(384)\n\n# Display commands\nPANEL_SETTING                  = const(0x00)\nPOWER_SETTING                  = const(0x01)\nPOWER_OFF                      = const(0x02)\n#POWER_OFF_SEQUENCE_SETTING     = const(0x03)\nPOWER_ON                       = const(0x04)\n#POWER_ON_MEASURE               = const(0x05)\nBOOSTER_SOFT_START             = const(0x06)\nDEEP_SLEEP                     = const(0x07)\nDATA_START_TRANSMISSION_1      = const(0x10)\n#DATA_STOP                      = const(0x11)\nDISPLAY_REFRESH                = const(0x12)\n#IMAGE_PROCESS                  = const(0x13)\n#LUT_FOR_VCOM                   = const(0x20)\n#LUT_BLUE                       = const(0x21)\n#LUT_WHITE                      = const(0x22)\n#LUT_GRAY_1                     = const(0x23)\n#LUT_GRAY_2                     = const(0x24)\n#LUT_RED_0                      = const(0x25)\n#LUT_RED_1                      = const(0x26)\n#LUT_RED_2                      = const(0x27)\n#LUT_RED_3                      = const(0x28)\n#LUT_XON                        = const(0x29)\nPLL_CONTROL                    = const(0x30)\n#TEMPERATURE_SENSOR_COMMAND     = const(0x40)\nTEMPERATURE_CALIBRATION        = const(0x41)\n#TEMPERATURE_SENSOR_WRITE       = const(0x42)\n#TEMPERATURE_SENSOR_READ        = const(0x43)\nVCOM_AND_DATA_INTERVAL_SETTING = const(0x50)\n#LOW_POWER_DETECTION            = const(0x51)\nTCON_SETTING                   = const(0x60)\nTCON_RESOLUTION                = const(0x61)\n#SPI_FLASH_CONTROL              = const(0x65)\n#REVISION                       = const(0x70)\n#GET_STATUS                     = const(0x71)\n#AUTO_MEASUREMENT_VCOM          = const(0x80)\n#READ_VCOM_VALUE                = const(0x81)\nVCM_DC_SETTING                 = const(0x82)\nFLASH_MODE                     = const(0xE5)\n\nBUSY = const(0)  # 0=busy, 1=idle\n\nclass EPD:\n    def __init__(self, spi, cs, dc, rst, busy):\n        self.spi = spi\n        self.cs = cs\n        self.dc = dc\n        self.rst = rst\n        self.busy = busy\n        self.cs.init(self.cs.OUT, value=1)\n        self.dc.init(self.dc.OUT, value=0)\n        self.rst.init(self.rst.OUT, value=0)\n        self.busy.init(self.busy.IN)\n        self.width = EPD_WIDTH\n        self.height = EPD_HEIGHT\n\n    def _command(self, command, data=None):\n        self.dc(0)\n        self.cs(0)\n        self.spi.write(bytearray([command]))\n        self.cs(1)\n        if data is not None:\n            self._data(data)\n\n    def _data(self, data):\n        self.dc(1)\n        self.cs(0)\n        self.spi.write(data)\n        self.cs(1)\n\n    def init(self):\n        self.reset()\n        self._command(POWER_SETTING, b'\\x37\\x00')\n        self._command(PANEL_SETTING, b'\\xCF\\x08')\n        self._command(BOOSTER_SOFT_START, b'\\xC7\\xCC\\x28')\n        self._command(POWER_ON)\n        self.wait_until_idle()\n        self._command(PLL_CONTROL, b'\\x3C')\n        self._command(TEMPERATURE_CALIBRATION, b'\\x00')\n        self._command(VCOM_AND_DATA_INTERVAL_SETTING, b'\\x77')\n        self._command(TCON_SETTING, b'\\x22')\n        self._command(TCON_RESOLUTION, ustruct.pack(\"&gt;HH\", EPD_WIDTH, EPD_HEIGHT))\n        self._command(VCM_DC_SETTING, b'\\x1E') # decide by LUT file\n        self._command(FLASH_MODE, b'\\x03')\n\n    def wait_until_idle(self):\n        while self.busy.value() == BUSY:\n            sleep_ms(100)\n\n    def reset(self):\n        self.rst(0)\n        sleep_ms(200)\n        self.rst(1)\n        sleep_ms(200)\n\n    # draw the current frame memory\n    def display_frame(self, frame_buffer):\n        self._command(DATA_START_TRANSMISSION_1)\n        for i in range(0, self.width * self.height // 8):\n            temp1 = frame_buffer[i]\n            j = 0\n            while (j &lt; 8):\n                if (temp1 &amp; 0x80):\n                    temp2 = 0x03\n                else:\n                    temp2 = 0x00\n                temp2 = (temp2 &lt;&lt; 4) &amp; 0xFF\n                temp1 = (temp1 &lt;&lt; 1) &amp; 0xFF\n                j += 1\n                if (temp1 &amp; 0x80):\n                    temp2 |= 0x03\n                else:\n                    temp2 |= 0x00\n                temp1 = (temp1 &lt;&lt; 1) &amp; 0xFF\n                self._data(bytearray([temp2]))\n                j += 1\n        self._command(DISPLAY_REFRESH)\n        sleep_ms(100)\n        self.wait_until_idle()\n\n    # to wake call reset() or init()\n    def sleep(self):\n        self._command(POWER_OFF)\n        self.wait_until_idle()\n        self._command(DEEP_SLEEP, b'\\xA5')\n\nimport framebuf\n\nepd = EPD(0, 17, 20, 21, 22)\n#self, spi, cs, dc, rst, busy\nepd.init()\nbuffer = bytearray(epd.width * epd.height // 8)\nfb = framebuf.FrameBuffer(buffer, epd.width, epd.height, framebuf.MONO_HLSB)\nfb.fill(0)\nepd.display_frame(buffer)\n\nfb.text(\"Hello, World!\", 0, 0, 1)\nepd.display_frame(buffer)\n</code></pre> <p>Didn't work because numbers in <code>EPD</code> constructor needed to be Pin and SPI objects.</p> <pre><code>from micropython import const\nfrom time import sleep_ms\nimport ustruct\n\n# Display resolution\nEPD_WIDTH  = const(640)\nEPD_HEIGHT = const(384)\n\n# Display commands\nPANEL_SETTING                  = const(0x00)\nPOWER_SETTING                  = const(0x01)\nPOWER_OFF                      = const(0x02)\n#POWER_OFF_SEQUENCE_SETTING     = const(0x03)\nPOWER_ON                       = const(0x04)\n#POWER_ON_MEASURE               = const(0x05)\nBOOSTER_SOFT_START             = const(0x06)\nDEEP_SLEEP                     = const(0x07)\nDATA_START_TRANSMISSION_1      = const(0x10)\n#DATA_STOP                      = const(0x11)\nDISPLAY_REFRESH                = const(0x12)\n#IMAGE_PROCESS                  = const(0x13)\n#LUT_FOR_VCOM                   = const(0x20)\n#LUT_BLUE                       = const(0x21)\n#LUT_WHITE                      = const(0x22)\n#LUT_GRAY_1                     = const(0x23)\n#LUT_GRAY_2                     = const(0x24)\n#LUT_RED_0                      = const(0x25)\n#LUT_RED_1                      = const(0x26)\n#LUT_RED_2                      = const(0x27)\n#LUT_RED_3                      = const(0x28)\n#LUT_XON                        = const(0x29)\nPLL_CONTROL                    = const(0x30)\n#TEMPERATURE_SENSOR_COMMAND     = const(0x40)\nTEMPERATURE_CALIBRATION        = const(0x41)\n#TEMPERATURE_SENSOR_WRITE       = const(0x42)\n#TEMPERATURE_SENSOR_READ        = const(0x43)\nVCOM_AND_DATA_INTERVAL_SETTING = const(0x50)\n#LOW_POWER_DETECTION            = const(0x51)\nTCON_SETTING                   = const(0x60)\nTCON_RESOLUTION                = const(0x61)\n#SPI_FLASH_CONTROL              = const(0x65)\n#REVISION                       = const(0x70)\n#GET_STATUS                     = const(0x71)\n#AUTO_MEASUREMENT_VCOM          = const(0x80)\n#READ_VCOM_VALUE                = const(0x81)\nVCM_DC_SETTING                 = const(0x82)\nFLASH_MODE                     = const(0xE5)\n\nBUSY = const(0)  # 0=busy, 1=idle\n\nclass EPD:\n    def __init__(self, spi, cs, dc, rst, busy):\n        self.spi = spi\n        self.cs = cs\n        self.dc = dc\n        self.rst = rst\n        self.busy = busy\n        self.cs.init(self.cs.OUT, value=1)\n        self.dc.init(self.dc.OUT, value=0)\n        self.rst.init(self.rst.OUT, value=0)\n        self.busy.init(self.busy.IN)\n        self.width = EPD_WIDTH\n        self.height = EPD_HEIGHT\n\n    def _command(self, command, data=None):\n        self.dc(0)\n        self.cs(0)\n        self.spi.write(bytearray([command]))\n        self.cs(1)\n        if data is not None:\n            self._data(data)\n\n    def _data(self, data):\n        self.dc(1)\n        self.cs(0)\n        self.spi.write(data)\n        self.cs(1)\n\n    def init(self):\n        self.reset()\n        self._command(POWER_SETTING, b'\\x37\\x00')\n        self._command(PANEL_SETTING, b'\\xCF\\x08')\n        self._command(BOOSTER_SOFT_START, b'\\xC7\\xCC\\x28')\n        self._command(POWER_ON)\n        self.wait_until_idle()\n        self._command(PLL_CONTROL, b'\\x3C')\n        self._command(TEMPERATURE_CALIBRATION, b'\\x00')\n        self._command(VCOM_AND_DATA_INTERVAL_SETTING, b'\\x77')\n        self._command(TCON_SETTING, b'\\x22')\n        self._command(TCON_RESOLUTION, ustruct.pack(\"&gt;HH\", EPD_WIDTH, EPD_HEIGHT))\n        self._command(VCM_DC_SETTING, b'\\x1E') # decide by LUT file\n        self._command(FLASH_MODE, b'\\x03')\n\n    def wait_until_idle(self):\n        while self.busy.value() == BUSY:\n            sleep_ms(100)\n\n    def reset(self):\n        self.rst(0)\n        sleep_ms(200)\n        self.rst(1)\n        sleep_ms(200)\n\n    # draw the current frame memory\n    def display_frame(self, frame_buffer):\n        self._command(DATA_START_TRANSMISSION_1)\n        for i in range(0, self.width * self.height // 8):\n            temp1 = frame_buffer[i]\n            j = 0\n            while (j &lt; 8):\n                if (temp1 &amp; 0x80):\n                    temp2 = 0x03\n                else:\n                    temp2 = 0x00\n                temp2 = (temp2 &lt;&lt; 4) &amp; 0xFF\n                temp1 = (temp1 &lt;&lt; 1) &amp; 0xFF\n                j += 1\n                if (temp1 &amp; 0x80):\n                    temp2 |= 0x03\n                else:\n                    temp2 |= 0x00\n                temp1 = (temp1 &lt;&lt; 1) &amp; 0xFF\n                self._data(bytearray([temp2]))\n                j += 1\n        self._command(DISPLAY_REFRESH)\n        sleep_ms(100)\n        self.wait_until_idle()\n\n    # to wake call reset() or init()\n    def sleep(self):\n        self._command(POWER_OFF)\n        self.wait_until_idle()\n        self._command(DEEP_SLEEP, b'\\xA5')\n\nfrom machine import Pin, SPI\nimport framebuf\n\nspi = SPI(0, sck=Pin(18), mosi=Pin(19), miso=Pin(16), baudrate=2000000)\ncs = Pin(17, Pin.OUT)\ndc = Pin(20, Pin.OUT)\nrst = Pin(21, Pin.OUT)\nbusy = Pin(22, Pin.IN)\n\nepd = EPD(spi, cs, dc, rst, busy)\n#self, spi, cs, dc, rst, busy\nepd.init()\nbuffer = bytearray(epd.width * epd.height // 8)\nfb = framebuf.FrameBuffer(buffer, epd.width, epd.height, framebuf.MONO_HLSB)\nfb.fill(0)\nepd.display_frame(buffer)\n\nfb.text(\"Hello, World!\", 0, 0, 1)\nepd.display_frame(buffer)\n</code></pre> <p>This didn't work:</p> <pre><code>from micropython import const\nfrom time import sleep_ms\nimport ustruct\n\n# Display resolution\nEPD_WIDTH  = const(640)\nEPD_HEIGHT = const(384)\n\n# Display commands\nPANEL_SETTING                  = const(0x00)\nPOWER_SETTING                  = const(0x01)\nPOWER_OFF                      = const(0x02)\n#POWER_OFF_SEQUENCE_SETTING     = const(0x03)\nPOWER_ON                       = const(0x04)\n#POWER_ON_MEASURE               = const(0x05)\nBOOSTER_SOFT_START             = const(0x06)\nDEEP_SLEEP                     = const(0x07)\nDATA_START_TRANSMISSION_1      = const(0x10)\n#DATA_STOP                      = const(0x11)\nDISPLAY_REFRESH                = const(0x12)\n#IMAGE_PROCESS                  = const(0x13)\n#LUT_FOR_VCOM                   = const(0x20)\n#LUT_BLUE                       = const(0x21)\n#LUT_WHITE                      = const(0x22)\n#LUT_GRAY_1                     = const(0x23)\n#LUT_GRAY_2                     = const(0x24)\n#LUT_RED_0                      = const(0x25)\n#LUT_RED_1                      = const(0x26)\n#LUT_RED_2                      = const(0x27)\n#LUT_RED_3                      = const(0x28)\n#LUT_XON                        = const(0x29)\nPLL_CONTROL                    = const(0x30)\n#TEMPERATURE_SENSOR_COMMAND     = const(0x40)\nTEMPERATURE_CALIBRATION        = const(0x41)\n#TEMPERATURE_SENSOR_WRITE       = const(0x42)\n#TEMPERATURE_SENSOR_READ        = const(0x43)\nVCOM_AND_DATA_INTERVAL_SETTING = const(0x50)\n#LOW_POWER_DETECTION            = const(0x51)\nTCON_SETTING                   = const(0x60)\nTCON_RESOLUTION                = const(0x61)\n#SPI_FLASH_CONTROL              = const(0x65)\n#REVISION                       = const(0x70)\n#GET_STATUS                     = const(0x71)\n#AUTO_MEASUREMENT_VCOM          = const(0x80)\n#READ_VCOM_VALUE                = const(0x81)\nVCM_DC_SETTING                 = const(0x82)\nFLASH_MODE                     = const(0xE5)\n\nBUSY = const(0)  # 0=busy, 1=idle\n\nclass EPD:\n    def __init__(self, spi, cs, dc, rst, busy):\n        self.spi = spi\n        self.cs = cs\n        self.dc = dc\n        self.rst = rst\n        self.busy = busy\n        self.cs.init(self.cs.OUT, value=1)\n        self.dc.init(self.dc.OUT, value=0)\n        self.rst.init(self.rst.OUT, value=0)\n        self.busy.init(self.busy.IN)\n        self.width = EPD_WIDTH\n        self.height = EPD_HEIGHT\n\n    def _command(self, command, data=None):\n        self.dc(0)\n        self.cs(0)\n        self.spi.write(bytearray([command]))\n        self.cs(1)\n        if data is not None:\n            self._data(data)\n\n    def _data(self, data):\n        self.dc(1)\n        self.cs(0)\n        self.spi.write(data)\n        self.cs(1)\n\n    def init(self):\n        print(\"started restart\")\n        self.reset()\n        print(\"finished restarting\")\n        self._command(POWER_SETTING, b'\\x37\\x00')\n        self._command(PANEL_SETTING, b'\\xCF\\x08')\n        self._command(BOOSTER_SOFT_START, b'\\xC7\\xCC\\x28')\n        self._command(POWER_ON)\n        print(\"waiting until idle\")\n        self.wait_until_idle()\n        self._command(PLL_CONTROL, b'\\x3C')\n        self._command(TEMPERATURE_CALIBRATION, b'\\x00')\n        self._command(VCOM_AND_DATA_INTERVAL_SETTING, b'\\x77')\n        self._command(TCON_SETTING, b'\\x22')\n        self._command(TCON_RESOLUTION, ustruct.pack(\"&gt;HH\", EPD_WIDTH, EPD_HEIGHT))\n        self._command(VCM_DC_SETTING, b'\\x1E') # decide by LUT file\n        self._command(FLASH_MODE, b'\\x03')\n\n    def wait_until_idle(self):\n        while self.busy.value() == BUSY:\n            sleep_ms(100)\n\n    def reset(self):\n        self.rst(0)\n        sleep_ms(200)\n        self.rst(1)\n        sleep_ms(200)\n\n    # draw the current frame memory\n    def display_frame(self, frame_buffer):\n        self._command(DATA_START_TRANSMISSION_1)\n        for i in range(0, self.width * self.height // 8):\n            temp1 = frame_buffer[i]\n            j = 0\n            while (j &lt; 8):\n                if (temp1 &amp; 0x80):\n                    temp2 = 0x03\n                else:\n                    temp2 = 0x00\n                temp2 = (temp2 &lt;&lt; 4) &amp; 0xFF\n                temp1 = (temp1 &lt;&lt; 1) &amp; 0xFF\n                j += 1\n                if (temp1 &amp; 0x80):\n                    temp2 |= 0x03\n                else:\n                    temp2 |= 0x00\n                temp1 = (temp1 &lt;&lt; 1) &amp; 0xFF\n                self._data(bytearray([temp2]))\n                j += 1\n        self._command(DISPLAY_REFRESH)\n        sleep_ms(100)\n        self.wait_until_idle()\n\n    # to wake call reset() or init()\n    def sleep(self):\n        self._command(POWER_OFF)\n        self.wait_until_idle()\n        self._command(DEEP_SLEEP, b'\\xA5')\n\nfrom machine import Pin, SPI\nimport framebuf\n\nprint(\"creating objs\")\nspi = SPI(0, sck=Pin(18), mosi=Pin(19), miso=Pin(16), baudrate=2000000)\ncs = Pin(17, Pin.OUT)\ndc = Pin(20, Pin.OUT)\nrst = Pin(21, Pin.OUT)\nbusy = Pin(22, Pin.IN)\n\nprint(\"initializing\")\nepd = EPD(spi, cs, dc, rst, busy)\n#self, spi, cs, dc, rst, busy\nprint(\"epd instance created\")\nepd.init()\nprint(\"initialized\")\nbuffer = bytearray(epd.width * epd.height // 8)\nfb = framebuf.FrameBuffer(buffer, epd.width, epd.height, framebuf.MONO_HLSB)\nfb.fill(0)\nepd.display_frame(buffer)\n\nprint(\"ready to hello, world!\")\nfb.text(\"Hello, World!\", 0, 0, 1)\nepd.display_frame(buffer)\n</code></pre> <p>I thought I maybe had the wrong type of board. I also tried the <code>4.2\"</code> e-paper display using the example code and fixing the wiring, and nothing happened. Partway through I noticed that the screen had become red and there were some gray specks, but I couldn't get anything to be controlled. I realized that I had all of the ribbon cables upside down, but they still didn't work when I corrected them. I even tried a different Pico and asked ChatGPT about the wiring, but it was all failing.</p>"},{"location":"stem/disability-forewarning-system/display-electronics/#milling-the-board","title":"Milling The Board","text":""},{"location":"stem/disability-forewarning-system/display-electronics/#moving-on","title":"Moving On","text":"<p>I decided to move on from the e-paper display for right now to focus on the servo and come back to the display later. I realized that the footprint for the <code>SLIDE-SWITCH</code> component in the <code>fab</code> library had the same SMD pads as I needed for three headers pins.</p> <p></p> <p>When routing I realized that there were holes in the slide-switch footprint but I simply designed my routes around them and will simply not mill them when I cut out my board.</p> <p></p> <p></p> <p>I was going to mill this board on the <code>Genmitsu 3020-Pro Max</code> milling machine, so I went to the <code>Manufacturing</code> workspace and created a new <code>Setup</code>. I selected a boxpoint on the top of the stock to where the x and y axes were hugging the stock. I selected all the traces and the top face of the board to be the <code>Model</code>, changed the <code>Stock Top Offset</code> to <code>0mm</code>.</p> <p>I went back and made the traces larger in the layout then made sure to deselect <code>Solder Masks</code> after I pressed <code>Push to 3D PCB</code>.</p> <p>I then created a <code>2D Contour</code>. When I selected the tool, I went to <code>Milling Tools (Metric)</code> and copied the smallest <code>Flat Endmill</code> I could find (<code>3mm Flat Endmill</code>). I then copied and pasted it into my <code>Local &gt; Library</code> tools and right-clicked it and selected <code>Edit tool</code>. I changed the <code>Description</code> to <code>0.8mm Flat Endmill</code>, <code>Diameter</code> to <code>0.8mm</code> in the <code>Cutter</code> menu, <code>Spindle speed</code> to <code>12000 rpm</code> in the <code>Cutting data</code> menu, <code>Cutting feedrate</code> to <code>100 mm/min</code> in the same menu, and <code>Plunge feedrate</code> to <code>100 mm/min</code> in the same menu.I then pressed the blue <code>Accept</code> button. I selected the new tool and set the <code>Coolant</code> setting to <code>Disabled</code>. Then for the <code>Contour Selection</code> I pressed the <code>Chain</code> icon and selected one of the traces. I repeated this for the top outline of every trace I wanted milled, which took a fairly large amount of time.</p> <p></p> <p>Next, under <code>Top Height</code> I set <code>Offset</code> to <code>0mm</code>. I checked the <code>Multiple Depths</code> option (scroll down under the <code>Passes</code> menu) and set <code>Maximum Roughing Stepdown</code> to <code>0.4mm</code>. I then pressed <code>OK</code> and activated the <code>2D Contour</code> tool again. I selected the bottom outline of the board and used all the same other settings as the previous contour.</p> <p>As I zoomed in I noticed that there were no blue lines around the second and third pads of the slide-switch component so I had to go back to the layout editor, decrease the DRC rules for minimum distance between a pad and a wire, then move the middle route in between the two switch holes. I also made all of the traces thicker. I then <code>Pushed to 3D PCB</code> again and made sure to uncheck <code>Solder Mask</code>. I got errors under the <code>2D Contour</code>, so to recalculate I </p> <p>Finally I right-clicked the previously-created <code>Setup</code> in the hierarchy and pressed <code>Post Process</code>. I made sure <code>Post</code> was set to <code>Grbl / grbl</code> and pressed <code>Post</code>. </p> <p>The milling process was very smooth! I moved the z-axis high and zeroed it, then pressed <code>Send</code> to do an air cut. Everything looked OK so I moved the z-axis down until a piece of paper couldn't move in between the copper and the mill then zeroes the z-axis and moved the bit higher. I moved the x and y axes to the bottom left corner of the copper and zeroed them, as well. Then I pressed <code>Reset</code> and <code>Send</code>, and it worked! I occasionally vaccumed throughout the milling process.</p> <p>Here's the result after rinsing in water!</p> <p></p> <p>The soldering process was very smooth.</p> <p></p> <p></p> <p></p> <p>Unfortunately I realized that the order of the wires didn't match up with the servo so connecting it directly like this wouldn't work - I'll correct this in the next iteration of the design. For now I'll connect the servo like this.</p> <p></p> <p>The next day when I took the board out of my bag to test I noticed the traces ripped! These were thinner than other traces I'd milled so that might be why.</p> <p></p> <p>I tried resoldering with a lot of solder to reach what was left of the traces, but this failed.</p> <p></p> <p>I then tried to desolder mistakes and failed again - I needed to make a new board.</p> <p></p>"},{"location":"stem/disability-forewarning-system/display-electronics/#redesigning-again","title":"Redesigning Again","text":"<p>Just to be sure everything will work OK I made the traces' width <code>50mil</code>.</p> <p></p> <p>I milled the board, deburred it, washed it in soap and water, soldered it (very few connections to the pico so I could always unsolder if needed), and connected it to a servo motor. The only learning I had was that when I install a new tool I have to select the new tool button in the Bantam software then re-zero it. Also, I'd originally tried to only solder the corners and test the conections, but even though the other legs were touching, they weren't connected, so I soldered all of the legs that were connected to pin headers.</p> <p></p> <p></p> <p></p> <p></p> <p>I tried plugging the board into my computer and nothing happened! I became very worried that I wasted another Pico, but tried a different chord, and it worked! I installed MicroPython using Thonny then ran the code from this website to operate a servo motor (I modified it to use <code>GPIO 21</code>). I copied and pasted both files into Thonny then saved them in the base directory of the Pico.</p> <p>servo.py</p> <pre><code>from machine import Pin, PWM\n\n\nclass Servo:\n    \"\"\" A simple class for controlling a 9g servo with the Raspberry Pi Pico.\n\n    Attributes:\n\n        minVal: An integer denoting the minimum duty value for the servo motor.\n\n        maxVal: An integer denoting the maximum duty value for the servo motor.\n\n    \"\"\"\n\n    def __init__(self, pin: int or Pin or PWM, minVal=2500, maxVal=7500):\n        \"\"\" Creates a new Servo Object.\n\n        args:\n\n            pin (int or machine.Pin or machine.PWM): Either an integer denoting the number of the GPIO pin or an already constructed Pin or PWM object that is connected to the servo.\n\n            minVal (int): Optional, denotes the minimum duty value to be used for this servo.\n\n            maxVal (int): Optional, denotes the maximum duty value to be used for this servo.\n\n        \"\"\"\n\n        if isinstance(pin, int):\n            pin = Pin(pin, Pin.OUT)\n        if isinstance(pin, Pin):\n            self.__pwm = PWM(pin)\n        if isinstance(pin, PWM):\n            self.__pwm = pin\n        self.__pwm.freq(50)\n        self.minVal = minVal\n        self.maxVal = maxVal\n\n    def deinit(self):\n        \"\"\" Deinitializes the underlying PWM object.\n\n        \"\"\"\n        self.__pwm.deinit()\n\n    def goto(self, value: int):\n        \"\"\" Moves the servo to the specified position.\n\n        args:\n\n            value (int): The position to move to, represented by a value from 0 to 1024 (inclusive).\n\n        \"\"\"\n        if value &lt; 0:\n            value = 0\n        if value &gt; 1024:\n            value = 1024\n        delta = self.maxVal-self.minVal\n        target = int(self.minVal + ((value / 1024) * delta))\n        self.__pwm.duty_u16(target)\n\n    def middle(self):\n        \"\"\" Moves the servo to the middle.\n        \"\"\"\n        self.goto(512)\n\n    def free(self):\n        \"\"\" Allows the servo to be moved freely.\n        \"\"\"\n        self.__pwm.duty_u16(0)\n</code></pre> <p>main.py</p> <pre><code>import utime\nfrom servo import Servo\n\ns1 = Servo(21)       # Servo pin is connected to GP21\n\ndef servo_Map(x, in_min, in_max, out_min, out_max):\n    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min\n\ndef servo_Angle(angle):\n    if angle &lt; 0:\n        angle = 0\n    if angle &gt; 180:\n        angle = 180\n    s1.goto(round(servo_Map(angle,0,180,0,1024))) # Convert range value to angle value\n\nif __name__ == '__main__':\n    while True:\n        print(\"Turn left ...\")\n        for i in range(0,180,10):\n            servo_Angle(i)\n            utime.sleep(0.05)\n        print(\"Turn right ...\")\n        for i in range(180,0,-10):\n            servo_Angle(i)\n            utime.sleep(0.05)\n</code></pre> <p>It worked! However, the servo movement was very jittery. To make sure this was a software problem and not a hardware problem, I modified <code>main.py</code>, and this reduced the jitteriness!</p> <pre><code>import utime\nfrom servo import Servo\n\ns1 = Servo(21)       # Servo pin is connected to GP21\n\ndef servo_Map(x, in_min, in_max, out_min, out_max):\n    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min\n\ndef servo_Angle(angle):\n    if angle &lt; 0:\n        angle = 0\n    if angle &gt; 180:\n        angle = 180\n    s1.goto(round(servo_Map(angle,0,180,0,1024))) # Convert range value to angle value\n\nif __name__ == '__main__':\n    while True:\n        print(\"Turn left ...\")\n        for i in range(0,180,1):\n            servo_Angle(i)\n            utime.sleep(0.001)\n        print(\"Turn right ...\")\n        for i in range(180,0,-10):\n            servo_Angle(i)\n            utime.sleep(0.001)\n</code></pre> <p>I tried making it even more smooth, but the servo wouldn't turn <code>180 deg</code>, which I suspect is because <code>0.001sec</code> is too short of a time for the servo to turn.</p> <p>I modified the code to the following to test a functionality more similar to what I'll actually use.</p> <pre><code>import utime\nfrom servo import Servo\n\ns1 = Servo(21)       # Servo pin is connected to GP21\n\ndef servo_Map(x, in_min, in_max, out_min, out_max):\n    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min\n\ndef servo_Angle(angle):\n    if angle &lt; 0:\n        angle = 0\n    if angle &gt; 180:\n        angle = 180\n    s1.goto(round(servo_Map(angle,0,180,0,1024))) # Convert range value to angle value\n\nif __name__ == '__main__':\n    while True:\n        try:\n            servo_Angle(float(input(\"&gt;&gt; Angle? \")))\n        except:\n            print(\"Error: NaN\")\n</code></pre> <p>This was a critical mistake! The program worked very well, and it moved up until <code>180 deg</code> and wouldn't go below <code>0 deg</code>, but I couldn't exit the program! Even when I tried to soft reboot in Thonny my program simply rejected the message since it wasn't a float. I tried re-entering bootloader mode and reinstalling MicroPython but the program simply started up again. Next I had an idea that if I installed a different version of MicroPython that wasn't compatible with the board it wouldn't know how to run my program, so I installed the Pico WH version of MicroPython and the program stopped! I then reinstalled the correct one and the problem was solved!</p>"},{"location":"stem/disability-forewarning-system/display-electronics/#redesigning-the-driver-side-board","title":"Redesigning The Driver-Side Board","text":"<p>I want to redesign my board from Week 8 to where I can use one of the pins with a built in pulldown resistor, D4. I'll come back to this if I have time this week and if not in the future.</p>"},{"location":"stem/disability-forewarning-system/display-electronics/#a-new-display","title":"A New Display","text":"<p>I accidentally ripped the ribbon cable when opening the box - I learned I should always unplug the HAT Driver from the ribbon cable when I put the display away! I ordered a new one.</p> <p></p>"},{"location":"stem/disability-forewarning-system/display-electronics/#37-display","title":"3.7\" Display","text":""},{"location":"stem/disability-forewarning-system/display-electronics/#code","title":"Code","text":"<p>Pico_ePaper.py</p> <pre><code># +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n#\n# LUTs have been copied from original example for Waveshare Pico e-Paper 3.7,\n# which can be found here:\n# https://github.com/waveshare/Pico_ePaper_Code/blob/main/python/Pico-ePaper-3.7.py\n#\n# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n\nEPD_3IN7_lut_4Gray_GC = bytes([\n    0x2A, 0x06, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 1\n    0x28, 0x06, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 2\n    0x20, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 3\n    0x14, 0x06, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 4\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 5\n    0x00, 0x02, 0x02, 0x0A, 0x00, 0x00, 0x00, 0x08, 0x08, 0x02,  # 6\n    0x00, 0x02, 0x02, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 7\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 8\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 9\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 10\n    0x22, 0x22, 0x22, 0x22, 0x22\n])\n\nEPD_3IN7_lut_1Gray_GC = bytes([\n    0x2A, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 1\n    0x05, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 2\n    0x2A, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 3\n    0x05, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 4\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 5\n    0x00, 0x02, 0x03, 0x0A, 0x00, 0x02, 0x06, 0x0A, 0x05, 0x00,  # 6\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 7\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 8\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 9\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 10\n    0x22, 0x22, 0x22, 0x22, 0x22\n])\n\nEPD_3IN7_lut_1Gray_DU = bytes([\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 1\n    0x01, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x0A, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 3\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 5\n    0x00, 0x00, 0x05, 0x05, 0x00, 0x05, 0x03, 0x05, 0x05, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 7\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 9\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x22, 0x22, 0x22, 0x22, 0x22\n])\n\nEPD_3IN7_lut_1Gray_A2 = bytes([\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 1\n    0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 2\n    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 3\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 4\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 5\n    0x00, 0x00, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 6\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 7\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 8\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 9\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 10\n    0x22, 0x22, 0x22, 0x22, 0x22\n])\n# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nfrom machine import Pin\nimport framebuf\nfrom utime import ticks_ms, ticks_diff, sleep_ms\nfrom ustruct import pack\nimport gc\nimport micropython\n\n\ndef profile(func):\n    def wrapper(*args, **kwargs):\n        gc.collect()\n        start_mem = gc.mem_free()\n        start_t = ticks_ms()\n        func(*args, **kwargs)\n        fin_t = ticks_ms()\n        fin_mem = gc.mem_free()\n        print(f'{func.__name__} took: {ticks_diff(fin_t, start_t)} ms to finish')\n        print(f'{func.__name__} used around {start_mem - fin_mem} B of memory')\n\n    return wrapper\n\n\nclass EinkBase:\n    black = 0b00\n    white = 0b11\n    darkgray = 0b01\n    lightgray = 0b10\n\n    RAM_BW = 0b01\n    RAM_RED = 0b10\n    RAM_RBW = 0b11\n\n    def __init__(self, rotation=0, cs_pin=None, dc_pin=None, reset_pin=None, busy_pin=None):\n        if rotation == 0 or rotation == 180:\n            self.width = 280\n            self.height = 480\n            buf_format = framebuf.MONO_HLSB\n            self._horizontal = False\n        elif rotation == 90 or rotation == 270:\n            self.width = 480\n            self.height = 280\n            buf_format = framebuf.MONO_VLSB\n            self._horizontal = True\n        else:\n            raise ValueError(\n                f\"Incorrect rotation selected ({rotation}). Valid values: 0, 90, 180 and 270.\")\n\n        self._rotation = rotation\n\n        if reset_pin is None:\n            self._rst = Pin(12, Pin.OUT, value=0)\n        else:\n            self._rst = reset_pin\n            self._rst.init(Pin.OUT, value=0)\n\n        if dc_pin is None:\n            self._dc = Pin(8, Pin.OUT, value=0)\n        else:\n            self._dc = dc_pin\n            self._dc.init(Pin.OUT, value=0)\n\n        if cs_pin is None:\n            self._cs = Pin(9, Pin.OUT, value=1)\n        else:\n            self._cs = cs_pin\n            self._cs.init(Pin.OUT, value=1)\n\n        if busy_pin is None:\n            self._busy = Pin(13, Pin.IN, Pin.PULL_UP)\n        else:\n            self._busy = busy_pin\n            self._busy.init(Pin.IN)\n\n        self._luts = {0: EPD_3IN7_lut_4Gray_GC,\n                      1: EPD_3IN7_lut_1Gray_GC,\n                      2: EPD_3IN7_lut_1Gray_DU,\n                      3: EPD_3IN7_lut_1Gray_A2}\n\n        self._buffer_bw = bytearray(self.width * self.height // 8)\n        self._buffer_red = bytearray(self.width * self.height // 8)\n        self._bw = framebuf.FrameBuffer(self._buffer_bw, self.width, self.height, buf_format)\n        self._red = framebuf.FrameBuffer(self._buffer_red, self.width, self.height, buf_format)\n\n        self.fill()\n\n        self._init_disp()\n        sleep_ms(500)\n\n    def _reset(self):\n        self._rst(1)\n        sleep_ms(30)\n        self._rst(0)\n        sleep_ms(3)\n        self._rst(1)\n        sleep_ms(30)\n\n    def _send_command(self, command):\n        raise NotImplementedError\n\n    def _send_data(self, data):\n        raise NotImplementedError\n\n    def _send(self, command, data):\n        self._send_command(command)\n        self._send_data(data)\n\n    def _read_busy(self):\n        while self._busy.value() == 1:\n            sleep_ms(10)\n        sleep_ms(200)\n\n    def _load_LUT(self, lut=0):\n        self._send(0x32, self._luts[lut])\n\n    def _set_cursor(self, x, y):\n        self._send(0x4e, pack(\"h\", x))\n        self._send(0x4f, pack(\"h\", y))\n\n    def _set_window(self, start_x, end_x, start_y, end_y):\n        self._send(0x44, pack(\"2h\", start_x, end_x))\n        self._send(0x45, pack(\"2h\", start_y, end_y))\n\n    def _clear_ram(self, bw=True, red=True):\n        if red:\n            self._send(0x46, 0xf7)\n            self._read_busy()\n        if bw:\n            self._send(0x47, 0xf7)\n            self._read_busy()\n\n    def _init_disp(self):\n        # HW reset.\n        self._reset()\n\n        # SW reset.\n        self._send_command(0x12)\n        sleep_ms(300)\n\n        # Clear BW and RED RAMs.\n        self._clear_ram()\n\n        # Set gate number.\n        self._send(0x01, pack(\"hB\", 479, 0))\n\n        # Set gate voltage.\n        self._send(0x03, 0x00)\n\n        # Set source voltage.\n        self._send(0x04, pack(\"3B\", 0x41, 0xa8, 0x32))\n\n        # Set Data Entry mode.\n        if self._rotation == 0:\n            seq = 0x03\n        elif self._rotation == 180:\n            seq = 0x00\n        elif self._rotation == 90:\n            seq = 0x06\n        elif self._rotation == 270:\n            seq = 0x05\n        else:\n            raise ValueError(f\"Incorrect rotation selected\")\n\n        self._send(0x11, seq)\n\n        # Set border.\n        self._send(0x3c, 0x03)\n\n        # Booster Soft-start Control.\n        self._send(0x0c, pack(\"5B\", 0xae, 0xc7, 0xc3, 0xc0, 0xc0))\n\n        # Internal sensor on.\n        self._send(0x18, 0x80)\n\n        # Set VCOM.\n        self._send(0x2c, 0x44)\n\n        # Set window.\n        if self._rotation == 0:\n            self._set_window(0, self.width - 1, 0, self.height - 1)\n        elif self._rotation == 180:\n            self._set_window(self.width - 1, 0, self.height - 1, 0)\n        elif self._rotation == 90:\n            self._set_window(self.height - 1, 0, 0, self.width - 1)\n        elif self._rotation == 270:\n            self._set_window(0, self.height - 1, self.width - 1, 0)\n        else:\n            raise ValueError(f\"Incorrect rotation selected\")\n\n        # Set Display Update Control 2\n        self._send(0x22, 0xcf)\n\n    # --------------------------------------------------------\n    # Public methods.\n    # --------------------------------------------------------\n\n    def show(self, lut=0):\n        if self._rotation == 0:\n            self._set_cursor(0, 0)\n        elif self._rotation == 180:\n            self._set_cursor(self.width - 1, self.height - 1)\n        elif self._rotation == 90:\n            self._set_cursor(self.height - 1, 0)\n        else:\n            self._set_cursor(0, self.width - 1)\n\n    def sleep(self):\n        self._send(0x10, 0x03)\n\n    # --------------------------------------------------------\n    # Drawing routines (wrappers for FrameBuffer methods).\n    # --------------------------------------------------------\n\n    def fill(self, c=white):\n        self._bw.fill(c &amp; 1)\n        self._red.fill(c &gt;&gt; 1)\n\n    def pixel(self, x, y, c=black):\n        self._bw.pixel(x, y, c &amp; 1)\n        self._red.pixel(x, y, c &gt;&gt; 1)\n\n    def hline(self, x, y, w, c=black):\n        self._bw.hline(x, y, w, c &amp; 1)\n        self._red.hline(x, y, w, c &gt;&gt; 1)\n\n    def vline(self, x, y, h, c=black):\n        self._bw.vline(x, y, h, c &amp; 1)\n        self._red.vline(x, y, h, c &gt;&gt; 1)\n\n    def line(self, x1, y1, x2, y2, c=black):\n        self._bw.line(x1, y1, x2, y2, c &amp; 1)\n        self._red.line(x1, y1, x2, y2, c &gt;&gt; 1)\n\n    def rect(self, x, y, w, h, c=black):\n        self._bw.rect(x, y, w, h, c &amp; 1)\n        self._red.rect(x, y, w, h, c &gt;&gt; 1)\n\n    def fill_rect(self, x, y, w, h, c=black):\n        self._bw.fill_rect(x, y, w, h, c &amp; 1)\n        self._red.fill_rect(x, y, w, h, c &gt;&gt; 1)\n\n    def text(self, text, x, y, c=black):\n        self._bw.text(text, x, y, c &amp; 1)\n        self._red.text(text, x, y, c &gt;&gt; 1)\n\n    def blit(self, fbuf, x, y, key=-1, palette=None, ram=RAM_RBW):\n        if ram &amp; 1 == 1:\n            self._bw.blit(fbuf, x, y, key, palette)\n        if (ram &gt;&gt; 1) &amp; 1 == 1:\n            self._red.blit(fbuf, x, y, key, palette)\n\n\nclass Eink(EinkBase):\n    from machine import SPI\n\n    def __init__(self, spi=None, *args, **kwargs):\n        if spi is None:\n            self._spi = self.SPI(1, baudrate=20_000_000)\n        else:\n            self._spi = spi\n        super(Eink, self).__init__(*args, **kwargs)\n\n    def _send_command(self, command):\n        self._dc(0)\n        self._cs(0)\n        if isinstance(command, int):\n            self._spi.write(bytes([command]))\n        elif isinstance(command, (bytes, bytearray)):\n            self._spi.write(command)\n        else:\n            raise ValueError  # For now\n        self._cs(1)\n\n    def _send_data(self, data):\n        self._dc(1)\n        self._cs(0)\n        if isinstance(data, int):\n            self._spi.write(bytes([data]))\n        elif isinstance(data, (bytes, bytearray)):\n            self._spi.write(data)\n        else:\n            raise ValueError  # For now\n        self._cs(1)\n\n    @micropython.viper\n    def _reverse_bits(self, num: int) -&gt; int:\n        result = 0\n        for i in range(8):\n            result = (result &lt;&lt; 1) | ((num &gt;&gt; i) &amp; 1)\n        return result\n\n    # --------------------------------------------------------\n    # Public methods.\n    # --------------------------------------------------------\n\n    @profile\n    def show(self, lut=0):\n        super().show()\n        # Load BW buffer to BW RAM and RED buffer to RED RAM.\n        if not self._horizontal:\n            self._send(0x24, self._buffer_bw)\n            self._send(0x26, self._buffer_red)\n        else:\n            self._send(0x24, bytes(map(self._reverse_bits, self._buffer_bw)))\n            self._send(0x26, bytes(map(self._reverse_bits, self._buffer_red)))\n\n        self._load_LUT(lut)\n        self._send_command(0x20)\n        self._read_busy()\n\n\nclass EinkPIO(EinkBase):\n    from machine import mem32\n\n    def __init__(self, sm_num=0, dma=5, *args, **kwargs):\n        self._sm_num = sm_num\n        self._dma = int(dma * 0x40 + 0x50000030)\n        self._sm = None\n        self._sm_shiftctrl = (0x502000d0 + 0x100000 * (self._sm_num // 4)\n                              + 0x18 * (self._sm_num % 4))\n        self._dma_write_addr = (0x50200010 + 0x100000 * (self._sm_num // 4)\n                                + 0x4 * (self._sm_num % 4))\n        dreq = self._sm_num % 4 + 8 * (self._sm_num // 4)\n        self._dma_ctrl = dreq &lt;&lt; 15 | 1 &lt;&lt; 4 | 1\n        self._pio_setup()\n        super(EinkPIO, self).__init__(*args, **kwargs)\n\n    def _pio_setup(self):\n        from rp2 import asm_pio, PIO, StateMachine\n\n        @asm_pio(out_init=PIO.OUT_LOW,\n                 sideset_init=PIO.OUT_LOW,\n                 autopull=True,\n                 pull_thresh=8,\n                 out_shiftdir=PIO.SHIFT_LEFT)\n        def pio_serial_tx():\n            out(pins, 1).side(0)\n            nop().side(1)\n\n        self._sm = StateMachine(self._sm_num, pio_serial_tx, freq=40_000_000,\n                                sideset_base=Pin(10), out_base=Pin(11))\n        self._sm.active(1)\n\n    def _reversed_output(self):\n        self.mem32[self._sm_shiftctrl + 0x2000] = 1 &lt;&lt; 19\n\n    def _normal_output(self):\n        self.mem32[self._sm_shiftctrl + 0x3000] = 1 &lt;&lt; 19\n\n    def _send_command(self, command):\n        self._dc(0)\n        self._cs(0)\n        if isinstance(command, int):\n            self._sm.put(command, 24)\n        elif isinstance(command, (bytes, bytearray)):\n            for cmd in command:\n                self._sm.put(cmd, 24)\n        else:\n            raise ValueError\n        self._cs(1)\n\n    def _send_data(self, data):\n        self._dc(1)\n        self._cs(0)\n        if isinstance(data, int):\n            self._sm.put(data, 24)\n        elif isinstance(data, (bytes, bytearray)):\n            for cmd in data:\n                self._sm.put(cmd, 24)\n        else:\n            raise ValueError\n        self._cs(1)\n\n    @micropython.viper\n    def _dma_start(self, buffer):\n        dma_ptr = ptr32(self._dma)\n        dma_ptr[0] = int(self._dma_ctrl)\n        dma_ptr[1] = int(self._dma_write_addr)\n        dma_ptr[2] = int(len(buffer))\n        dma_ptr[3] = int(ptr32(buffer))\n\n    @micropython.viper\n    def _check_dma_busy(self, a: ptr32) -&gt; int:\n        return (a[0] &gt;&gt; 24) &amp; 1\n\n    def _send_buffer(self, buffer):\n        if self._horizontal:\n            self._reversed_output()\n\n        self._dc(1)\n        self._cs(0)\n\n        self._dma_start(buffer)\n        dma_ctrl = self._dma\n\n        start = ticks_ms()\n        while self._check_dma_busy(dma_ctrl) and ticks_diff(ticks_ms(), start) &lt; 5000:\n            pass\n        self._cs(1)\n        if ticks_diff(ticks_ms(), start) &gt;= 5000:\n            print('loading data took too long')\n\n        if self._horizontal:\n            self._normal_output()\n\n    # --------------------------------------------------------\n    # Public methods.\n    # --------------------------------------------------------\n\n    @profile\n    def show(self, lut=0):\n        super().show()\n        self._send_command(0x24)\n        self._send_buffer(self._buffer_bw)\n        self._send_command(0x26)\n        self._send_buffer(self._buffer_red)\n\n        self._load_LUT(lut)\n        self._send_command(0x20)\n        self._read_busy()\n\n\nif __name__ == \"__main__\":\n    epd = EinkPIO(rotation=270)\n    epd.fill()\n\n    epd.text(\"test\", 10, 10)\n    epd.fill_rect(0, 19, 52, 10, epd.lightgray)\n    epd.text(\"test\", 10, 20, epd.darkgray)\n    epd.fill_rect(0, 29, 52, 10, epd.darkgray)\n    epd.text(\"test\", 10, 30, epd.lightgray)\n    epd.fill_rect(0, 39, 52, 10)\n    epd.text(\"test\", 10, 40, epd.white)\n    epd.rect(0, 8, 52, 41)\n\n    epd.hline(5, 60, 50)\n    epd.hline(5, 160, 50)\n    epd.vline(5, 60, 100)\n    epd.vline(55, 60, 100)\n    epd.line(5, 60, 55, 160)\n    epd.line(55, 60, 5, 160)\n    epd.show()\n\n    sleep_ms(5000)\n\n    epd.fill_rect(100, 20, 50, 50)\n    epd.fill_rect(100, 70, 50, 50, epd.darkgray)\n    epd.fill_rect(100, 120, 50, 50, epd.lightgray)\n    epd.fill_rect(100, 170, 50, 50)\n    epd.rect(100, 20, 50, 200)\n    epd.show()\n\n    epd.sleep()\n</code></pre> <p>IMG_0182_gs_d.py</p> <pre><code>width = 184\nheight = 135\nimg_bw = bytearray(b'\\x02\\x92\\xaa\\xaa\\xf7~\\x01\\xf0\\x02x\\x00A?\\xf8\\x0b\\x11\\x00\\x14\"G\\xc2\\xa9\\x0fQJUU/\\xbc\\x03\\xbc\\x02x \\x01\\xff\\xe4\\x058\\x04&gt;\\x087\\x82\\x14\\x0fP\\xe1UT\\xae\\xc2\\x01\\xbfP\\xf0\\x00a\\xb0\\xe1`\\x1d\\x00\\x15\\x10\\x1f\\xb6\\x00\\x0f\\x15\\x12\\x14\\xaa\\x15\\xb9\\xf7\\xff\\xfap\\x00@\\xf0\\xe6 ?\\x80\\x84\\n\\x00\\xac\\x08\\x0f\\x90XUUJ\\xef\\xff\\xff\\xf0w\\x88\\x00i\\xf9\\x00\\x7f\\xc3e\\x0f\\x01r`\\x0f\\xa8\\xaa\\xaa\\xaa\\xab7\\xf3\\xf9\\xf0/\\xc1\\x00`\\xdf\\xad\\xff\\xf10\\xdf\\xc0\\xaa\\x90/D\\x15J\\xabA\\xd5\\xc1\\xaa\\xd1o\\x80\\x048-\\xad\\xfe\\xf8r\\xde\\xe0\\xb1@_\\xa9J%UJk\\xc3\\x97\\xb0\\x7f\\x00\\x00\\x00\\xdfO\\xe0?Z\\x0f\\xe0j\\x00\\x0fT\\xa1\\x95UP\\xaa\\xe2p\\xf0\\xf0\\x00\\x08\\x00\\xfe\\x9c\\xf9\\x0f\\xfe,\\xb1\\xd4\\x80/R\\x01A*\\xa8U\\x7f\\xf0{\\xc0\\x80P\\x01\\xfa\\xc6&lt;\\x07\\x97&gt;\\xb1J \\x1fU\\x00B\\x15TR\\xff\\xfe\\x08\\xdd\\x1a\\x00\\x13\\xf6\\x0b\\n\\x07\\xbe48\\xe8\\x00\\x0fZ\\x00\\x92\\xaa\\xa0\\xa2\\x9f\\xff\\x07\\x1c\\x89\\x04\\x07\\xfd\\xa9\\x00\\x07[\\xabxP@\\x0f*\\x80AJ\\x98\\x14\\xaf\\xff\\x00}\\x10\\x00\\x05\\xf5\\xa0\\n\\x0f\\x0fGYu\\xa0\\x0fUQT\\xa5TE_\\xff\\xc0\\x02`\\x90\\x0b\\xdb\\x04\\x04\\x0fOS\\xb0\\x8a\\x80\\x0f\\x15()U*\\x14\\x0f\\xff\\xf0\\x80\\xea\\x1c\\x17\\xbf\\xb0\\x00\\xbfO\\xafP\\x13\\x00\\x0fJ\\x85(ET\\x02\\x8f\\xff\\xe2\\xaa|\\x84\\xf6\\xfe!0\\xc7\\x17\\x93\\xc1)\\x00\\x0f%@T\\xa9J\\x80\\xbf\\xff\\xfdZ\\x1d\\xc1\\xa7\\xfdQ\\xc0\\x02\\x10w\\xea(\\x00\\x0f\\x15@(T\\xaaP\\xf7\\xff\\xfdI\\x0f\\xbe\\xeb\\xfd$@\\x00\\x14\\x0f\\xd0 \\x00O\\x08\\xa1\\n\\xa2\\xa5@\\xdf\\xff\\xefe\\x03\\xff\\xc1\\xf6\\x98\\xc0\\x10\\x10\\x07\\xf0)\\x02\\x0f\\x05T\\nUT#\\xff\\xff\\xef\\xb5\\x7f\\xcf\\xc1\\xfa| \\x00\\x00\\'\\x80\\x80\\x00\\x0fJ\\xa8\\x15(\\xa8\\x87\\x8f\\xbfQ\\xcf\\xf7\\xff\\x00H\\x9d\\x08\\x00\\x00/\\xa0@\\x00\\x0f%Q\\x02\\x95\\x00(\\x07\\xda\\x80G\\xdb\\xe4\\xc0eq\\x06\\x00\\x8d\\x1f\\x1a\\x00\\x8a\\x0fP\\xaa\\x15H\\x100\\x03\\xc6\\x00\\xc7\\xfd\\xb6@\\xd0\\xf4\\x04 \\xe8?`\\x00\\x00\\x0f\\n\\xa9\\x01T\\x00 \\x03\\xeb\\xc0#\\xf5WTEt\\x00\\xb0p\\x7fP\\x00\\x00_)J\\x80(\\x00j\\x83\\xf3\\xf0G\\xe8\\xbe\\xe8\\x00\\x04\\x00|\\xfd\\xff@\\x00\\x00\\xaf\\x04)$\\x05\\x00\\xff\\x83\\xf1\\xf0\\xc2\\xf5\\xfa\\x04\\x01$\\x02\\x7f\\xff\\xff\\x80\\x01\\x00O\\x05J\\x90\\x00C\\xbf\\x03\\xf9\\xfe\\x95\\xb5\\x89\\t\\x00\\x06\\x04\\xbf\\xff\\xff\\x00\\x00 \\x0f \\xa2D\\x00\\x07\\x01\\x05\\xdc\\xff\\xc2\\xfb\\x80\\x03\\x00\\x04!_\\xff\\xfe\\x00\\x02\\xb5\\x0fA \\xa2\\x00\\x0f@\\x03\\xef\\xfeUq\\xc0 `\\x06\\x00\\x04\\x7f\\xfe\\xa0\\x05l\\x0f\\x04\\x12@\\x00\\x7f\\xc0\\x01\\xfb\\xfez\\xf7\\x80$\\x00\\x04\\x00\\x05\\x8f\\xfc\\x00\\x1f\\xb8\\x0f\\x12@ \\xa0\\xfb\\xf0\\x01\\xbf\\xf1\\x7f{\\x80\\x08\\x00\\x04\\x00\\x05\\xf3\\xf8\\x00\\x05\\x00_H\\x00\\x00\\x03\\xff\\xfc\\x00\\xbf\\xbc~\\xbf\\xc0P\\x00\\x04\\x01\\x80\\xd8\\xf5\\x00\\x02\\x03\\xef \\x00\\x00G\\xff\\xfc\\x00\\xff\\xee\\xff_\\xc0\\x10\\x00\\x08\\x02\\x01\\xf4\\xfe\\x90\\x00\\n\\x0f\\x00E\\x00\\x07\\xff\\xff\\x01\\x7f\\xf3\\xff_\\xc0\\xaa\\x00\\x08\\x06\\x01\\xfbm@\\x00(\\x0f@\\x00@\\x03\\xff\\xff\\x00\\xfe\\xb7\\xff\\xff\\xa6T\\x00\\x08\\x06\\x01\\xd81 \\x00\\xc0\\x0f\\x00\\n\\x00\\x00\\xff\\xff\\x80\\xfek\\xff\\xf5\\xe2u\\x00\\x18\\x00C\\xdb@\\x80\\x01 \\x0f\\x80 \\x00\\x00?\\xffA\\xcf_\\xf9\\xffd7\\x00\\x10\\x00\\x01\\xf6\\x00\\x10\\x04\\x10\\x0f@\\x08\\x00\\x00?\\xff\\xa0\\xe3\\xdf\\xfa\\xef\\xb0.\\x00\\x10\\x00a\\xfc\\x02 \\x08\\x10\\x0f@ \\x00\\x00_\\xff@B?\\x7f\\xf7`\\x12\\x80\\x10\\x00\\xab\\xd8\\x01\\x00\\x10(\\x0f@\\x00\\x00\\x00\\x03\\xfd H=\\xfeg\\x10\\x05\\x000\\x7f\\xffQ@\\x80\\x00,/ \\x00\\x00\\x01\\x07\\xcb\\xb5`\\x1f\\xfbj@\\x00\\x00\\x10?\\xd7\\xe0\\x02\\x00\\x00\\xb7\\xff \\x00\\x00\\x01_\\xbdz1\\x7f\\xff\\xdf`\\x00\\x007\\xdf8\\x90\\x00\\x90\\x80\\xdf\\xff\\x00\\x00\\x00\\x00\\xff\\xff\\xdc\\xb5_\\xbc\\xeb\\xc0\\x0f\\x00\\'\\x83@\\x00\\x00\\x00\\x10\\x16\\xdf\\x00\\x08\\x00\\x00C\\xc5\\x8e\\xbd\\x7f\\xf7\\xff\\xa0\\'\\x00/\\x07\\xf1\\x01\\n\\x08\\x00\\x05\\xef\\x10\\x00\\x00\\x00\\xa7\\xfcg\\x8f\\xf6\\xf2\\x7f\\xc0G\\x00 \\x1f\\xfc\\x00%\\x00\\x00\\x00\\x0f\\x00\\x00\\x03\\xc0\\xc0\\xed;\\xa7\\xff7\\x0f\\xc0g@aG\\xfe\\x10@\\x82\\x00\\x00\\x0f\\x00\\x00/\\xb0\\xff\\xae\\xcf\\x8b\\xbb\\xb1\\xc7\\xe0?\\x80 ?\\xccP\\x1aP\\x00\\x00\\x1f@\\x00g\\xf3\\xff\\xffRB\\x1b\\xd7\\x82@7\\x00h\\x7f\\xe6\\x04\\x81\\x08\\x00\\x00_\\x00\\x00w\\xe7\\xfb\\xdd\\xa4\\x00\\x0f\\xcbR`\\x00\\x00@?\\xff\\xba A\\x19\\xfa\\xbf\\x00\\x00\\xc7\\xed~\\xa5\\xf4\\x00\\x0e\\xf9\\xf2@\\x00\\x00@?\\xfe\\xc5\\x03\\xcb\\x7f\\xfe\\xbf\\x00\\x0b\\xe3\\xe8\\x7f\\x92\\xb8\\x00E\\x7f\\xf6 \\x00\\x00O\\xff\\xfb\\x90\\n\\xc3\\xff\\xff\\xff\\x00\\x07\\xfd\\xcc\\x0f\\xe4\\xb8\\x01f\\x05\\xd6`\\x00\\x00\\x9f\\xff\\xfdm\\x17\\xd7\\xff\\xff\\xff\\x00\\x07\\xff\\x83\\xd7\\xf04!\\x97\\x80\\x7f\\xc0\\x00\\x00\\x1f\\xff\\xea\\xa4G\\xc7\\xff\\xff\\x7f\\x00\\x0f\\xeb\\xd5\\xffp\\n!G \\x1f\\xe0\\x00\\x00}\\xff\\xc9X\\xbf\\xd7\\xff\\xff\\xff\\x00\\x0f\\xff\\xfa\\x99\\xd0\\t\\x05S\\xc0\\xc7\\xc0\\x00\\x00\\xcf\\xfc\\xca\\xf9\\xcf\\xc7\\xff\\xff\\xff\\x00?\\xdf\\xe0\\x06\\xe8\\x00\\x04\\xa3\\xb6\\x1f\\xc0\\x00\\x00\\x9f\\x10\\xff\\xf3\\xff\\xc7\\xff\\xff\\xff\\x00?\\n\\x00\\xbf\\xfc\\x00@\\xd1\\xe9S\\xe0\\x00\\x00\\xbf \\xff\\xf3\\xff\\x87\\xff\\xff\\xff\\x00\\x00\\x00\\x0f\\xff\\xfc\\x04\\x10\\xa9\\xd6\\xac`\\x00\\x00?B\\x7f\\xe7\\xff\\x87\\xff\\xff\\xff\\x00\\x00\\x01\\x7f\\xfd&gt;\\x00\\x00\\xc1\\xfe\\xe60\\x00\\x00\\xbf!\\xff\\xe7\\xff\\x97\\xef\\xff\\xff\\x00\\x00\\x1f\\xff\\xe0\\x1e\\x00\\x82 \\xef\\xbc0\\x00\\x00\\\\\\xa2\\x7f\\xe7\\xff\\x07\\xcf\\xff\\xff\\x00\\x02\\xff\\xff\\xa8\\x9f\\x00\\x00\\x01#\\xef\\xf8\\x00\\x01`\\xe0\\x7f\\xf3\\xff\\x17\\xdf\\xff\\xff\\x00\\xaf\\xff\\xeaU/\\x00 \\x04\\xaf\\xb5\\xbf\\x00\\x00\\x10d\\xff\\xe1\\xff\\x07\\x9e?\\xff\\x06\\xff\\xfe\\xaa\\x88\\x9f\\x82\\x00\\x07\\xf3\\xff\\x0f\\xc0\\x00L\\xe4\\xff\\xe6:\\x83\\x9c\\x7f\\xff?\\xff\\xf9\\x00%O\\x80\\x82\\x0b\\xf5\\xfe\\x03\\xe0\\x00\\x06/\\xff\\x8e\\x02\\xa1\\x00\\xbf\\xff\\xff\\xff\\xf5P\\x00/\\x80\\x00\\x05\\xf8\\xfe\\x03\\xe0@B-\\xfeq\\xc9\\xacp\\x7f\\xff\\xff\\xff\\xa9\\x04\\x80\\x87\\xc8\\x00\\x03\\xf0?\\t\\xa2\\x00\\x11\\r\\xee\\xc09~x\\xff\\xff\\xff\\xda\\xa4\\xa2\\x00\\x0b\\xc0\\x00\\x01\\xfa\\x15\\x18!@\\x01\\xc3\\xcc0yv\\xb3\\xff\\xff\\xfdm)\\x10@\\x07\\xc0\\x00\\x00\\xfc!RA\\x80\\x00r\\x88\\xc0\\x10B&gt;\\xff\\xcf\\xf5\\x15B\\x04\\x08\\x01` \\x03&gt;\\xb1\\x87\\xc2@\\x00b\\xf9\\xff\\xfd\\x80\\x1c\\xff\\xbf\\xaa\\xca(Q\\x00\\x01P\\x00\\x03\\x8f\\x90\\xcd\\x06\\x80\\x00 \\r\\xf8 \\x01@&lt;O\\xaa\\xa1B\\x00\\x00\\x01`\\x00\\x03\\xc7\\xea\\x18\\n\\x80\\x004\\xfd\\x80\\x03\\x90\\x03\\x88\\x9f\\xd5T\\x08\\x90\\x00\\x00\\xb0@\\x07\\xe7\\xe4\\xfdE\\x80\\x00\\x15\\xbc\\x1c\\x12\\xdc\\x08&gt;\\xbfUB\\x80\\x02\\x00\\x01x\\x00\\x06\\xf9\\xf1~\\xb3\\x00\\x00\\x01\\xd8\\xfe_\\xc8\\x18\\xc0\\x7f\\xaa\\xa8\\x00\\x00\\x00\\x00\\\\\\x00\\n\\xf8\\xfc\\xfe\\xfa\\x00\\x00\\x08\\xfd\\xfe\\xff\\xa0\\x12\\x00\\x0fT\\x92\\x10\\x00\\x00\\x00 \\x00\\x11\\xfc??l\\x00\\x00\\x00\\x07\\xff\\xee\\xbc \\x80\\x1f\\xa2H\\x80\\x00\\x00\\x00\\x1c\\x00\\x02\\xfe\\x8d\\x7f\\xf4\\x00\\x00\\x06\\xc9\\xbf\\xf6\\x94\\x10\\x81\\x1f\\xad\"\\x02\\x00\\x00\\x00\\x06\\x00&amp;~\\xe0\\xff\\xf8\\x00\\x00\\x02\\xfe\\xfe\\xebh \\x80\\xaf\\xb2\\x08\\x00@\\x00\\x00\\n\\x00\\x17\\x7f\\x82\\xff\\xf0\\x00\\x00\\x02~?\\xea\\xf8\\x01\\x00\\x1fI\\x00\\x00\\x00\\x00\\x00\\x07\\x00G\\xff{\\xf3\\xe0\\x00\\x00\\x01~\\x04\\xb5\\xa8\\x00\\x80O\\xaa\\xa9\\x00\\x00\\x00\\x00\\x01\\x80\\'g\\xdaB\\xda\\x00\\x04\\x01&gt;\\x07\\x1a\\xa0\\x01\\x00OTD\\xa0\\x00\\x00\\x00\\x00\\xa2\\x0f\\xf8\\x80\\x00=@\\x06\\x00\\x9fO\\x00\\xa8\\x02\\x00\\x8f\\xadU(\\x00\\x00\\x00\\x10P\\x8f\\xbe \\x88}\\x00\\x02\\x00\\x8b\\x06\\x1e\\x14\\x00\\x00\\x0fUT\\x92\\x00\\x10\\x00HP\\x9f\\xbe\\x04q\\xfe\\x00\\x04\\x00\\xf5\\x06\\xff\\x8a\\x14\\x01\\x8f\\xb5R\\xa0 \\x00* \\x08\\x9f\\xae\\x01\\xc2\\xfe\\x80\\x00\\x00_\\xc1\\xff\\xf1\\xb4\\x01\\x8fT\\x8a\\t\\x00\\x00\\x01\\x15\\x00?\\x9a\\x0f\\xf8\\xfe\\x00\\x00\\x00/\\xc1\\xff\\xfe\\x07\\xee\\x0f\\x95QD\\x00\\x00\\x08\\x80\\x80?\\xbd\\x1e\\xe6\\x7f\\x00\\x00\\x007\\xe7\\xff\\xff\\xf0\\xfdORJ \\x00\\x00\\x04R\\xa5?\\xe3\\x0f\\xe9\\x15 \\x00\\x00\\x1f\\xff\\xff\\xff\\xfc;\\x9f\\xa9(\\x00\\x00\\n\"\\x02\\x08\\x1f\\x96\\xcd\\xf8\\x8a@\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\x82\\xffT\\x80\\x00\\x04\\x00P\\tU&gt;\\xe3\\xf1\\xf0B\\x00\\x00\\x00\\x0b\\xff\\xff\\xff\\xff\\xfco\\x02 \\x00\\x00\\x10\\x01P\\t\\x1f\\x17\\xf9\\x88p\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xcfT\\x84\\x00\\x08\\x00\\x00@H?V\\xd0\\x068\\x00\\x00\\x00\\x04S\\xff\\xff\\xff\\xff\\xff\\x01\\x10\\x00\\x00\\x00\\x00\\x10%\\x1eR\\xa4\\x01\\x1e\\x00\\x00\\x00\\x04\\x7f\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x80\\x01\\x11\\x1f\\xa9u\\x00\\x9f\\xc0\\x00\\x00\\x00\\xbf\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00T\\x00\\x1f*q\\x00F\\x00\\x00\\x00\\x03\\xdf\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\xa0\\x87@a\\x81\\xb1\\x00\\x00\\x00\\x02\\xab\\xff\\xff\\xff\\xff\\xff\\x10\\x00\\x02\\x00\\x00\\x00\\xa0\\x00\\x0fA3\\x83\\x9d\\x80\\x00\\x00\\x02\\x00?\\xff\\xff\\xff\\xff\\x05$\\x00\\x80\\x00\\x00(@\\x87\\x001\\x00\\x8f\\x00\\x00\\x00\\x03\\x08\\x0f\\xff\\xff\\xff\\xff\\x10\\x00\\x80\\x00\\x00\\x00\\x01\\x06G\\xc0\\x11\\x00O\\x00\\x00\\x00\\x02\\xa4\\x03\\xff\\xff\\xff/\\x04\\x90\\x10\\x01@\\x14\\x10\\x0e\\x07\\x80\\x00\\x00?\\x00\\x00\\x00\\x02J\\x01\\xff\\xff\\xfe?\\x91\\x04\\x00\\x00\\x00\\x00\\x04\\n\\x07\\x00\\x00\\x00\\x8a\\x80\\x00\\x00\\x02 \\x02\\x1f\\xff\\xff\\xffJQ@\\x00\\x00\\x00\\x10\\x1fG\\x00\\x00\\x00o\\x00\\x00\\x00\\x02\\xe0\\x00\\x1f\\xff\\xff\\xff\\xa0\\x88\\x00\\x00\\x08\\x04A\\x1e\\x07\\x00\\x00\\x005\\x80\\x00\\x00\\x03\\x18\\x00\\x03\\xff\\xff\\xffzU\\x00\\x00\\x00\\x00\\x10&gt;O\\x00!\\x00\\x1e@\\x00\\x00\\x07\\x84\\x00\\x00\\x03\\xff\\xff\\xa9\\x04 \\x00\\x00\\x01\\x00~\\x07\\x00\\x80\\x00\\x0b\\x00\\x00\\x00\\x03c\\x00\\x00\\x03\\xff\\xffn\\x95\\x00\\x00\\x00\\x01\\x00~O\\x00\\x00\\x00\\x15\\x00\\x00\\x00\\x07\\xa9\\xe2\\x00\\x03\\xff\\xff\\xf5B\\x80\\x00\\x00\\x00\\x84\\x7fN\\x04\\x00h\\x1e\\x80\\x00\\x00\\x07\\xf0\\xf2`Q\\xf0o\\xcb\\xa8\\x90\\x00\\x00\\x00@&gt;\\x0e\\x00\\x00\\x0en\\xc0\\x00\\x00\\x06\\xbf\\xbd-T \\x0f\\xf2\\xeaB\\x00\\x00@ \\x13\\x1c\\x00\\x00\\x0f7 \\x00\\x00\\x0f\\xfd~\\xd0\\t@\\x0f\\xf1\\xb4\\x90\\x00\\x00\\x00\\x10,\\x0e\\x04\\x00\\x1f\\x8d\\x80\\x00\\x00\\x0e\\xaa?\\xea\\xa2(\\x0f\\xfe\\xf9\\x08\\x00\\x00\\x08\\x08\\x10\\x1f\\x00\\x00\\x0f\\xe8\\x00\\x00\\x00\\x15X\\x8f\\xea\\x08@\\x0f\\xff*@\\x00\\x01\\x00\\x02!\\x1e@\\x00\\x0f\\xb4\\x00\\x00\\x00\\x14\\x80\\x0f\\xf4\\x01\\x10\\x0f\\xf7\\xdd\\x80\\x00\\x00\\x00@\\x10\\x1a\\x02\\x00\\x0f;\\x80\\x00\\x00\\x00\\x01\\xe2PL\\x00\\x0f\\xb5\\xe6\\xa0\\x00\\x00\\x15\\n*\\x1d\\x00\\x00\\x17\\x00@\\x00\\x00\\x00&gt;\\x80\\n\\x80\\x08\\x0f\\xff\\xfb\\xa8\\x02\\x00\\x08\\x01\\n\\x9c\\x82\\x00\\x0e7\\xe0\\x00\\x00\\x00`\\x00\\x06@\\x02/\\xee\\xbd\\xb0\\x02\\x00P\\x92\\x00\\x0f\\x00\\x00\\x14Z\\xa0\\x00\\x00\\x01\\xc0\\x10\\x016\\xa1_\\xbc\\x01\\x08\\x05\\xc1\\x00\\t\\x80\\x0e\\x80\\x00BO\\xd0\\x00\\x00\\x07\\xa0\\x05\\x00\\xa9T\\xbf\\x1f\\xff4\\x15\\xe8\\x15\\'D\\x03\\x80\\x00\\x08\\x8d0\\x00\\x00\\x1d\\x80\\x05P[\\xaa\\xaf\\xfc\\x07\\x8a\\x14\\xb5@\\x93\\xc11\\xc0\\x00\"\\x00\\x88\\x00\\x00\\xf0\\x00\\x03\\xe4\\xaf\\xd7\\x7f=\\xff\\xdc\\x07|\\x04\\x05@\\x07\\xc0\\x00\\x00\\x00\\x00\\x00\\x03\\xea\\xb0\\x05\\xf3o{\\xff\\xff\\x90&gt;\\x07\\xafQC\\x83\\x03\\xc0\\x000\\x04 \\x00\\x06\\t\\x08\\x03~\\xb7\\xff\\xff\\x83\\xff\\xc3\\x81\\xff\\xa0\\x02\\x04!\\xe0\\x01\\x02{\\xc0\\x00\\x08\\x05L\\x01\\xfd\\xdb\\xfb\\xff&gt;\\x01\\x1c@\\xff\\xc0\\x05\\x86\\x01\\xe0\\x00!\\xad\\xc0\\x00\\n\\x11#\\xa8\\x0f\\xef\\xff\\xff\\xe7j\\xff\\xa0\\xff\\xf0\\x01E!\\xf0\\x00\\x81^\\x80\\x00\\x08J\\xdd\\xdc\\x9f\\xff\\xff\\xff\\xfd-\\x80\\x08\\x7f\\xf8\\x01\\n\\x00\\xf8\\x00\\x01\\xf7@\\x00\\x0c?~\\xf7\\xff\\xff\\xfd\\x7f-\\xe0\\xff\\xfe\\x9f\\xf9\\xfc\\x8f\\x03\\xf0\\x00\\x03\\xdf\\x80\\x00\\x0e/\\xff\\xda\\xff\\xaf\\xff\\xff\\xc1\\xff\\xff\\xff\\x07\\xfb\\xf8\\xc5\\x07\\xf0\\x00\\x01\\xff\\xc0\\x00\\x06\\x9f\\xff\\xff\\xfd\\xfe\\xbb\\xef\\xfb\\xff\\xff\\xff\\xcb\\xf3\\xdc\\x87\\x0f\\xb0\\x00\\x03\\xff\\x80\\x00\\x07\\xcf\\xbb\\xff\\xfd\\xbf\\xfd\\xbf\\xff\\xff\\xff\\xfc\\xf5\\xce6E\\x83\\xf0\\x00\\x01{\\xc0\\x00\\x03\\xf7\\xff\\xff\\xff\\xf6\\xf6\\xff\\xfe\\x7f\\xff\\xfcx\\x08\\x06\\x07O\\xd0\\x00\\x01+ \\x00\\x03\\xff\\xfa\\xf7_\\xdd\\xbf\\xff\\xff\\xff\\xff\\xff\\xfc8\\x06E\\x8b\\xc0\\x00\\x02[\\x90\\x00\\x02\\xea\\xd6\\x9a\\xed\\xae]\\x7f\\xff\\xff\\xff\\xff\\xff:\\xbc\\x0b\\x97\\x80\\x00\\x00\\x7f\\xa0\\x00\\x03\\x00\\x00\\x0b\\xfe\\xab\\xef\\xbf\\xff\\xaf\\xff\\xff\\xff\\x97\\xe0\\x05\\x87\\x80\\x00\\x04\\xdf\\x80\\x00\\x00\\x00\\x00\\x10\\xaf\\xb6\\xaf\\xdf\\xff\\xe7\\xff\\xff\\xff\\xc0\\x00\\x83\\x87\\x80\\x18\\x04\\xff\\x80\\x00\\x00\\x00\\x00\\x00U\\xdf\\xff_\\xbf\\xff\\xff\\xff\\xff\\xe0\\x00\\x03\\x0f\\xc0\\x08\\r\\xff\\xa0\\x00\\x00\\x00\\x00\\x00\\x0f\\xef\\xd5\\x7f\\x7f\\xfb\\xff\\xff\\xff\\xf06\\x01\\xc7\\x80\\r\\xc9\\xff@\\x00\\x00\\x00\\x00\\x00\\x07\\xd2\\xb5\\x9f')\nimg_red = bytearray(b'\\x00\\x00\\x00\\x00\\x00\\xff\\xfe\\x0f\\xfd\\xff\\xff\\xfe\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x7f\\xfc\\x03\\xfd\\xff\\xff\\xfe\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00=\\xfe\\x00\\xaf\\xff\\xff\\xfe\\x0f\\xfe\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x06\\x08\\x00\\x07\\xff\\xff\\xff\\x0f\\xf8\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xf7\\xff\\x9f\\xe0\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x0f\\xff\\xfe\\xff\\x9f\\xe0\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xdf\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05.\\xff\\xff\\xff\\xc7\\xc0\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xaf\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00O\\xff\\xff\\xff\\xff\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xdf\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\xff\\x7f\\xbf\\xfe\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xef\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\xe2\\xe5\\xff\\xec\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xe3\\xf6\\xff\\xf8\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\xef\\xff\\xf8\\x00\\x07\\xf5\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x9fo\\xf0\\x00\\x03\\xfb\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\xe3\\xe0\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03{\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02&gt;@\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00A\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xbf\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xfe\\xfd\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xdf\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00p@\\xae\\x00\\x08\\x00\\x00\\x00\\x02\\xff\\xff\\xff\\xdf\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x07\\xf8%\\x7f\\x80$\\x18\\x00\\x00\\x06\\xff\\xff\\xff\\xff\\xff\\xffu\\xff\\x00\\x00\\x00\\x00\\x00\\x0f\\xfc9\\xff\\x00\\x02H\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x1f\\xfc\\x14?\\x80\\n\\xa8\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xaf\\x00\\x00\\x00\\x00\\x00\\x15|\\x0c\\x0f\\x80\\x17@\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff_\\x00\\x00\\x00\\x00\\x00\\x00|\\x0e\\x0f\\x00\\n\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xfe\\xff\\xbf\\x00\\x00\\x00\\x00\\x00@\\xfc\\x06\\x01\\x00\\n\\x00\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xdf\\xff\\x00\\x00\\x00\\x00\\x00\\xfe\\xfa#\\x00\\x00\\x04\\x00\\x00\\x00\\x03\\xdf\\xff\\xff\\xff\\xff\\xfdJ\\xff\\x00\\x00\\x00\\x00\\x00\\xbf\\xfc\\x10\\x01\\x80\\x0e\\x00\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xfa\\x93\\xff\\x00\\x00\\x00\\x00\\x00?\\xfe\\x04\\x01\\x80\\x08\\x00\\x00\\x00\\x03\\xff\\xfe\\x7f\\xff\\xff\\xe0G\\xff\\x00\\x00\\x00\\x00\\x00\\x0f\\xfe@\\x0f\\x80\\x04\\x00\\x00\\x00\\x03\\xff\\xfe\\x0f\\xff\\xff\\xfa\\xff\\xaf\\x00\\x00\\x00\\x00\\x00\\x03\\xff@\\x03\\x80\\x00\\x00\\x00\\x00\\x03\\xff\\xff\\x07\\xff\\xff\\xfd\\xfc\\x1f\\x00\\x00\\x00\\x00\\x00\\x03\\xff\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x07\\xff\\xfe\\x03\\xff\\xff\\xff\\xf5\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\xfe\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\xff\\xfe\\x00\\xff\\xff\\xff\\xd7\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\xff\\xfe\\x00\\xff\\xff\\xff?\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x07\\xff\\xbc\\x00\\xff\\xff\\xfe\\xdf\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\xbe\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\x0f\\xff\\xfe\\x01\\xff\\xff\\xfb\\xef\\xff\\x00\\x00\\x00\\x00\\x00\\x00_\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x0f\\xff\\x9e\\x03\\xfd\\xff\\xf7\\xef\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\xbf\\x80\\x00\\x80\\x00\\x00\\x00\\x00\\x0f\\xffT\\x07\\xfe\\xff\\xef\\xd7\\xff\\x00\\x00\\x00\\x00\\x00\\x02\\xdf\\x80\\x02\\x01\\x80\\x00\\x00\\x00\\x0f\\x80\\x00\\x0f\\xff\\x7f\\xff\\xd3\\xdf\\x00\\x00\\x00\\x00\\x004J\\x80\\x00\\x00\\x80\\x00\\x00\\x00\\x0f\\xc0\\x00\\x1f\\xfd\\xff\\xffH\\x0f\\x00\\x00\\x00\\x00\\x00B\\x85\\xc0\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xe0\\xc7\\x7f\\xff\\x7f\\x7f \\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x03@\\x00\\x00\\x00\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xe9/\\x00\\x00\\x00\\x00\\x00\\x02\\x01@\\x00\\x08\\x00\\x00\\x00\\x00\\x1f\\xff\\xff\\xfe\\xff\\xff\\xff\\xfa\\x1f\\x00\\x00\\x00\\x00\\x00\\x03\\x80p\\x01?\\x80\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x02\\xc0X\\x00\\xfb\\xf0\\x00\\x00\\x00\\x1f\\xff\\xff\\xef\\xff\\xfd\\xff\\xff\\xff\\x00\\x00\\x00@\\x00\\x010t@{\\xb8\\x00\\x00\\x00\\x1f\\xff\\xff\\xaf\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\xad\\xbd\\xe0;\\xfd\\x80\\x00\\x00\\x17\\xff\\xff\\xff\\xff\\xf7\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x04\"[\\xff\\xf0?\\xbd\\x80\\x00\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x81Z\\x0b\\xff\\xf0\\x07=\\x80\\x00\\x00?\\xff\\xff\\xff\\xff\\xf7\\xff\\xff\\xff\\x00\\x00\\x00\\x07\\x80mG\\xff\\xf8\\x009\\xc0\\x00\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\xf0\\x1bG\\xff\\xf8\\x00)\\x80\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xef\\xff\\xff\\xff\\x00\\x00\\x00\\x00(\\x0f\\xcb\\xff\\xf8\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x14\\x00\\x00\\x0f\\xf5\\xff\\xf8\\x00\\x00\\x00\\x00\\x00?\\xff\\xff\\xff\\xff\\xef\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x0f\\xf6\\xff\\xfc\\x00\\x00\\x00\\x00\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x07\\xff\\xff\\xfc\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x03\\xff\\xbf\\xfe\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x03\\xff\\xef\\xfe\\x00\\x03\\x80\\x00\\x00\\xff\\xfd\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x02\\xc1\\xff\\xff\\xfe\\x00\\x01\\xc0\\x00\\x00\\x7f\\xfe\\xff\\xff\\xff\\xef\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x1f\\xe1\\xff\\xfd\\xff\\x10\\x03\\xc0\\x00\\x00?\\xfd\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00W`\\xff\\xff\\xfe\\xdc\\x00\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xef\\xff\\xff\\xff\\x00\\x00\\x00\\x15\\xaa\\xd0\\xff\\xff\\xfbP\\x00@\\x00\\x00\\x0f\\xfb\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x01Uw`\\x7f\\xff\\xf8\\x0c\\x00\\xf0\\x00\\x00\\x03\\xfb\\xff\\xf9\\xff\\x7f\\xff\\xbf\\xff\\x00\\x00\\x06\\xff\\xda\\xb0\\x7f\\xff\\xf4\\n\\x01\\xfc\\x00\\x00\\x01\\xf1\\xff\\xf1\\xff\\x7f\\xff\\x7f\\xff\\x00\\x00\\n\\xaf\\xff\\xd0\\x7f\\xff\\xfa\\x07\\x01\\xfc\\x00\\x00\\x01\\xf3\\xff\\xfe&gt;s\\x8f\\xff\\xff\\x00\\x00V\\xfb\\x7fx?\\xff\\xfc\\x0f\\xc1\\xfe@\\x00\\x00\\xf3\\xff\\xff\\xfe\\xf1\\x87\\xff\\xff\\x00%[]\\xff\\xf4?\\xff\\xfe\\x05\\xeb\\xff\\xc0\\x00\\x00?\\xff\\xcf\\xfe\\xf9\\xcf\\xff\\xff\\x02\\x92\\xd6\\xef\\xbf\\xf8?\\xff\\xff\\x03\\xdf\\xfd\\x80\\x00\\x00\\x0f\\xff\\xff\\xff\\xfd\\xff\\xff\\xff\\n\\xea\\xbd\\xfb\\xf7\\xfe\\x9f\\xff\\xff\\xc1O\\xf8\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xcfU5\\xd7\\xae\\xff\\xfe\\xaf\\xff\\xff\\xf0o\\xf0\\x00\\x00\\x00\\x1f\\xf3\\xff\\xff\\xff\\xff\\xff\\xbfU^\\xbd\\xff\\xff\\xfe\\x9f\\xff\\xff\\xf8\\x17\\xe0\\x00\\x00\\x00\\x0b\\x03\\xff\\xfco\\xff\\xff\\x7f*\\xab\\xf7o\\xff\\xffO\\xff\\xff\\xf8\\x1b\\x00\\x00\\x00\\x00\\n\\x03\\xe3\\xed#\\xf7\\xff\\xff\\xaa\\xbd\\x7f\\xfd\\xff\\xfe\\x87\\xff\\xff\\xfe\\x0e\\x80\\x00\\x00\\x00\\x0e\\x07\\x01\\xa07\\xe7?\\xffUW\\xff\\xff\\xff\\xff\\xa3\\xff\\xff\\xff\\x03\\x00\\x00\\x00\\x00\\x07\\x02\\x01\\x00_\\xef\\xff\\xff\\xabm\\xef\\xff\\xff\\xff\\xdf\\xff\\xff\\xff\\xc0\\xc0\\x00\\x00\\x00\\x07\\xf8\\x00\\x11C\\xdf\\x7f\\xef]\\xb7\\x7f\\xff\\xff\\xff\\xe3\\xff\\xfd\\xff\\xf2\\x80\\x00\\x00\\x00\\x01\\xfe\\x00\\tk\\xef\\x7f\\xefR\\xdd\\xfd\\xff\\xff\\xff\\xf9\\xff\\xf9\\xff\\xff\\x00\\x00\\x00\\x00\\x01\\xff\\x00\\x14\\x97\\xdf\\x7f\\xdfM\\xf7\\xff\\xbf\\xff\\xff\\xf5\\xff\\xf8\\xff}\\x00\\x00\\x00\\x00\\x01\\xff\\xc0\\x15\\x07\\xfe\\xff\\xef\\xb6\\xff\\xff\\xff\\xff\\xff\\xf8\\xff\\xf8?\\x84\\x0c\\x00\\x00\\x00\\x00\\xff\\xfbJW\\xff\\x7f\\xbfUV\\xff\\xff\\xff\\xff\\xfe\\x7f\\xf8\\x1f\\xa5\\xbc\\x00\\x00\\x00\\x00\\xff\\xff\\xe5_\\xfe\\xff\\xbf\\xab\\xbb_\\xff\\xff\\xff\\xff_\\xf0\\x07\\xff\\xfc\\x00\\x00\\x00\\x00\\x7f\\xbf\\xffW\\xfd\\xff\\x7fR\\xaa\\xd7\\xff\\xff\\xff\\xff\\xaf\\xf0\\x01\\xdf\\xf0\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xeb\\xff\\xff\\xff\\xaa\\xabm\\xff\\xff\\xff\\xff\\xaf\\xe0\\x01\\xff\\x80\\x00\\x00\\x00\\x00?\\xff\\xff\\xf5\\xeb\\xfe\\x7fJ\\xad_\\xdf\\xff\\xff\\xff\\xf7\\xe0\\x01\\xfe\\x00\\x00\\x00\\x00\\x00?\\xff\\xff\\xfeK\\xfe\\x7f\\xabu\\xf6\\xff\\xff\\xff\\xff\\xff\\xc0\\x01\\xf0\\x00\\x00\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xf8\\x11\\xffj\\xae\\xbb\\xff\\xff\\xff\\xff\\xff\\xc0\\x00\\xe1\\x08\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\x02\\xbf\\xad\\xb5\\xdf\\xff\\xff\\xff\\xff\\xff\\xc0\\x00\\xf0\\x06\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xc0oV\\xd7\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x002\\x07\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xfc\\x0f\\xab\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x00\\x0e\\x0f\\x80\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\x8f\\xfd\\xdf\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x00\\x06\\x07\\x80\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xab{\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x00\\x0c\\x01\\xc0\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xfe\\xef\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x00\\x18\\x00\\xe0\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x00\\x18\\x00`\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x00\\x1c\\x009\\xc0\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\x00\\x1c\\x00\\x0f\\x80\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xef\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf0\\x00\\x0c\\x00\\x02\\x00\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xfa\\xdb\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\x00\\x0e\\x00\\x00\\x00\\x00\\x00\\x00\\xf7\\xff\\xff\\xff\\xff\\xff\\xef\\xff\\x7f\\xff\\xff\\xff\\xff\\xf9\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01[\\xff\\xff\\xff\\xff\\xff\\xfbo\\xef\\xff\\xff\\xff\\xff\\xf1\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xb5\\xff\\xff\\xff\\xff\\xffn\\xfb\\xff\\xff\\xff\\xff\\xff\\xf1\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xdf\\xff\\xff\\xff\\xff\\xff\\xb5\\xae\\xbf\\xff\\xff\\xff\\xff\\xe0\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x1f\\xff\\xff\\xff\\xff\\xff_w\\xff\\xff\\xff\\xff\\xff\\xe1\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xe7\\xff\\xff\\xff\\xff\\xff\\x85\\xaa\\xff\\xff\\xff\\xff\\xff\\xc1\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00{\\xff\\xff\\xff\\xff\\xffV\\xfb\\xdf\\xff\\xff\\xff\\xff\\x81\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x9c\\xff\\xff\\xff\\xff\\xff\\x91j\\xff\\xff\\xff\\xff\\xff\\x81\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00V\\x1d\\xff\\xff\\xff\\xff\\n\\xbd\\x7f\\xff\\xff\\xff\\xff\\x80\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\r\\x9f\\xaf\\xff\\xff\\x04Wo\\xff\\xff\\xff\\xff\\xc1\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01@B\\xd2\\xab\\xff\\xff\\x01\\x15\\xbd\\xff\\xff\\xff\\xff\\xec\\xe0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01/\\xf6\\xbf\\xff\\x00Ko\\xff\\xff\\xff\\xff\\xd3\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x15]\\xd7\\xff\\x00\\x06\\xf7\\xff\\xff\\xff\\xff\\xef\\xe0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\xf7\\xbf\\xff\\x00\\x15\\xbf\\xff\\xff\\xff\\xff\\xde\\xe0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b\\xfe\\xef\\xff\\x08\\x02\\x7f\\xff\\xff\\xff\\xff\\xef\\xe0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1d\\xaf\\xb3\\xff\\xffJ\\x01_\\xff\\xff\\xff\\xff\\xd5\\xe0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x7f\\xf5\\x7f\\xf7\\xff\\x00\\x00W\\xff\\xff\\xff\\xff\\xf5`\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1f\\xff\\xf9\\xbf\\xfd\\xdf\\x11@O\\xff\\xff\\xff\\xff\\xff\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00?\\xef\\xfe\\xc9^\\xafC\\xff\\xf7\\xff\\xff\\xff\\xff\\xff\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00_\\xfa\\xffV\\xabO\\xff\\xff\\xcb\\xff\\xff\\xff\\xff\\xfb\\xfc\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x7f\\xfa\\xaf\\xa4U_\\xff\\xf8\\x05\\xff\\xff\\xff\\xff\\xfe\\xfe\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xfc\\x1bP(\\x8f\\xc2\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x15O\\xfa\\x0c\\x90\\x84\\x0f\\x00o\\xff\\xff\\xff\\xff\\xff\\xfc\\xfc\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xf6\\xf7\\xfc\\x81H\\x00\\x0f\\x7f\\xff\\xfc\\x7f\\xff\\xff\\xff\\xfb\\xfe\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\xfa\\xb3\\xfe\\x02$\\x04\\x0f\\xff\\xfe\\xe0?\\xff\\xff\\xff\\xf9\\xfe\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\xee\\xdcW\\xf0\\x10\\x00\\x0f\\x18\\x95\\x00\\x1f\\xff\\xff\\xff\\xfa\\xfe\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\xb5\"#`\\x00\\x00\\x0f\\x02\\xd2\\x7f\\xff\\xff\\xff\\xff\\xf5\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\xc0\\x81\\x08\\x00\\x00\\x00\\x0f\\xd2\\x1f\\xff\\xff\\xff\\xfe\\x03\\xf0\\xfc\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xd0\\x00%\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xfc\\x07\\xfa\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x01`\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xfc\\x03\\xf8\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\\x000@\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xf0\\x01\\xfa|\\x00\\x00\\x00\\x84\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xf0\\x01\\xf8\\xb0\\x00\\x00\\x00\\xd4\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xc0\\x01\\xfat\\x00\\x00\\x01\\xa4\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xc0\\x03\\xf4h\\x00\\x00\\x03\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xe8\\x1f\\xfax\\x00\\x00\\x03 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfcx\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfc\\xf0\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00*\\x8f\\xff\\xff\\xff\\xff\\xff\\xff\\xc9\\xfe8\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00-Jo')\n</code></pre> <p>IMG_0182_gs.py</p> <pre><code>width = 184\nheight = 135\nimg_bw = bytearray(b'\\x00\\x00\\x00\\x00\\xff\\x7f\\x01\\xf0\\x02x\\x10\\x01\\xbf\\xfc\\x0f\\x18\\x00\\x0c\\x02\\'\\xc3\\x10\\x0f\\x00\\x00\\x00\\x00?\\xbc\\x01\\xfc\\x00x\\x00\\x01\\xcf\\xf0\\x02\\x18\\x00\\x1e\\x00\\x07\\x83\\x00\\x0f\\x00\\x00\\x00\\x00\\x0f\\xc0\\x03\\xff\\x00p\\x00!\\xf0\\xe3\\xe0\\x1c\\x00\\x00\\x00\\x1f\\x82\\x00\\x0f\\x00\\x00\\x00\\x00\\x0f\\xf9\\xf1\\xff\\xf8p\\x00 \\xe0f ?\\x80\\x00\\x00\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xf0s\\x80\\x00a\\xff\\x00\\x7f\\xc1 \\x0e\\x00\\x00\\x00\\x0f\\x80\\x00\\x00\\x00\\x00\\x07\\xf3\\xf8\\xf0g\\x80\\x00p\\xdf\\xad\\xff\\xf1`\\x1f\\xc0\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x03\\x81\\xfb\\xf1o\\x80\\x008?\\xad\\xfc\\xfc0_\\xe0!\\x00\\x1f\\x00\\x00\\x00\\x00\\x00a\\xc3\\xcf\\xb0\\x7f\\x00\\x00\\x00\\xff\\x8f\\xe0?\\x1a\\x0f\\xe0V\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\xf3\\xf0\\xf0\\xf0\\x00\\x00\\x00\\xff\\x9e\\xf8\\x0f\\xfe\\x0c\\xf0B\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xfc3\\xc8\\x80@\\x01\\xfe\\x06&lt;\\x07\\xbf&gt;0\\x10\\x00\\x1f\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xfe\\x08\\xd8\\x14\\x00\\x13\\xfe\\x0f\\x08\\x07?&gt;8\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00?\\xff\\x03\\x1c\\x98\\x00\\x07\\xff\\x08\\x00\\x07\\x1f\\xbe8\\x00\\x00\\x0f\\x08\\x00\\x00\\x00\\x00\\x00\\x1f\\xff\\x80}0\\x00\\x07\\xff\\x80\\x0c\\x0f\\x0f\\x83\\xf8\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x10\\x00\\x0f\\xff\\xc0\\x06\\xe0\\x10\\x0f\\xff\\x80\\x00\\x0f\\x0f\\x83\\x90\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xe0\\x00\\xf0\\x1c\\x17\\xff\\x80\\x00\\x9f\\x0f\\x87\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xf1\\xf8x\\x00\\xe7\\xff\\x01\\x00\\x87\\x0f\\x83\\xc0\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00?\\xff\\xf8\\xfc\\x1d\\xc1\\xe7\\xfe\\x13\\xc0\\x00\\x003\\xc0\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xfc\\xef\\x0f\\xdf\\xe7\\xfe\\x14@\\x00\\x00\\x07\\xc0 \\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\x8f\\xff\\xc1\\xfe\\x1c@\\x00\\x18\\x07\\x98\\x10\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x03\\xff\\xff\\xe7\\xff\\xff\\xdf\\xc1\\xf8&lt;\\x00\\x00\\x00\\x07\\x98@\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x07\\x8f\\xff\\xf0\\xcf\\xf7\\xff\\x00\\x009\\x04\\x00\\x00/\\x80\\xc0\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x08\\x07\\xdf\\x00g\\xff\\xe6\\x00 y\\x84\\x00\\x00_\\x80\\x00\\x04\\x0f\\x00\\x00\\x00\\x00\\x00\\x10\\x07\\xc7\\x00G\\xff\\xa7\\xc0`t\\x04\\x00\\xe0?\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00 \\x03\\xe7\\xc0G\\xfd\\xb7\\xfc@t\\x008x\\x7f`\\x00\\x00\\x1f\\x00\\x00\\x00\\x00\\x00c\\x83\\xe3\\xf0g\\xec\\xff\\xfc\\x00$\\x00|\\xf9\\xff\\x00\\x00\\x00\\xef\\x00\\x00\\x00\\x00\\x00\\xff\\x83\\xf1\\xf8\\xc7\\xf9\\xffL\\x00\\x04\\x00\\x7f\\xff\\xff\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x03\\xff\\x03\\xf8\\xff\\xc7\\xfb\\xc8\\r\\x00\\x04\\x06?\\xff\\xff\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x07\\x00\\x07\\xfc\\xff\\xc3\\xf9\\xc0\\x13\\x00\\x04\\x00\\x1f\\xff\\xfe\\x00\\x007\\x8f\\x00\\x00\\x00\\x00\\x0f\\x80\\x01\\xff\\xfec\\xfb\\xc0\"\\x00\\x04\\x00\\x00\\x7f\\xfc\\x00\\x03\\xfc\\x0f\\x00\\x00\\x00\\x00?\\xe0\\x01\\xff\\xfe\\x7f\\xf3\\x80,\\x00\\x04\\x02\\x05\\x8f\\xf8\\x00\\x0f\\xf8\\x0f\\x00\\x00\\x00\\x00\\xff\\xf0\\x01\\xff\\xf1\\x7f\\xf7\\xc0\\x08\\x00\\x04\\x00\\x05\\xf3\\xf8\\x00\\x0f\\x80\\x1f\\x00\\x00\\x00\\x01\\xff\\xf8\\x01\\x7f\\xfc\\x7f\\xff\\xc0P\\x00\\x04\\x01\\x81\\xf8\\xf0\\x00\\x00\\x01\\xff\\x00\\x00\\x00\\x07\\xff\\xfc\\x01\\xff\\xfd\\xff\\xff\\xc0p\\x00\\x08\\x03\\x01\\xf4^\\x00\\x00\\x0f\\x8f\\x00\\x00\\x00\\x07\\xff\\xfe\\x01\\xff\\xf3\\xff\\xff\\xc0n\\x00\\x08\\x06\\x01\\xfb|\\x00\\x008\\x0f\\x00\\x00\\x00\\x03\\xff\\xff\\x80\\xff\\xff\\xff\\xff\\xe2|\\x00\\x08\\x06\\x01\\xfcq\\x00\\x00\\xc0\\x0f\\x00\\x00\\x00\\x00\\x7f\\xff\\x80\\xfe\\x7f\\xff\\xff\\xe6\\x7f\\x00\\x00\\x00\\x03\\xfd\\x00\\x00\\x01\\x00\\x0f\\x00\\x00\\x00\\x00?\\xff\\xc1\\xe7\\x1f\\xfd\\xfd\\xf6\\x7f\\x00\\x10\\x00A\\xfe\\x00\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00?\\xff\\x80\\xc3\\xbf\\xf9\\xff\\xf0?\\x00\\x10\\x00a\\xfc\\x00\\x00\\x080\\x0f\\x00\\x00\\x00\\x00\\x1f\\xff\\x80@?\\xff\\xf7\\xf0\\x1f\\x80\\x10\\x00\\xf9\\xf8\\x00\\x00\\x108\\x0f\\x00\\x00\\x00\\x00\\x03\\xff\\x80@?\\xfew0\\x07\\xc00\\x7f\\xff\\xf0@\\x00\\x00\\\\\\x0f\\x00\\x00\\x00\\x00\\x07\\xdf0`\\x1f\\xff\\x7fp\\x00\\x00\\x10?\\xff\\xe0\\x00\\x00\\x00\\xff\\xff\\x00\\x00\\x00\\x00?\\xff\\xf8 ?\\xff\\xef\\xe0\\x00\\x00\\x17\\xdc\\x18\\x00\\x00\\x00\\x81\\xff\\xff\\x00\\x00\\x00\\x00\\xef\\xff\\xdc0\\x7f\\xfe\\xff\\xe0\\x0e\\x00\\'\\xc1\\x80\\x00\\x00\\x00\\x00\\x1f\\xff\\x00\\x00\\x00\\x00\\xc3\\xff\\xc7\\xbf\\xff\\xe3\\xff\\xe0\\x07\\x00\\'\\x07\\xf0\\x00\\x00\\x00\\x00\\x07\\xef\\x00\\x00\\x00\\x00\\xc3\\xfcg\\x8f\\xfe\\xd2\\x7f\\xc0g\\x00 \\x0f\\xfc\\x00\\x02\\x00\\x00\\x00\\x0f\\x00\\x00\\x03\\xc0\\xc4\\xec\\x1b\\x87\\xfe\\xb5\\xcf\\xc0g\\x00`\\x07\\xfc\\x00\\x01\\x00\\x00\\x00\\x0f\\x00\\x00\\x07\\xf0\\xff\\xff\\xcf\\x83\\xbf\\xb1\\x87\\xc0?\\x80p?\\xc4\\x00\\x08`\\x00\\x00\\x0f\\x00\\x00/\\xf3\\xff\\xff\\xe2\\x00\\x1f\\xd7\\x82@?\\x80`?\\xe6\\x04\\x00 \\x00\\x00?\\x00\\x00w\\xe7\\xff\\xff\\xf0\\x00\\x0f\\xe3R@\\x02\\x00@?\\xff\\xb8\\x00\\x01\\x1f\\xf8?\\x00\\x00\\xe7\\xcc\\x7f\\xc7\\xfc\\x00\\x0f\\xfb\\xf2`\\x00\\x00@?\\xff\\xe0\\x07\\xc3\\x7f\\xf8\\x7f\\x00\\x07\\xe3\\xe8?\\x81\\xf8\\x00\\x06\\xff\\xb6`\\x00\\x00G\\xff\\xff\\x80\\x07\\xe7\\xff\\xff\\xff\\x00\\x07\\xfd\\xcc\\x0f\\xe0x\\x00\\x06\\x00\\xce`\\x00\\x00\\x9f\\xff\\xfc\\x06\\x07\\xe7\\xff\\xff\\xff\\x00\\x07\\xff\\x83\\xc7\\xe0\\x18\\x00\\x07\\x00\\xfe\\xc0\\x00\\x00\\x9f\\xff\\xfc|\\x1f\\xc7\\xff\\xff\\x7f\\x00\\x0f\\xff\\xf9\\xff\\xf0\\x0e\\x00\\x07\\xc0\\x7f\\xc0\\x00\\x00]\\xff\\x87\\xfc\\xdf\\xc7\\xff\\xff\\x7f\\x00\\x0f\\xff\\xfb\\xc7\\xf0\\x00\\x00\\x03\\xe0\\x1f\\xc0\\x00\\x00\\x9f\\xfc\\xcf\\xf9\\xff\\xc7\\xff\\xff\\xff\\x00?\\xdf\\xc0\\x0f\\xf8\\x00\\x00\\x03\\xf0\\x0f\\xe0\\x00\\x00\\x9f\\x10\\xff\\xf3\\xff\\xc7\\xff\\xff\\xff\\x00\\x1f\\x00\\x00?\\xfc\\x00\\x00\\x01\\xfe\\x1f\\xe0\\x00\\x00\\xbf\\x00\\xff\\xf3\\xff\\xc7\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\xff\\xfc\\x00\\x00\\x01\\xff\\xfcp\\x00\\x00\\xbf\\x00\\x7f\\xe7\\xff\\x87\\xff\\xff\\xff\\x00\\x00\\x00\\xff\\xfc&gt;\\x00\\x00\\x01\\xff\\xfc8\\x00\\x00\\xbe@\\x7f\\xe7\\xff\\x87\\xef\\xff\\xff\\x00\\x00\\x0f\\xff\\xe0\\x1e\\x00\\x00\\x00\\xf7\\xfcp\\x00\\x00\\\\@\\x7f\\xe7\\xff\\x87\\xcf\\xff\\xff\\x00\\x00\\xff\\xff\\xc0\\x1f\\x00\\x00\\x00\\x03\\xff\\xf0\\x00\\x00``\\xff\\xe3\\xff\\x07\\xcf\\xff\\xff\\x00\\x1f\\xff\\xfe\\x00\\x1f\\x00\\x00\\x00\\x1f\\xff\\x9f\\x00\\x00p`\\xff\\xe1\\xff\\x07\\x9e?\\xff\\x03\\xff\\xff\\x80\\x00\\x0f\\x80\\x00\\x03\\xff\\xff\\x0f\\xc0\\x00\\x0cl\\xff\\xe6\\xba\\x83\\x9c?\\xff?\\xff\\xf8\\x00\\x00\\x0f\\x80\\x00\\x03\\xf9\\xfe\\x03\\xe0\\x00\\x06.\\xff\\x8e\\x02\\xa1\\x80\\xbf\\xff\\xff\\xff\\xfc\\x00\\x00\\x0f\\x80\\x00\\x07\\xf8~\\x03\\xe0\\x00\\x02-\\xffp\\xcd\\xbcp\\x7f\\xff\\xff\\xff\\xf0\\x00\\x00\\x07\\xc0\\x00\\x03\\xf8=\\t\\xe0\\x00\\x01\\r\\xee\\xc0;\\xfep\\xff\\xff\\xff\\xff\\x80\\x00\\x00\\x07\\xc0\\x00\\x01\\xf8\\x05\\x08\\x00\\x00\\x00\\xeb\\xcc0xv\\xb3\\xff\\xff\\xff\\xfe\\x00\\x00\\x00\\x03\\xe0\\x00\\x00\\xfc\\x01\\x00@\\x80\\x00s\\x8c@\\x00Q&gt;\\xff\\xcf\\xff\\x0c\\x00\\x00\\x00\\x03\\xe0\\x00\\x03&gt;1\\xc7\\x81\\xc0\\x00`\\xf9\\xff\\xff\\x80\\x1c\\xff\\xbf\\xff\\x04\\x00\\x00\\x00\\x01`\\x00\\x03\\x8f\\x98\\xd8\\x03\\x80\\x00 \\x05\\xf8 \\x00\\x84\\xbe\\x7f\\xf0\\x00\\x00\\x00\\x00\\x00p\\x00\\x03\\xc7\\xe8\\x18\\x0f\\x80\\x00&lt;\\xfd\\xc0\\x03\\x98\\x03\\xec?\\xf0\\xc0\\x00\\x00\\x00\\x00\\xf8\\x00\\x07\\xe3\\xe0\\xff\\x0f\\x00\\x00\\x15\\xfc\\x1c\\x13\\xd8\\x00\\x1f\\xff\\xf0\\xe0\\x00\\x00\\x00\\x00\\xf8\\x00\\x02\\xf9\\xf1\\xff\\xff\\x00\\x00\\x11\\xf8\\xfe?\\xc0\\x18\\xc0\\x7f\\xc0@\\x00\\x00\\x00\\x00|\\x00\\x02\\xfc\\xfc\\xff\\xfe\\x00\\x00\\x08y\\xfe\\xff\\xc0\\x10\\xc0\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x1c\\x00\\x01\\xfe??\\xf4\\x00\\x00\\x0c\\x07\\xff\\xff\\xcc0\\x80\\x1f\\x80\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x01\\xfe\\x8f\\xbf\\xfc\\x00\\x00\\x04\\xcd\\xff\\xef\\x9c \\x80\\x1f\\xec\\x00\\x00\\x00\\x00\\x00\\x0e\\x00\\x07~\\xc0\\xff\\xf8\\x00\\x00\\x02\\xfe\\xff\\xff\\xf8\\x01\\x80\\x0f\\xf0\\x00\\x00\\x00\\x00\\x00\\x07\\x00\\x07~\\x00\\x7f\\xf0\\x00\\x00\\x02\\xfe\\x1f\\xf3\\xf8\\x00\\x80/\\xe0\\x00\\x00\\x00\\x00\\x00\\x07\\x00\\x07\\xff\\x7f\\xf3\\xe0\\x00\\x00\\x01~\\x00y\\xf0\\x01\\x00O\\xc0\\x00\\x00\\x00\\x00\\x00\\x01\\xc0\\x07\\xf7\\xdaB\\x9e\\x00\\x04\\x01&gt;\\x07&gt;\\xf0\\x00\\x00O\\x8c\\x00\\x00\\x00\\x00\\x00\\x00\\xc0\\x0f\\xfc\\x00\\x02?\\x80\\x06\\x01\\x9f\\x0e\\x00\\x00\\x00\\x00\\x8f\\x1c\\x00\\x00\\x00\\x00\\x00\\x00p\\x0f\\xfc\\x00\\x80\\x7f\\x00\\x06\\x00\\x83\\x07\\x1e\\x00\\x00\\x00\\x8f:\\x00\\x00\\x00\\x00\\x00\\x00p\\x1f\\xfe\\x00p\\xff\\x00\\x04\\x00\\xcd\\x06\\x7f\\xce\\x10\\x01\\x8f8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1f\\xbe\\x01\\xc3\\xff\\x00\\x00\\x00_\\x81\\xff\\xf1\\xb8\\x03\\x8f\\x1c\\x00\\x00\\x00\\x00\\x00\\x00\\x00?\\x9e\\x07\\xd8\\xfe\\x00\\x00\\x00/\\xc1\\xff\\xfe\\x07\\xf7\\x0f\\xcc\\x00\\x00\\x00\\x00\\x00\\x00\\x00?\\xdf\\x1eb\\x7f\\x00\\x00\\x00\\x17\\xe7\\xff\\xff\\xf1\\xfe\\x0f\\xc0\\x00\\x00\\x00\\x00\\x00\\x00\\x00?\\xfb\\x07\\xe9\\x1f\\x00\\x00\\x00\\x17\\xff\\xff\\xff\\xfc\\x1b\\x8f\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00?\\xc3\\xcd\\xf0\\x8e@\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\x83\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00?\\x87\\xf1\\xf0`\\x00\\x00\\x00\\x0b\\xff\\xff\\xff\\xff\\xfe\\x7f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1f7\\xf9\\x880\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xcf\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00?\\x03\\xf2\\x02\\x18\\x00\\x00\\x00\\x04C\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1fE\\xe4\\x05\\x1e\\x00\\x00\\x00\\x04\\x1f\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1f\\x00u\\x00\\x8f\\xc0\\x00\\x00\\x04\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1f\\x00Q\\x00F \\x00\\x00\\x02\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x00d\\x81\\xb0\\x00\\x00\\x00\\x02\\xc9\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xc03\\x83\\x9d\\x80\\x00\\x00\\x02\\x00?\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\xc01\\x80\\x8f\\x00\\x00\\x00\\x02\\x00\\x0f\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x07\\x80\\x1e\\x00o\\x80\\x00\\x00\\x02@\\x03\\xff\\xff\\xff/\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0e\\x07\\x80\\x00\\x00?\\x80\\x00\\x00\\x02d\\x01\\xff\\xff\\xfe?\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1e\\x07\\x00\\x00\\x00\\x1f\\x00\\x00\\x00\\x02 \\x00\\x1f\\xff\\xff\\xff\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x1f\\x07\\x00\\x00\\x00o\\x00\\x00\\x00\\x03\\xe0\\x00\\x0f\\xff\\xff\\xff\\xe0\\x00\\x00\\x00\\x00\\x00\\x00&gt;\\x07\\x00\\x00\\x00?\\x80\\x00\\x00\\x03\\x00\\x00\\x03\\xff\\xff\\xffp\\x00\\x00\\x00\\x00\\x00\\x00&gt;\\x07\\x00 \\x00?\\xc0\\x00\\x00\\x07\\x84\\x00\\x00\\x03\\xff\\xff\\xfc\\x00\\x00\\x00\\x00\\x00\\x00~\\x07\\x00\\x00\\x00/\\x00\\x00\\x00\\x07\\xe3\\x00\\x00\\x03\\xff\\xff\\x7f\\x00\\x00\\x00\\x00\\x00\\x00~\\x0f\\x00\\x00\\x00\\x1f\\x00\\x00\\x00\\x07\\xe1\\xe2\\x00\\x03\\xff\\xff\\xf7\\x80\\x00\\x00\\x00\\x00\\x00\\x7f\\x0e\\x00\\x00 \\x1e\\x80\\x00\\x00\\x07\\xf0\\xf0\\x00\\x01\\xf8?\\xcf\\xc0\\x00\\x00\\x00\\x00\\x00?\\x0e\\x00\\x00\\x0e?\\xe0\\x00\\x00\\x0f\\xff\\xf8\\x00@ \\x0f\\xe3\\xf0\\x00\\x00\\x00\\x00\\x00\\x13\\x1c\\x00\\x00\\x0f\\xbf\\xa0\\x00\\x00\\x0f\\xff\\xff\\xe0\\x00\\x00\\x0f\\xf1\\xf8\\x00\\x00\\x00\\x00\\x00&gt;\\x1c\\x00\\x00\\x0f\\xcf\\x80\\x00\\x00\\x0f\\xfe?\\xf0\\x00\\x00\\x0f\\xfex\\x00\\x00\\x00\\x00\\x00\\x10\\x1f\\x00\\x00\\x0f\\xe4\\x00\\x00\\x00\\x0f\\xe0\\x1f\\xfc\\x00\\x00\\x0f\\xff6\\x00\\x00\\x00\\x00\\x000\\x1e\\x00\\x00\\x0f\\xfe\\x00\\x00\\x00\\x1f\\x00\\x0f\\xf0\\x00\\x00\\x0f\\xff\\xdf\\x80\\x00\\x00\\x00\\x00\\x00\\x1e\\x02\\x00\\x0f\\xbf\\x80\\x00\\x00\\x00\\x01\\xe0`\\x00\\x00\\x0f\\xfd\\xe7\\xc0\\x00\\x00\\x00\\x002\\x1e\\x02\\x00\\x1f\\x80\\xc0\\x00\\x00\\x00&gt;\\x00\\x00\\x00\\x00\\x0f\\xff\\xfb\\xe0\\x00\\x00\\x00\\x00\\x00\\x0c\\x00\\x00\\x0f\\x1f\\xe0\\x00\\x00\\x00`\\x00\\x06\\x00\\x00\\x0f\\xff\\xfd\\xb0\\x00\\x00\\x00\\x00\\x00\\x1e\\x00\\x00\\x1e\\x1f\\xf0\\x00\\x00\\x01\\x80\\x00\\x00 \\x00\\x7f\\xfc\\x00 \\x00\\x00\\x00\\x00\\x00\\x07\\x80\\x00 _\\xf0\\x00\\x00\\x0f\\x80\\x00\\x001\\xc0\\x1f\\x1f\\xff0\\x00@\\x00\\x00\\x00\\x01\\x80\\x00\\x00\\x8fx\\x00\\x00\\x1c\\x80\\x03\\x00{\\xe4\\x7f\\xfc\\x03\\x88\\x000\\x00\\x01\\x00\\x01\\xc0\\x00 \\x00\\x18\\x00\\x00\\xf0\\x00\\x03\\xe0\\x1f\\xff\\xff?\\xff\\xf8\\x06\\x1c\\x00\\x03\\x80\\x07\\xc0\\x00 \\x00`\\x00\\x03\\xc0\\x10\\x01\\xf3\\xef\\xff\\xff\\xff\\xc0&gt;\\x03\\x8e\\x00\\x01\\x01\\x07\\xc0\\x00\\x10\\x040\\x00\\x06\\t\\x00\\x03\\xff\\x7f\\xff\\xff\\x81\\xff\\xc3\\x81\\xff\\x80\\x01\\x06\\x03\\xe0\\x00 ?\\xc0\\x00\\x08\\x00\\x04\\x01\\xff\\xff\\xff\\xff&gt;\\x00\\x1e@\\xff\\xc0\\x00\\x06\\x01\\xe0\\x00!\\xff\\xc0\\x00\\x08\\x00\\x01\\xe0\\x1f\\xff\\xff\\xff\\xe7\\xf1\\xff\\xa0\\x7f\\xe0\\x00\\x06\\x01\\xf8\\x00\\x81\\xff\\xc0\\x00\\x0c\\x08\\xe7\\xde\\x9f\\xff\\xff\\xff\\xff/\\x80\\x08\\x1f\\xf0\\x10\\x0f\\x01\\xf8\\x00A\\xff\\xc0\\x00\\x0c?\\xff\\xff\\xdf\\xff\\xff\\xff\\x0f\\xe0\\xff\\xfc\\x0f\\xfb\\xf8\\x8f\\x03\\xf8\\x00\\x01\\xff\\x80\\x00\\x0c\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\xff\\xff\\xff\\x07\\xfb\\xfc\\x0f\\x07\\xf0\\x00\\x03\\xff\\xc0\\x00\\x06\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xfb\\xff\\xff\\xff\\xc1\\xf3\\xfc\\x07\\x8f\\xf0\\x00\\x03\\xff\\xc0\\x00\\x07\\xdf\\xff\\xff\\xff\\xff\\xff\\xff\\xf3\\xff\\xff\\xfc\\xe0\\xcf\\xfe\\x03\\x87\\xf0\\x00\\x01{\\xc0\\x00\\x03\\xf7\\xff\\xff\\xff\\xff\\xff\\xff\\xfe\\x7f\\xff\\xfcx\\x1c\\x06\\x07\\x07\\xd0\\x00\\x00{\\x80\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfc8\\x06\\x07\\x8b\\xc0\\x00\\x02?\\xc0\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfe8|\\t\\x8b\\xc0\\x00\\x00\\x7f\\xe0\\x00\\x03\\xc0\\x00\\x1f\\xff\\xff\\xff\\xff\\xff?\\xff\\xff\\xff\\x87\\xc0\\x07\\x87\\xc0\\x00\\x04\\xff\\x80\\x00\\x00\\x00\\x00\\x1b\\xff\\xff\\xff\\xff\\xff\\xef\\xff\\xff\\xff\\xc0\\x00\\x03\\x87\\x80\\x08\\x04\\xff\\xe0\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff?\\xff\\xff\\xff\\xff\\xe0\\x00\\x03\\x87\\xc0\\x1c\\r\\xff\\xc0\\x00\\x00\\x00\\x00\\x00\\x1f\\xff\\x80\\xff\\x7f\\xfb\\xff\\xff\\xff\\xf0&gt;\\x03\\x87\\xc0\\x0f\\xe9\\xff\\xc0\\x00\\x00\\x00\\x00\\x00\\x07\\xc1\\xfd\\x8f')\nimg_red = bytearray(b\"\\x00\\x00\\x00\\x00\\x00\\xff\\xfe\\x0f\\xfd\\xff\\xff\\xfe\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x7f\\xfe\\x03\\xff\\xff\\xff\\xfe?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00?\\xfc\\x00\\xff\\xff\\xff\\xfe\\x0f\\xfc\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x06\\x0e\\x00\\x07\\xff\\xff\\xff\\x1f\\xf8\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\x9f\\xe0\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\x0f\\xff\\xff\\xff\\x8f\\xe0\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x0e\\xff\\xff\\xff\\xc7\\xc0\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xef\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00O\\xff\\xff\\xff\\xff\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xf7\\x7f\\xbf\\xfe\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xef\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\xe7\\xeb\\xff\\xec\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xe3\\xe7\\xff\\xf8\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\xcf\\xff\\xf8\\x00\\x07\\xf3\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x1f\\xef\\xf0\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xe3\\xe0\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\xff\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02&gt;\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00p\\x00\\x0f\\x00\\x08\\x00\\x00\\x00\\x06\\xff\\xff\\xff\\xdf\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x07\\xf8 \\xff\\x80\\x00\\x18\\x00\\x00\\x06\\x7f\\xff\\xff\\xbf\\xff\\xff\\xfb\\xff\\x00\\x00\\x00\\x00\\x00\\x0f\\xf88\\xff\\x80\\x00X\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x1f\\xfc\\x18?\\x80\\x02H\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xef\\x00\\x00\\x00\\x00\\x00\\x1c|\\x1c\\x0f\\x80\\x13\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x1f\\x00\\x00\\x00\\x00\\x00\\x00|\\x0e\\x07\\x00\\x06\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\xfc\\x07\\x00\\x00\\x04\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\xff\\xf8\\x03\\x00\\x00\\x06\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xc8\\x7f\\x00\\x00\\x00\\x00\\x00\\x7f\\xfe\\x00\\x01\\x80\\x04\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xfc\\x03\\xff\\x00\\x00\\x00\\x00\\x00\\x1f\\xfe\\x00\\x01\\x80\\x0c\\x00\\x00\\x00\\x03\\xfd\\xfe\\x7f\\xff\\xff\\xf0\\x07\\xff\\x00\\x00\\x00\\x00\\x00\\x0f\\xfe\\x00\\x0f\\x80\\x08\\x00\\x00\\x00\\x03\\xff\\xfe\\x0f\\xff\\xff\\xf0\\x7f\\xef\\x00\\x00\\x00\\x00\\x00\\x07\\xfe\\x80\\x03\\x80\\x00\\x00\\x00\\x00\\x03\\xff\\xfe\\x07\\xff\\xff\\xff\\xfe\\x0f\\x00\\x00\\x00\\x00\\x00\\x03\\xfe\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x07\\xff\\xfe\\x03\\xff\\xff\\xff\\xf0\\x7f\\x00\\x00\\x00\\x00\\x00\\x01\\xfe\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\xff\\xfe\\x00\\xff\\xff\\xff\\xc7\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\xff\\xfe\\x00\\xff\\xff\\xff?\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xfc\\x00\\xff\\xff\\xfe\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00&gt;\\x00\\x00\\x02\\x02\\x00\\x00\\x00\\x0f\\xff\\xbe\\x01\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\x0f\\xff\\x9e\\x03\\xff\\xff\\xf7\\xcf\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\x06\\x07\\xff\\xff\\xef\\xc7\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\x80\\x00\\x01\\x80\\x00\\x00\\x00\\x0f\\x80\\x00\\x0f\\xff\\xff\\xff\\xa3\\xff\\x00\\x00\\x00\\x00\\x00 \\xcf\\x80\\x00\\x00\\x80\\x00\\x00\\x00\\x0f\\xc0\\x00\\x1f\\xff\\xff\\xff\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\xc0\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xe3\\xe7\\xff\\xff\\xff~\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\xc0\\x00\\x00\\x00\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x1c\\x00\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\x1f\\x00\\x00\\x00\\x00\\x00\\x03\\x80p\\x01?\\x80\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x03\\xe0x\\x01{\\xb0\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x000|@{\\xf8\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x1d\\xff\\xe0;\\xfd\\x80\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xf0\\x1f\\xbd\\x80\\x00\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\x808\\x03\\xff\\xf0\\x07=\\x80\\x00\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x07\\xc0~\\x07\\xff\\xf8\\x00y\\x80\\x00\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\xf0\\x1f\\x87\\xff\\xf8\\x001\\x80\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x008\\x1f\\xe7\\xff\\xf8\\x00\\x01\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x0f\\xf1\\xff\\xf8\\x00\\x00\\x00\\x00\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xfc\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x07\\xff\\xff\\xfc\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x03\\xff\\xff\\xfe\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x03\\xff\\xff\\xfe\\x00\\x03\\x80\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x03\\xc1\\xff\\xff\\xfe\\x00\\x03\\xc0\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x1f\\xe1\\xff\\xff\\xff\\x08\\x03\\x80\\x00\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00?\\xe0\\xff\\xff\\xff\\xfc\\x00\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x01\\xff\\xe0\\xff\\xff\\xff\\xe0\\x00`\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x7f\\xff\\xf0\\x7f\\xff\\xfc\\x00\\x00\\xf0\\x00\\x00\\x03\\xf3\\xff\\xf9\\xff\\x7f\\xff\\xff\\xff\\x00\\x00\\x07\\xff\\xff\\xf0\\x7f\\xff\\xfc\\x06\\x01\\xfc\\x00\\x00\\x01\\xf1\\xff\\xf1\\xff\\x7f\\xff\\x7f\\xff\\x00\\x00\\x03\\xff\\xff\\xf0\\x7f\\xff\\xf8\\x07\\x81\\xfc\\x00\\x00\\x01\\xf3\\xff\\xff&gt;s\\x8f\\xff\\xff\\x00\\x00\\x0f\\xff\\xff\\xf8?\\xff\\xfc\\x07\\xc3\\xfe\\x00\\x00\\x00\\xf3\\xff\\xff\\xfcq\\x8f\\xff\\xff\\x00\\x00\\x7f\\xff\\xff\\xf8?\\xff\\xfe\\x07\\xfb\\xff\\xc0\\x00\\x00\\x17\\xff\\xcf\\xff\\xf9\\xcf\\xff\\xff\\x00\\x01\\xff\\xff\\xff\\xfc\\x1f\\xff\\xff\\x03\\xff\\xff\\x80\\x00\\x00\\x0f\\xff\\xff\\xff\\xfe\\xff\\xff\\xff\\x00\\xf3\\xff\\xff\\xff\\xfc\\x1f\\xff\\xff\\xc1\\xcf\\xf8\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xcf\\x00\\xfb\\xff\\xff\\xff\\xfe\\x9f\\xff\\xff\\xf0g\\xe0\\x00\\x00\\x00\\x1f\\xfb\\xff\\xff\\xff\\xff\\xff\\x9f\\x0f\\xff\\xff\\xff\\xff\\xff\\x8f\\xff\\xff\\xf8\\x17\\xe0\\x00\\x00\\x00\\x03\\x03\\xff\\xfcg\\xff\\xff\\xff\\x0f?\\xff\\xff\\xff\\xff\\x07\\xff\\xff\\xfc\\x1f\\x00\\x00\\x00\\x00\\n\\x03\\xe3\\xec\\'\\xff\\xff\\xff\\x0f\\x1f\\xff\\xff\\xff\\xff\\x07\\xff\\xff\\xfe\\x0e\\x00\\x00\\x00\\x00\\x0e\\x07\\x01\\xc0?\\xe7?\\xff?\\xbf\\xff\\xff\\xff\\xff\\x83\\xff\\xff\\xff\\x03\\x00\\x00\\x00\\x00\\x07\\x86\\x01\\x00?\\xef?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe3\\xff\\xff\\xff\\xc0\\xc0\\x00\\x00\\x00\\x03\\xf8\\x00\\x003\\xcf\\x7f\\xef\\x7f\\xff\\xff\\xff\\xff\\xff\\xf7\\xff\\xff\\xff\\xf0@\\x00\\x00\\x00\\x03\\xfe\\x00\\x10c\\xdf\\x7f\\xef\\x13\\xff\\xff\\xff\\xff\\xff\\xf1\\xff\\xf8\\xff\\xff\\x00\\x00\\x00\\x00\\x01\\xff\\x00\\x00\\x07\\xfe\\x7f\\xff\\x0f\\xff\\xff\\xff\\xff\\xff\\xf8\\xff\\xf8\\xff\\xff\\x80\\x00\\x00\\x00\\x01\\xff\\xe0\\x0c\\x07\\xff\\x7f\\xdf\\x1f\\xff\\xff\\xff\\xff\\xff\\xf8\\xff\\xf8?\\x80\\x0c\\x00\\x00\\x00\\x00\\xff\\xff\\x86\\x0f\\xfe\\xff\\xbf?\\xff\\xff\\xff\\xff\\xff\\xfe?\\xf8\\x0f\\xa5\\xbc\\x00\\x00\\x00\\x00\\xff\\xff\\xc1\\x0f\\xff\\xff\\xbfs\\xff\\xff\\xff\\xff\\xff\\xff?\\xf0\\x03\\xff\\xfc\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\x7f\\xe3\\xff\\xff\\xff\\xff\\xff\\xff\\x8f\\xf0\\x03\\xff\\xf8\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\x7f\\xc5\\xff\\xff\\xff\\xff\\xff\\xff\\x8f\\xe0\\x01\\xff\\x80\\x00\\x00\\x00\\x00?\\xff\\xff\\xf1\\xef\\xfe\\x7f\\xc7\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x01\\xfe\\x00\\x00\\x00\\x00\\x00?\\xff\\xff\\xfeG\\xfc\\x7f\\xe3\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x01\\xf8\\x00\\x00\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xf8\\x08\\xff3\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x00\\xe1\\x8c\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xfe\\x01\\xff?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x00\\xf8\\x06\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xe0\\x7f\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x002\\x0f\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xfc\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x00\\x0e\\x0f\\x80\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\x8f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x00\\x06\\x07\\xc0\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x00\\x0c\\x01\\xe0\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x00\\x18\\x00\\xe0\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x00\\x18\\x00p\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x00&lt;\\x009\\xc0\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf0\\x00\\x18\\x00\\x0f\\x80\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf0\\x00\\x0c\\x00\\x02\\x00\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\x00\\x0e\\x00\\x00\\x00\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf9\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xbf\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf1\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x9b\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe1\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xdf\\xff\\xff\\xff\\xff\\xff\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xc1\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\x8f\\xff\\xff\\xff\\xff\\xff\\xff\\xc1\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00{\\xff\\xff\\xff\\xff\\xff\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\x81\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1c\\xff\\xff\\xff\\xff\\xff\\x80\\xff\\xff\\xff\\xff\\xff\\xff\\x81\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1e\\x1d\\xff\\xff\\xff\\xff\\x08\\x7f\\xff\\xff\\xff\\xff\\xff\\x80\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x0f\\xff\\xff\\xff\\xff\\x00?\\xff\\xff\\xff\\xff\\xff\\xc0\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\xff\\xbf\\xff\\xff\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xec\\xe0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xc1\\xe0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xef\\xe0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\x00\\t\\xff\\xff\\xff\\xff\\xff\\xcf\\xe0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xe0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1f\\x9f\\xff\\xff\\xff\\x02\\x00?\\xff\\xff\\xff\\xff\\xcd\\xe0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1f\\xff\\xf9\\xff\\xff\\xff\\x00\\x00O\\xff\\xff\\xff\\xff\\xff\\xe0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xdf\\xff\\x8f\\x03\\xff\\xdf\\xff\\xff\\xff\\xff\\xff\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xce?\\xef\\xff\\xff\\xcf\\xff\\xff\\xff\\xff\\xff\\xfe\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x7f\\xfc\\xff\\x84\\x1b\\x8f\\xff\\xfc\\x07\\xff\\xff\\xff\\xff\\xff\\xfe\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xfc\\x1f\\xe0\\x00\\x0f\\xc0\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00?\\xef\\xfe\\x0c\\x10\\x00\\x0f\\x00?\\xff\\xff\\xff\\xff\\xff\\xfe\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xf6\\xff\\xfc\\x00\\x80\\x00\\x0f\\x7f\\xff\\xfc\\x7f\\xff\\xff\\xff\\xf9\\xfc\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\xff\\xfb\\xfe\\x00\\x00\\x00\\x0f\\xff\\xff\\xe0?\\xff\\xff\\xff\\xf9\\xfe\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\xff\\xfe\\x1f\\xe0\\x00\\x00\\x0f\\x18\\x0e\\x00\\x1f\\xff\\xff\\xff\\xf9\\xfe\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\xf7\\x18!`\\x00\\x00\\x0f\\x00\\xd0\\x7f\\xff\\xff\\xff\\xef\\xf0\\xfe\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\xc0\\x00\\x00 \\x00\\x00\\x0f\\xf0\\x1f\\xff\\xff\\xff\\xfc\\x07\\xf0\\xfc\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\xe0\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xfc\\x03\\xf0\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xe0\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xfc\\x03\\xf8p\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xf0\\x01\\xfcx\\x00\\x00\\x00\\x84\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xe0\\x01\\xf8\\xf8\\x00\\x00\\x01\\x84\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xc0\\x01\\xf8t\\x00\\x00\\x01\\xc0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xc0\\x03\\xf6t\\x00\\x00\\x03\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xf8?\\xf8x\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfcx\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfcx\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xc1\\xfcx\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&gt;\\x02\\x7f\")\n</code></pre> <p>IMG_0182_bw_d.py</p> <pre><code>width = 184\nheight = 135\nimg_bw = bytearray(b'\\x00\\x00\\x00\\x00\"\\xff\\xb5\\x15\\xaa\\xfd\\xbb\\xda\\xbf\\xff\\x7f\\xbd\\xdd\\xde\\xf7\\xf7\\xef\\xde\\xdf%UUU\\x14z\\xd5J\\xb5\\xba\\xedm?\\xf5J\\xf6\\xaa\\xbb]_Z\\xb5_\\x08\\x00\\x00\\x00\\x81\\x15,*\\xab{U\\xb5E\\xea7]\\xdfn\\xd6\\xed\\xefwoAR\\xaa\\xaa*J\\xabA-\\xf5\\xb6\\xed-t\\x9a\\xbfU\\xb7{[z\\xda\\xbf\\x10\\x04\\x00\\x00\\x80\\x95Q,\\x96\\xbf\\xd5V\\xb7\\xe2\\x16\\xff\\xeb\\xed\\xae\\xed\\xafm_D\\x90\\x95T$\"\\x04\\x86\\xaa\\xee\\xd5{J\\xd4\\xad\\xff\\xfd{\\xdf\\xb5\\xfa\\xdbO\\x10\\x04\\x00\\x02\\x82\\x89A)Uo\\xda\\x95\\xaa\\x82\\x1f\\xed\\xfb\\xae\\xf6\\xebW\\xb5\\x7fBQUP( \\x88\\x84\\xaa\\xfbon\\xb6\\xa9[\\xf6\\xbe\\xfb_\\xbd\\xfdm\\x8f\\x10\\x04\\x00\\x05\\x01\\n\"!+\\xadR\\xbbU$\\x0e\\xfb_\\xaf\\xb5\\xf6\\xaf\\xb5\\x7fE!$\\x90\\xa4@\\x91T\\x0e\\xea\\xad\\xad\\xea\\x92\\x9f]\\xaf\\xfa\\xfe\\xbb\\xf5k\\xaf\\x10\\x08A\\n\\x01)*!%\\xd5j\\xb5,P\\x05\\xb6\\xd6\\xbfWm^\\xda\\xafD\\xa2\\x12@\\xa8\\x00\\x04\\x94\\x02S\\xd5]\\xb5J\\xa7[o\\xd7\\xfd\\xfb\\xf5\\xb5\\xbf\\x11\\x00\\x80\\x14\\x02J\\xa9UHJ\\xaa\\xd6\\xd1A\\x05\\xe5_}Wm[n\\xdfD\\x12*\\x81P\\x10\\x04$\\x80\\x02\\xadUU*%Z\\xef\\xaf\\xed\\xbb\\xef\\xb5o\\x11@@$\\x04\\x82B\\x92R\\xa8UUR\\x10\\x96\\xeb\\xbe\\xef{\\xedZ\\xdb\\xbf\\x04\\t\\x12A\" \\x14\\xaa\\x80\\x02\\x15j\\xa1U\\x03\\xbd\\xd7_\\xaf[\\xbfmOQ \\x04\\x14H\\tB\\xa4UQ%UH\\xa0V\\xd5k\\xb5\\xf7\\xf6\\xea\\xab\\x7f\\x04\\x04\\xa1A\\x02\\x80\\x14\\x95P\\x08\\x82U\"U\\x05\\xebz\\xbd[\\xbbZ\\xb5O!P\\x08\\x08P%J\\xaa\\xadR\\x11D\\x89B&amp;\\xb6\\xadko\\xddv\\xd5\\x7f\\x08\\x02\"B\\x04\\x80!RU\\tM\\x12\\x80\\x90\\x92\\xed\\xb6\\xb6\\xaf\\xeb\\xaa\\xad\\xafB\\xa8\\x84\\x10\\x90\\n\\xdc\\xaa\\xaa\\xa4\\xaaJ$\\n\\x15^\\xd5\\xdb\\xbf]\\xf6\\xb5_\\x10\\x00\\x11D\\x01%\\xb2UUB\\xa9h\\x81@\\xa5kkn\\xbf\\xf6\\xaa\\xd5\\xbfEJ@\\x11H\\x16\\xd9Un\\x89%T$(\\x15\\xae\\xdb\\xbb\\x7f[[V\\xcf\\x00\\x10\\x05\\x04\\x00[l\\xaa\\xb5D\\x9a\\xaa\\x90\\x82\\xa2\\xb5\\xbc\\xed\\xfb\\xed\\xadj\\xbf*\\x82\\x90P$*\\xb5\\x1aO\"\\xa5TD\\x10\\x0bZ\\xfb\\xfd\\xffUj\\xadO\\x00(\\x01\\x01\\x01D\\xac\\xab)\\x88\\x9a\\x82\\x12D\\xa2\\xd7\\x7f\\xff\\xff\\xdbZ\\xb6\\xbfI\\x02H\\x10$\\xb2\\xb5UU\"JP\\x81\\x00\\x05]\\xdf\\xff\\xfdj\\xaa\\xca\\xaf\\x00P\\x02B\\x02\\xadT\\xaa\\x8a\\x88\\xaa\\x84(\"\\x12\\xab{\\xef\\xff\\xabmU_)\\x05P\\x00IV\\xea\\xaa\\xa5B\\x15\\x01\\x05\\x08C\\xd6\\xd6\\xbf\\xfa\\xed\\xaa\\xaa\\xbf\\x00@\\x02H\\x12Z\\xaeT\\x15\\xa9UP @\\n\\xba\\xad_\\xfdUT\\xa5\\xcfI\\x11\\x08\\x01A+uJ\\xaa\\x92*\\x04\\x89\\x04\\x85\\xd5\\xb6%\\xb6\\xdbj\\xb6_\\x00\\x04 \\x84TJ\\xaa\\xa8KI\\x11\\x90 \\x10\\x05^\\xda\\x96\\xfbm\\xaa\\xd5_$@\\x02\\x11I%\\xb6\\xa5\\x05T\\xac\\x82\\x92\\x01\\x15\\xab\\xadCo\\xb6\\xdbU_\\x01\\x02H\\x02\\xa4\\x95Z\\x90\\xa8\\x92\\x02H$@\\x06\\xde\\xb5(\\xfa\\xdbmUo$\\x10\\x00A*%mJ\"IU\"@\\x08Kk\\\\\\x81_u\\xb5V\\xaf\\x00B\"\\x04IJ\\xab$\\x89U%D*\\x81\\n\\xb6\\xd5T\\xe9\\xde\\xd6\\xab\\x7fH\\x00\\x00\\x00$)Z\\x88%J\\x92!\\x12 \\r\\xabZ#V\\xb5\\xb5Z\\x9f\\x01\\x12H\\x11\\x15\\xa5mB\\x92\\xaaJ\\x90H\\x84+]UMZ\\xdbU\\xaa\\xdfD\\x00\\x00@D\\x95U *UQ%\\x04\\x10\\x15\\xa5U%\\xeam\\xaa\\xd5_\\x10D\\x01\\x02\\x02\\xaa\\xab\\x89\\x15B\\x84\\x00\"\\x81\\x15U$\\x9b[V\\xaf*\\xaf\\x00\\x00\\x90\\x00\\x92UU@\\x8a*\\xa2\\xa8\\x08HV\\xa0\\x89-\\xaa\\xbbt\\xaa\\xafD\\x90\\x00\\n)UJ\\xaa!QJ\\x01 \\x00\\x1f\\xde\\xd6\\xf6\\xb5mV\\xa4\\x9f\\x10\\x02\\x00 \\x85%%@\\x95\\x08$\\xa0\\nD\\x8be\\xb5\\xaa\\xdb\\xb6\\xb5UO\\x00\\x00\\x02\\x00BE\\n\\xb5$\\xb6\\x92I\"\\x00&gt;\\xbf\\xfbZ\\xae\\xda\\xdbj_\\x02H\\x08\\x89\\x11%\\xc2\\xd4\\x92\\xbbU\\x00E)\\x15\\xd6\\xde\\xd5wj\\xad\\xb5\\xafH\\x00! D\\x951*R\\xf7\\xa9D\\x12\\x80W{\\xf6\\xab\\xda\\xbbv\\xad\\x7f\\x00\\x00\\x04\\xa4\\x92EUUI9\\xed@\\x84\\t*\\xaf]V\\xbf\\xd5\\xabV\\xaf\\x02D\\xa5QU*\\xadj\\xe4\\xf7\\xb5 )@+\\x7f\\xf7\\xbd\\xd5v\\xdd\\xdb\\xdf \\x00\\x12\\xa4*\\xa9U\\xb6\\xb2\\x1b*\\x89\\x02\\x12Z\\xff\\xfd\\xebm\\xd5\\xb7u\\x7f\\x00\\x01E\\x07\\x85UU[T\\xa7{@\\x08\\x00V\\xbd\\xefv\\xdbk}\\xde\\xdf\\t\\x14P\\xa9qUK\\xad\\xe9\\x10\\xb5P\\x80\\x92_\\xef\\xfb\\xafw\\xd7\\xdf\\xfb\\xbf \\x02\\x8aE\\xaaV\\xaa\\xebtDR\\x82\\x10\\x00\\xbb\\xbf\\xdd{\\xadov\\xfe\\xff\\x00\\ti\\x02T\\x9a\\xab[\\xaa\\x11\\n\\xa0\\x02\\x94n\\xff\\xb7\\xad\\x7f\\xed\\xff\\xdb\\xbf\\x05$\\x95(\\x92*\\xd5v\\xf5@R\\x88@\\x01;\\xfe\\xed\\xfb\\xab\\xd7\\xf6\\xff\\x7f\\x00\\x05J\\xa2\\x08\\x8e\\xaa\\xbbZ\\x14\\x84@\\x08Ho{\\xbb]\\xffo\\xdf\\xff\\xff\\x014\\x89\\x08\\xa2Su\\xad\\xea\\xa0\"\\xa1\\x02\\x02_\\xac\\xef\\xf7\\xaf\\xdf{\\xfb\\x7f\\x10B  \\tE\\xae\\xab]\\n\\x8a\\x84 \\x90\\xfdu\\xfd\\xb6\\xfd\\xd7\\xffo\\xdf\\x01\\x08\\x04\\x05U*\\xb5\\xad\\xea\\xa0%P\\x02\\x04\\x7f\\xd6\\xdf\\xf7\\xff\\xaf\\xed\\xff\\x7f\\x00\\x00\\x11Q*\\xd2\\xd6\\xd5u\\x15K\\xa0\\x88A^\\xb9{\\xef\\xef\\xdd\\xb7\\xff\\xff\\x08\\x01B*\\xadU[u\\xadT\\x91J\\x00\\x146\\xeb\\xff\\xb6\\xbd\\xaf\\xdf\\xfe\\xff\\x01(\\x14\\xa5U\\xa9m\\xadj\\xdaD\\xa0\"A[l\\xef\\xfb\\xefU\\xef_\\xdf \\x05J\\x95UT\\xb5v\\xb5U)U\\x00\\x08\\n\\xf5\\xfe\\xeb}\\xaf]\\xbf\\x7f\\n\\xa9)j\\xaa\\xaa\\xd6\\xab\\xaa\\xaa\\x84\\xd4\\x92\\x82E\\xaa\\xfb\\xe9\\xabu\\xfa\\xbf\\xff@\\x92\\xaa\\xadj\\xd2[\\xddU\\x14\\xa9\\xb5@(\\x12\\xf3\\xff\\xaa\\xb6\\xabN\\xbd\\xff*JUU\\xadYmk\\xb4\\xabR\\xdd$\\x81B\\xaa\\xee\\xfa\\xadu%\\x7f\\xdf\\x95UU\\xaa\\xb6\\xaa\\xaa\\xadmUK\\xb6\\x82\\x10\\x11s\\xf7U|\\xb2\\xd6\\xf7\\xffR\\xaa\\xaa\\xb6\\xd5\\xaa]\\xd5\\xb6\\x95\\xb5\\xda\\xd0BD\\x97\\xda\\xab\\xd5y\\xab\\xffoJ\\xaa\\xadUZ\\xea\\xabz\\xda\\xa5W{B\\x00\\x00J\\xad\\xddz\\xd6\\xfe\\xdd\\xdf\\xaa\\xaa\\xb5\\xabWZ\\xadWWUU\\xd4\\x88\\x92\\xa47\\xfb\\xf7\\xaf\\xba\\x9b\\xf7_UUU]j\\xb5U\\xaa\\xb7\\xa9V\\xe0\\x02\\x00\\x01\\x1aJ\\xdduov\\xbe\\xaf\\xaa\\xaa\\xd6\\xaa\\xb5Z\\xae\\xfa\\xdb\\xe9WU \\x84HK%\\xea\\xaa\\x91\\xad\\xd5\\x7fUmZ\\xd5\\xae\\xedR\\x96\\xae\\xf5) \\x8a\\x10\\x00\\x14\\x96\\x95T\\xaa\\xd6\\xbf\\xbf\\xabU\\xabmkUV\\xeb[\\xba\\x96\\x95 AI\\nJ\\xa2\\xaaWSUoUV\\xb5V\\xb5\\xb6\\xabZ\\xb6\\xfdUH\\n\\x00\\x00ORJ\\x92\\xa9\\xad5\\xbf\\xaa\\xaa\\xdb\\xbb\\xde\\xdb\\xa9m\\xdb\\xf7Ue@\\t$\\x01\\xaa\\x92IV\\xaa\\xda\\xcfZ\\xb5UUR\\xadU\\xaa\\xb5\\xde\\xd5R(\\x80\\x00\\x95\\xfcI*\\xa2\\xd6m\\xaf\\xabV\\xadj\\xbd\\xb5\\xaa\\xd6\\xd5\\x7f\\xea\\xa8\\x92\\x04\\x92\\x02\\xdf$\\xaaU[V\\xdfUZ\\xd5\\xad\\xd6\\xda\\xd5kt\\xfaUE@ \\x00!\\xfe\\xd2UK\\xac\\xbb_\\xaa\\xd5z\\xb6\\xaa\\xafj\\xbd\\xaa?\\x95\\x14\"\\x02H\\x84\\xffm\\x95-UUOUV\\xad\\xd5[uZ\\xaa\\xe9N\\xad\\xad\\x08\\x88\\x02\\x01[_\\xaa\\xa5\\xb5{_\\xaa\\xaa\\xa6\\xae\\xed\\xabmWT%\\xf6\\xb4R \\xa4\\x10\\xbfV\\xd5Z\\xd5\\xadoV\\xb5\\xb5kUm\\xb6\\xaa\\xd5UJ\\xd0I\\x00\\x00DU\\xbf\\x7fUUj\\xbf\\xaa\\xd5U\\xb5{\\xb6\\xdbU\\xaa\\x05o%$I\\x12\\x01\\x7f\\xd6\\xff\\xea\\xaa\\xb5OU*\\xaa\\xad\\xadm\\xb6\\xab\\xd1R\\xd4\\x80\\xaa\\x00@\\x10-k\\xff\\xf5U\\xaa\\x7f\\xaa\\xd5[V\\xab\\xb6\\xdb\\xddT\\tRRQI\\x08\\x84\\x9f\\xd5\\xff\\xff\\xaaUOkV\\xd5j\\xdd[mkR\\xa2\\xd9H$\\x00\\x02\\x00\\x17\\xff\\xff\\xff\\xfa\\x8a\\xbf\\xadZ\\xad\\xb7km\\xb7\\xb6\\xc9\\x11eG\\n\\xa4H$\\x9d\\xef\\xff~\\xffaOUUv\\xda\\xdd\\xb6\\xda\\xdd\\xa8\\x88\\xaaZ\\x80\\x01\\x00\\x00\\x07\\x7f\\xff\\xff\\xfd\\xdc/\\xaa\\xab\\xabm\\xb6\\xdbm\\xb7U\"-\\x0e\\xa5$!\"M\\xdd\\xff\\xef\\xef\\xff\\x9fU\\xb5Z\\xaa\\xd5m\\xb6\\xda\\xd2\\tFE@\\x00\\x04\\x08\\x07\\xff\\xff\\xfd\\xbf\\xff\\xef\\xb6\\xadm\\xb7o\\xb6\\xdboT\\xa2\\x14\\x12\\xa8\\x91 \\x00\\x92\\xab\\x7f\\xff\\xff\\xf7\\xff\\xaa\\xb5\\xaa\\xda\\xb4\\xdbm\\xb9\\xa2\\x08\\xa9\\x00\\xd2\\x04\\x01\"\\x02\\xff\\xf7\\xff\\x7f\\x7f\\xff\\xb6\\xd6\\xb6\\xad\\xdbm\\xb6\\xee\\xd8\\xa24\\ni@\\x90\\x08%\\xb7\\xff\\xff\\xfb\\xff\\x7f\\xdb[kj\\xad\\xb6\\xdbU\\xa5\\x089 *\\xa4\\x02 \\x82\\xfd\\xbe\\xfd\\xef\\xed\\xffUj\\xdd\\xb6\\xd6\\xdbm\\xf6\\xd8A\\x14\\x81\\x17\\x00\\x88\\x00\\x03\\xaf\\xfb\\xf7\\xff\\xbf\\xef\\xad\\xadj\\xd5uj\\xb6\\x9bj\\x10\\x8a\\x05%H \\x84 \\xd4\\xbf\\xff\\xff\\xff\\x7f\\xb5U\\xaf[\\xae\\xad\\xdbj\\xd5D*\\x80H\\x02\\x00\\x10\\x8bU\\xaf\\xbf\\xbf\\xfd\\xff\\xaa\\xda\\xa9\\xb6\\xb5\\xd6\\xb6\\xd5i\\x00\\x80\\x00\\x05 \\x84@\\x00\\xaa\\xb5\\xfe\\xf6\\xef_\\xb6\\xabV\\xdbZ\\xbb\\xdbi\\xb4\\x90\\x14I(\\x88!\\x02\\x05\\xaa\\xdfo\\xff\\xfd\\xbfUZ\\xda\\xad\\xefmm\\xa5U\\x02A\\x00E\\x02\\x00\\x08QUU\\xbf\\xff\\xff\\xff\\xaa\\xd5m\\xb5)\\xb5\\xb6\\xd2\\xea \\x00\\x12\" \\x88 \\x02\\xae\\xda\\xdb\\xdd\\xdf\\xff[V\\xaa\\xd6\\xee\\xd6\\xdbUX\\x82\\x92@\\x94\\x88!\\x01\\x05Skn\\xff\\xfd\\xbf\\xaa\\xaa\\xd6\\xb5U[UB\\xea\\x08\\x00\\x08\\t\\x02\\x00\\x00!Z\\xb5U\\xab\\xff\\xffU[[[\\xbbm\\xbbUU!\"\\x92DP\\x84H\\x85UV\\xb6\\xaf\\xf7\\xef\\xaa\\xd4\\xb5\\xedm\\xb6\\xd5J\\xe8\\x00\\x08\\x00\"\\x02 \\x00\\t*\\xaa\\xd5U\\xbf\\x7f\\x15V\\xd6V\\xd6\\xd5n\\xa5UJAQ\\x14\\x90\\x01\\x02\"\\xaa\\x95Uk\\xfa\\xff\\x85Z\\xab\\xabk[\\xb5\\xa9h\\x00\\x10\\nJD\\x88\\x10\\n\\xa5J\\xaa\\xaa\\xd5OR\\xa5Z\\xb5]\\xb6\\xde\\xad\\xaaI\\x04$\\x11\\x10 \\x01$\\x90%U\\xaa\\xaf\\x7f@\\xaa\\xaa\\xdbj\\xdbkR\\xa8\\x00 \\x8a\\x88B\\x00\\x84\\x02%\\x12\\x96\\xadR\\xafZU\\xb6\\xad\\xb7m\\xb5\\xadeT\\x82\\x02E\\x08\\x82\\x00I\\x08HUU\\xad\\xafT\\x15U\\xb6\\xaa\\xb6\\xae\\xab\\xa8\\x00\\x00)( \\x10\\x10\\x10\\xa0\\x0bUj\\xaa\\xbf\\x92\\x8a\\xadZ\\xdd\\xdbwl\\xa5$\\x08\\x84\\x82\\x82@\\x02D\\x02\\xb5U\\xaa\\xd6\\xafUR\\xb6\\xedkm\\xad\\xabh\\x02@\\x12(\\x10\\x00@\\x00)Z\\xaa\\xb7Z\\xdfUB\\xabW\\xb6\\xb6\\xf6\\xaa\\xa4\\x88\\x02E\\x05D\\x84\\x01\\x10\\xafm\\xda\\x95k_\\xaa\\xa8\\xaa\\xfa\\xdbm\\xad\\xd5r \\x08\\x10P\\x90\\x00\\x08\\x05U\\xaa\\xb5j\\xaa\\xafE_UWm\\xb6\\xdbv\\xa9\\x02@\\x85\\nB \\x80\\x91Z\\xb5Z\\xaa\\xaa\\xaf\\xbf\\xfb\\xabm\\xdbmn\\xda\\xed@\\x02 D(\\x82\\x04\\n\\xabUUUU_\\xfa\\xaa\\n\\xbb}\\xb7\\xb7\\xabZ\\x10\\x88\\x14\\x91\\x00\\x00\\x10\\xadU\\xb5V\\xaaUO\\x8a\\x91U\\xaf\\xb6\\xda\\xda\\xf5u\\x82\\x00\\x80\\x00\\xa4 \\x02\\xaa\\xae\\xd5)QJ_d\\xae\\xfe\\xda\\xefmo\\xaa\\xd4@\\x10*J\\x11\\x02%USZ\\x95U)O[\\xff\\xa9W\\xbd\\xdb\\xb5\\xb5kPB\\x80\\x10\\x80\\x08\\x05\\xaa\\xb5UUT\\x95/\\xfe\\xa9P:\\xf7\\xed[j\\xbd\\x02\\x00\"\\xa5H@\\x15mUV\\xa2\\x95H\\xaf\\x12\\xaa\\xaa\\x8d\\xfe\\xf6\\xed\\xd5\\xd5h \\x80D\\x01\\x00\\x8a\\xaa\\xaa\\xa9Y$\\xa5\\x1fJ\\xaa\\xad\\xf6\\xaf\\xbbV\\xd5j\\x80\\x82\\x12\\x92\\xa0\\x12\\x05\\xa5RUT\\x92\\x92O\\xb4\\xab\\xff\\xfd\\xbb\\xec\\x8bj\\xaa\\xa8\\x00A*\\x04@\\x15T\\x95UBI)_\\xd7\\xff\\x7f\\xff\\xd6\\xbaU\\xb5jP\\x08\\x04\\x85P\\x00B\\xaaH\\x92Y$\\x94\\x8f\\xfb\\xff\\xfb\\xff\\x7f\\xfa\\x92\\xd4\\xb5\\x04 \\x11i\\x01\\x12\\tQRI$\\x92B_\\xee\\xff\\xff\\xfa\\xd5\\xa4Kj\\xaa\\xa0\\x81\\x01*\\x90@\"\\xadIT\\x92I)/\\xbb\\xbf\\xff\\xff}h\\x01\\xb5TH\\x00\\x05\\xaa\"\\x01\\x00\\x90\\x92\\x02I$\\x94\\x8f\\xff\\xff\\xff\\xfd\\xfe\\xa1\\x15Uj\\x80\\x08@\\xaa\\x80\\x10\\nE$\\xa9$\\x92B_\\xff\\x7f\\xff\\xef\\xffTE\\xea\\xaa\\x12!\\x0bR)\\x02A\\x10\\x00\\x14\\x92I)/\\xdf\\xef\\xff\\xff\\xff\\xaa\\xb6\\xb5U@\\x04\\x02\\xaa\\x80@\\x04\\x00\\x81\\x01)$D\\x8f\\xff\\xbf\\xff\\xff\\xff\\xeb[T\\xa9\\x00\\x10E$H\\x08 \\x00\\x08PD\\x89*_\\xbf\\xf7\\xff\\xff\\xff\\xfd\\xed\\xda\\xb4\\x92D\\x95R\\x82\\x01\\x00\\x84\\x00\\x02\\x12UU\\xaf\\xfe\\xfd\\xef\\xff\\xff\\xea\\x92mU\\x00\\t\\x06\\x89 @\\x12\\x00 \\x00\\x05UU_')\n</code></pre> <p>IMG_1028_bw.py</p> <pre><code>width = 184\nheight = 135\nimg_bw = bytearray(b'\\x01\\x82{\\xf1\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\xc0\\x02\\x08\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00`\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00 \\x08\\x06\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfe?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x10\\x00\\xcf\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x9f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x80\\x08\\x00O\\x01\\xff\\xf3\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xbf\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x04\\x00?\\x81\\xe7\\x81\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xbf\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x02\\x00\\x01\\x80\\xe3\\xc3\\xef\\xff\\xff\\xff\\xff\\xff\\xff\\x9f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff`\\x00\\x00\\x00\\xc0q\\xe3\\xf0\\xff\\xff\\xff\\xff\\xff\\xff\\x9f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff0\\x00\\x00\\x00\\xc00\\xff\\xfc\\x7f\\xff\\xff\\xff\\xff\\xff\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff0\\x00\\x00\\x07@\\x00\\x7f\\xfe\\x0f\\xff\\xff\\xff\\xff\\xff\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x18\\x00\\x00\\x06 \\x00\\x7f\\xff\\x03\\xff\\xff\\xff\\xff\\xff\\x8f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x0c\\x00\\x00\\x000\\x00?\\xff\\x80\\x7f\\xff\\xff\\xff\\xff\\x87\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x0e\\x00\\x00\\x000\\x00\\x07\\xff\\xc0\\x07\\xff\\xff\\xff\\xff\\xa7\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x06\\x00\\x00\\x00\\x00\\x00\\x07\\xff\\xe0\\x00\\xff\\xff\\xf7\\xff\\xa7\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x03\\x00\\x10\\x00\\x08\\x00\\x0f\\xff\\xf1\\xf8\\x7f\\xff\\xf7\\xff7\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x01\\x00\\x00\\x00\\x04\\x00\\x1f\\xff\\xfd\\xfc\\x1f\\xff\\xe7\\xff7\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00@\\x00\\x7f\\xff\\xfe\\xff\\x0f\\xff\\xe7\\xfe7\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00@\\x00\\xff\\xff\\xff\\xff\\x8f\\xff\\xc3\\xfe?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xdf\\xc1\\xfc?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x01\\x00\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xef\\xff\\xff\\x80\\xd0?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xe7\\xff\\xfe@`\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xc7\\xff\\xff\\xc0`\\xf7\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x80\\x00\\x00\\x00?\\xff\\xff\\xff\\xc7\\xff\\xff\\xfc@w\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xe7\\xff\\xff\\xfc\\x00\\'\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xe7\\xff\\xffL\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xc7\\xff\\xc8\\x0f\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xc3\\xff\\xc0\\x13\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xf7\\xff\\xc0\"`\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\x80,\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00{\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x08\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0P\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0p\\x00\\x0f\\xff\\xff\\xf7\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0n\\x00\\x0f\\xff\\xff\\xfb\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xfe\\xff\\xff\\xff\\xe2|\\x00\\x0f\\xff\\xff\\xf8\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xfe\\x7f\\xff\\xff\\xe6\\x7f\\x00\\x0f\\xff\\xff\\xfd\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00?\\xff\\xff\\xef\\x7f\\xff\\xff\\xf6\\x7f\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00?\\xff\\xff\\xc7?\\xff\\xff\\xf0?\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xc0?\\xff\\xf7\\xf0\\x1f\\x80\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x03\\xff\\xff\\xc0?\\xff\\xf7\\xb0\\x07\\xc0?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x01\\x07\\xff\\xff\\xe0?\\xff\\xffp\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x01?\\xff\\xff\\xe0?\\xff\\xff\\xf0\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\xff\\xff\\xdf\\xf2\\xff\\xff\\xff\\xe0\\x0e\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\xe3\\xef\\xc7\\xff\\xff\\xff\\xff\\xe0\\x07\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\xc7\\xff\\xe7\\xff\\xff\\xff\\xff\\xc0g\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x03\\xc0\\xc4\\xef\\xfb\\xff\\xff\\xff\\xff\\xc0g\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x07\\xf0\\xff\\xff\\xff\\xff\\xff\\xfb\\xff\\xe0?\\x80\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x7f\\xf3\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe0?\\x80\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\xf7\\xe7\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x02\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\xe7\\xef\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x0f\\xe3\\xef\\xff\\xff\\xff\\xff\\xfe\\xff\\xff\\xe0\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x07\\xff\\xcf\\xff\\xff\\xff\\xff\\xfe\\x00\\xff\\xe0\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x07\\xff\\xc3\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xc0\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x0f\\xff\\xf9\\xff\\xff\\xff\\xff\\xff\\xc0\\x7f\\xe0\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x0f\\xff\\xff\\xef\\xff\\xff\\xff\\xff\\xe0\\x1f\\xe0\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00?\\xdf\\xe0\\x0f\\xff\\xff\\xff\\xff\\xfc\\x1f\\xe0\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00?\\x00\\x00?\\xff\\xff\\xff\\xff\\xfe\\x7f\\xe0\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf0\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x80\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\x00\\x00\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfc\\x01\\x00\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x81\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe3\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe6\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xffd\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfc\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf0\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x8e\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfe?\\x80\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\x7f\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf0\\xff\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xbf\\xff\\xc3\\xff\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xdf\\xff\\xd1\\xfe\\x00\\x00\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfe\\x7f\\x80\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfb\\xff\\xef\\x1f\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xfb\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xd3\\xff\\xff\\x8e@\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe7\\xff\\xff\\xc0\\x00\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff7\\xff\\x9f\\xf0\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x17\\xfe\\x07\\xf8\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xffE\\xfc\\x04\\xfe\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff,=\\x00\\xff\\xc0\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x08?\\x80\\x7f\\xc0\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00?\\x81\\xbf\\x80\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\xbf\\x83\\x9f\\x80\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x1f\\x00\\xcf\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x80\\x08\\x00o\\x80\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x80\\x00\\x00?\\x80\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x1f\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00o\\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x7f\\x80\\x00\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00 \\x00?\\xc0\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00/\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x1f\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfe\\x00\\x000\\x1e\\x80\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xcf\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfe\\x00\\x00\\x1f?\\xe0\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xf3\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfe\\x00\\x00\\x1f\\xff\\xa0\\x00\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xf1\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfe\\x00\\x00\\x1f\\xcf\\x80\\x00\\x00\\x0f\\xff?\\xff\\xff\\xff\\xff\\xff\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x0f\\xe4\\x00\\x00\\x00\\x1f\\xf4\\x1f\\xff\\xff\\xff\\xff\\xff?\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x02\\x00\\x0f\\xfe\\x00\\x00\\x00\\x1f\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xdf\\xff\\xff\\xff\\xff\\xff\\xff\\xfe\\x02\\x00\\x0f\\xbf\\x80\\x00\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xe7\\xff\\xff\\xff\\xff\\xff\\xff\\xfe\\x02\\x00\\x1f\\x82\\xc0\\x00\\x00\\x00?\\xff\\xff\\xff\\xff\\xff\\xff\\xfb\\xff\\xff\\xff\\xff\\xff\\xff\\xfc\\x00\\x00\\x0f\\x1f\\xe0\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xfd\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x1e?\\xf0\\x00\\x00\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x80\\x00 _\\xf0\\x00\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x80\\x00\\x00\\xcfx\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x8f\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x00 \\x80\\x18\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x00 \\x00`\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x000\\x040\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xe0\\x00 \\x7f\\xc0\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfe\\x7f\\xff\\xff\\xff\\xff\\xff\\xe0\\x00\\xa1\\xff\\xc0\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xbf\\xff\\xff\\xff\\xff\\xff\\xf8\\x00\\x81\\xff\\xc0\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\x00A\\xff\\xc0\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\x00\\x01\\xff\\x80\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf0\\x00\\x03\\xff\\xc0\\x00\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf0\\x00\\x03\\xff\\xc0\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf0\\x00\\x01\\xff\\xc0\\x00\\x07\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfc\\x07\\xff\\xff\\xd0\\x00\\x01\\xff\\xa0\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\x07\\xff\\xff\\xc0\\x00\\x03\\xff\\xc0\\x00\\x03\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfd\\x7f\\xff\\xff\\xc0\\x00\\x03\\xff\\xe0\\x00\\x03\\xc0\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x00\\x07\\xff\\xa0\\x00\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x08\\x07\\xff\\xe0\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x1c\\x0f\\xff\\xc0\\x00\\x00\\x00\\x00\\x00\\x1f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xc0\\x0f\\xef\\xff\\xc0\\x00\\x00\\x00\\x00\\x00\\x0f\\xff\\xff\\xff')\n</code></pre> <p>I got to move all of the files in the same directory and modify the import statements, as importing from files that aren't initiated as packages didn't work.</p> <p>I got the code from this repo.</p>"},{"location":"stem/disability-forewarning-system/display-electronics/#75-pico-display","title":"7.5\" Pico Display","text":"<p>After wiring the display according to this picture, I ran the following code from this repo found from this tutorial in Thonny, and it worked!</p> <p></p> <p>7in5_test_2.py</p> <pre><code>from machine import Pin, SPI\nimport framebuf\nimport utime\n\n# Display resolution\nEPD_WIDTH       = 800\nEPD_HEIGHT      = 480\n\nRST_PIN         = 12\nDC_PIN          = 8\nCS_PIN          = 9\nBUSY_PIN        = 13\n\nclass EPD_7in5(framebuf.FrameBuffer):\n    def __init__(self):\n        self.reset_pin = Pin(RST_PIN, Pin.OUT)\n\n        self.busy_pin = Pin(BUSY_PIN, Pin.IN, Pin.PULL_UP)\n        self.cs_pin = Pin(CS_PIN, Pin.OUT)\n        self.width = EPD_WIDTH\n        self.height = EPD_HEIGHT\n\n        self.spi = SPI(1)\n        self.spi.init(baudrate=4000_000)\n        self.dc_pin = Pin(DC_PIN, Pin.OUT)\n\n        self.buffer = bytearray(self.height * self.width // 8)\n        super().__init__(self.buffer, self.width, self.height, framebuf.MONO_HLSB)\n        self.init()\n\n    def digital_write(self, pin, value):\n        pin.value(value)\n\n    def digital_read(self, pin):\n        return pin.value()\n\n    def delay_ms(self, delaytime):\n        utime.sleep(delaytime / 1000.0)\n\n    def spi_writebyte(self, data):\n        self.spi.write(bytearray(data))\n\n    def module_exit(self):\n        self.digital_write(self.reset_pin, 0)\n\n    # Hardware reset\n    def reset(self):\n        self.digital_write(self.reset_pin, 1)\n        self.delay_ms(50) \n        self.digital_write(self.reset_pin, 0)\n        self.delay_ms(2)\n        self.digital_write(self.reset_pin, 1)\n        self.delay_ms(50)   \n\n    def send_command(self, command):\n        self.digital_write(self.dc_pin, 0)\n        self.digital_write(self.cs_pin, 0)\n        self.spi_writebyte([command])\n        self.digital_write(self.cs_pin, 1)\n\n    def send_data(self, data):\n        self.digital_write(self.dc_pin, 1)\n        self.digital_write(self.cs_pin, 0)\n        self.spi_writebyte([data])\n        self.digital_write(self.cs_pin, 1)\n\n    def send_data1(self, buf):\n        self.digital_write(self.dc_pin, 1)\n        self.digital_write(self.cs_pin, 0)\n        self.spi.write(bytearray(buf))\n        self.digital_write(self.cs_pin, 1)\n\n    def WaitUntilIdle(self):\n        print(\"e-Paper busy\")\n        while(self.digital_read(self.busy_pin) == 0):    # Wait until the busy_pin goes LOW\n            self.send_command(0x71)\n            self.delay_ms(20)\n        self.delay_ms(20) \n        print(\"e-Paper busy release\")  \n\n    def TurnOnDisplay(self):\n        self.send_command(0x12) # DISPLAY REFRESH\n        self.delay_ms(100)      #!!!The delay here is necessary, 200uS at least!!!\n        self.WaitUntilIdle()\n\n    def init(self):\n        # EPD hardware init start     \n        self.reset()\n\n        self.send_command(0x01)  # POWER SETTING\n        self.send_data(0x07)\n        self.send_data(0x07)     # VGH=20V,VGL=-20V\n        self.send_data(0x3f)     # VDH=15V\n        self.send_data(0x3f)     # VDL=-15V\n\n        self.send_command(0x04)  # POWER ON\n        self.delay_ms(100)\n        self.WaitUntilIdle()\n\n        self.send_command(0X00)   # PANNEL SETTING\n        self.send_data(0x1F)      # KW-3f   KWR-2F  BWROTP 0f   BWOTP 1f\n\n        self.send_command(0x61)     # tres\n        self.send_data(0x03)     # source 800\n        self.send_data(0x20)\n        self.send_data(0x01)     # gate 480\n        self.send_data(0xE0)\n\n        self.send_command(0X15)\n        self.send_data(0x00)\n\n        self.send_command(0X50)     # VCOM AND DATA INTERVAL SETTING\n        self.send_data(0x10)\n        self.send_data(0x00)\n\n        self.send_command(0X60)     # TCON SETTING\n        self.send_data(0x22)\n\n        self.send_command(0x65)     # Resolution setting\n        self.send_data(0x00)\n        self.send_data(0x00)     # 800*480\n        self.send_data(0x00)\n        self.send_data(0x00)\n\n        return 0;\n\n    def Clear(self):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10)\n        for i in range(0, wide):\n            self.send_data1([0xff] * high)\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1([0x00] * high)\n\n        self.TurnOnDisplay()\n\n    def ClearBlack(self):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10)\n        for i in range(0, wide):\n            self.send_data1([0x00] * high)\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1([0xff] * high)\n\n        self.TurnOnDisplay()\n\n    def display(self,blackimage):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10) \n        for i in range(0, wide):\n            self.send_data1(blackimage[(i * high) : ((i+1) * high)])\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1(blackimage[(i * high) : ((i+1) * high)])\n\n        self.TurnOnDisplay()\n\n\n    def sleep(self):\n        self.send_command(0x02) # power off\n        self.WaitUntilIdle()\n        self.send_command(0x07) # deep sleep\n        self.send_data(0xa5)\n\nif __name__=='__main__':\n    epd = EPD_7in5()\n    epd.Clear()\n\n    epd.fill(0x00)\n\n    epd.text(\"Waveshare\", 5, 10, 0xff)\n    epd.text(\"Pico_ePaper-7.5\", 5, 40, 0xff)\n    epd.text(\"Raspberry Pico\", 5, 70, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    epd.vline(10, 90, 60, 0xff)\n    epd.vline(120, 90, 60, 0xff)\n    epd.hline(10, 90, 110, 0xff)\n    epd.hline(10, 150, 110, 0xff)\n    epd.line(10, 90, 120, 150, 0xff)\n    epd.line(120, 90, 10, 150, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    epd.rect(10, 180, 50, 80, 0xff)\n    epd.fill_rect(70, 180, 50, 80, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    epd.fill_rect(250, 150, 480, 20, 0xff)\n    epd.fill_rect(250, 310, 480, 20, 0xff)\n    epd.fill_rect(400, 0, 20, 480, 0xff)\n    epd.fill_rect(560, 0, 20, 480, 0xff)\n\n    for j in range(0, 3):\n        for i in range(0, 15):\n            epd.line(270+j*160+i, 20+j*160, 375+j*160+i, 140+j*160, 0xff)\n        for i in range(0, 15):\n            epd.line(375+j*160+i, 20+j*160, 270+j*160+i, 140+j*160, 0xff)\n        for i in range(0, 15):\n            epd.line(270+j*160, 20+j*160+i, 390+j*160, 125+j*160+i, 0xff)\n        for i in range(0, 15):\n            epd.line(270+j*160, 125+j*160+i, 390+j*160, 20+j*160+i, 0xff)        \n    epd.fill_rect(270, 190, 100, 100, 0xff)\n    epd.fill_rect(270, 350, 100, 100, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    epd.Clear()\n    epd.delay_ms(2000)\n    print(\"sleep\")\n    epd.sleep()\n</code></pre> <p>Unfortunately, the text was very small, and I tried to change its size via this forum, but it didn't work, also revealing that larger font sizes may take up too much memory. I tried changing <code>self.width = EPD_WIDTH</code> and <code>self.height = EPD_HEIGHT</code> to <code>self.width = int(EPD_WIDTH/2)</code> and <code>self.height = int(EPD_HEIGHT/2)</code> but the result was grainy and has text smaller than what it was before. I also tried multiplying by too, but I recieved an error about allocating too much memory.</p> <p>I original decided to try to write my own font library by drawing lines and coordinates (and trying to find people who've done similar things with Desmos) but realized this approach is not time efficient. Here was what I had gotten before I quit.</p> <pre><code>from machine import Pin, SPI\nimport framebuf\nimport utime\n\n# Display resolution\nEPD_WIDTH       = 800\nEPD_HEIGHT      = 480\n\nRST_PIN         = 12\nDC_PIN          = 8\nCS_PIN          = 9\nBUSY_PIN        = 13\n\nclass EPD_7in5(framebuf.FrameBuffer):\n    def __init__(self):\n        self.reset_pin = Pin(RST_PIN, Pin.OUT)\n\n        self.busy_pin = Pin(BUSY_PIN, Pin.IN, Pin.PULL_UP)\n        self.cs_pin = Pin(CS_PIN, Pin.OUT)\n        self.width = EPD_WIDTH \n        self.height = EPD_HEIGHT \n\n        self.spi = SPI(1)\n        self.spi.init(baudrate=4000_000)\n        self.dc_pin = Pin(DC_PIN, Pin.OUT)\n\n        self.buffer = bytearray(self.height * self.width // 8)\n        super().__init__(self.buffer, self.width, self.height, framebuf.MONO_HLSB)\n        self.init()\n\n    def digital_write(self, pin, value):\n        pin.value(value)\n\n    def digital_read(self, pin):\n        return pin.value()\n\n    def delay_ms(self, delaytime):\n        utime.sleep(delaytime / 1000.0)\n\n    def spi_writebyte(self, data):\n        self.spi.write(bytearray(data))\n\n    def module_exit(self):\n        self.digital_write(self.reset_pin, 0)\n\n    # Hardware reset\n    def reset(self):\n        self.digital_write(self.reset_pin, 1)\n        self.delay_ms(50) \n        self.digital_write(self.reset_pin, 0)\n        self.delay_ms(2)\n        self.digital_write(self.reset_pin, 1)\n        self.delay_ms(50)   \n\n    def send_command(self, command):\n        self.digital_write(self.dc_pin, 0)\n        self.digital_write(self.cs_pin, 0)\n        self.spi_writebyte([command])\n        self.digital_write(self.cs_pin, 1)\n\n    def send_data(self, data):\n        self.digital_write(self.dc_pin, 1)\n        self.digital_write(self.cs_pin, 0)\n        self.spi_writebyte([data])\n        self.digital_write(self.cs_pin, 1)\n\n    def send_data1(self, buf):\n        self.digital_write(self.dc_pin, 1)\n        self.digital_write(self.cs_pin, 0)\n        self.spi.write(bytearray(buf))\n        self.digital_write(self.cs_pin, 1)\n\n    def WaitUntilIdle(self):\n        print(\"e-Paper busy\")\n        while(self.digital_read(self.busy_pin) == 0):    # Wait until the busy_pin goes LOW\n            self.send_command(0x71)\n            self.delay_ms(20)\n        self.delay_ms(20) \n        print(\"e-Paper busy release\")  \n\n    def TurnOnDisplay(self):\n        self.send_command(0x12) # DISPLAY REFRESH\n        self.delay_ms(100)      #!!!The delay here is necessary, 200uS at least!!!\n        self.WaitUntilIdle()\n\n    def init(self):\n        # EPD hardware init start     \n        self.reset()\n\n        self.send_command(0x01)  # POWER SETTING\n        self.send_data(0x07)\n        self.send_data(0x07)     # VGH=20V,VGL=-20V\n        self.send_data(0x3f)     # VDH=15V\n        self.send_data(0x3f)     # VDL=-15V\n\n        self.send_command(0x04)  # POWER ON\n        self.delay_ms(100)\n        self.WaitUntilIdle()\n\n        self.send_command(0X00)   # PANNEL SETTING\n        self.send_data(0x1F)      # KW-3f   KWR-2F  BWROTP 0f   BWOTP 1f\n\n        self.send_command(0x61)     # tres\n        self.send_data(0x03)     # source 800\n        self.send_data(0x20)\n        self.send_data(0x01)     # gate 480\n        self.send_data(0xE0)\n\n        self.send_command(0X15)\n        self.send_data(0x00)\n\n        self.send_command(0X50)     # VCOM AND DATA INTERVAL SETTING\n        self.send_data(0x10)\n        self.send_data(0x00)\n\n        self.send_command(0X60)     # TCON SETTING\n        self.send_data(0x22)\n\n        self.send_command(0x65)     # Resolution setting\n        self.send_data(0x00)\n        self.send_data(0x00)     # 800*480\n        self.send_data(0x00)\n        self.send_data(0x00)\n\n        return 0;\n\n    def Clear(self):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10)\n        for i in range(0, wide):\n            self.send_data1([0xff] * high)\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1([0x00] * high)\n\n        self.TurnOnDisplay()\n\n    def ClearBlack(self):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10)\n        for i in range(0, wide):\n            self.send_data1([0x00] * high)\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1([0xff] * high)\n\n        self.TurnOnDisplay()\n\n    def display(self,blackimage):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10) \n        for i in range(0, wide):\n            self.send_data1(blackimage[(i * high) : ((i+1) * high)])\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1(blackimage[(i * high) : ((i+1) * high)])\n\n        self.TurnOnDisplay()\n\n\n    def sleep(self):\n        self.send_command(0x02) # power off\n        self.WaitUntilIdle()\n        self.send_command(0x07) # deep sleep\n        self.send_data(0xa5)\n\ndef poly(epd, points):\n    coordinates = [[]]\n    for point in points:\n        if len(coordinates[-1]) == 4:\n            coordinates.append([])\n            coordinates[-1] += [coordinates[-2][2], coordinates[-2][3]]\n        coordinates[-1].append(point[0])\n        coordinates[-1].append(point[1])\n    print(coordinates)\n    for c in coordinates:\n        epd.line(c[0], c[1], c[2], c[3], 0xff)\n    epd.line(coordinates[-1][2], coordinates[-1][3], coordinates[0][0], coordinates[0][1], 0xff)\n\nif __name__=='__main__':\n    epd = EPD_7in5()\n    epd.Clear()\n\n    epd.fill(0x00)\n\n    poly(epd, [(0, 100), (100, 0), (90, 0)])\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    \"\"\"\n    epd.text(\"Waveshare\", 5, 10, 0xff)\n    epd.text(\"Pico_ePaper-7.5\", 5, 40, 0xff)\n    epd.text(\"Raspberry Pico\", 5, 70, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    epd.vline(10, 90, 60, 0xff)\n    epd.vline(120, 90, 60, 0xff)\n    epd.hline(10, 90, 110, 0xff)\n    epd.hline(10, 150, 110, 0xff)\n    epd.line(10, 90, 120, 150, 0xff)\n    epd.line(120, 90, 10, 150, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    epd.rect(10, 180, 50, 80, 0xff)\n    epd.fill_rect(70, 180, 50, 80, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    epd.fill_rect(250, 150, 480, 20, 0xff)\n    epd.fill_rect(250, 310, 480, 20, 0xff)\n    epd.fill_rect(400, 0, 20, 480, 0xff)\n    epd.fill_rect(560, 0, 20, 480, 0xff)\n\n    for j in range(0, 3):\n        for i in range(0, 15):\n            epd.line(270+j*160+i, 20+j*160, 375+j*160+i, 140+j*160, 0xff)\n        for i in range(0, 15):\n            epd.line(375+j*160+i, 20+j*160, 270+j*160+i, 140+j*160, 0xff)\n        for i in range(0, 15):\n            epd.line(270+j*160, 20+j*160+i, 390+j*160, 125+j*160+i, 0xff)\n        for i in range(0, 15):\n            epd.line(270+j*160, 125+j*160+i, 390+j*160, 20+j*160+i, 0xff)        \n    epd.fill_rect(270, 190, 100, 100, 0xff)\n    epd.fill_rect(270, 350, 100, 100, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    \"\"\"\n\n    epd.Clear()\n    epd.delay_ms(2000)\n    print(\"sleep\")\n    epd.sleep()\n</code></pre> <p>I tried original to use the <code>epd.poly</code> function based off of [this documentation](https://docs.micropython.org/en/latest/library/framebuf.html#:~:text=Given%20a%20list,outline%20is%20drawn, since <code>EPD_7in5</code> inherents from <code>framebuf.FrameBuffer</code>, but I kept getting this error when using an array of points.</p> <pre><code>TypeError: object with buffer protocol required\n</code></pre> <p>Instead I found this example code%0Aoled.show()) and adapted it to the following, which worked!</p> <p></p> <pre><code>from machine import Pin, SPI\nimport framebuf\nimport utime\n\n# Display resolution\nEPD_WIDTH       = 800\nEPD_HEIGHT      = 480\n\nRST_PIN         = 12\nDC_PIN          = 8\nCS_PIN          = 9\nBUSY_PIN        = 13\n\nclass EPD_7in5(framebuf.FrameBuffer):\n    def __init__(self):\n        self.reset_pin = Pin(RST_PIN, Pin.OUT)\n\n        self.busy_pin = Pin(BUSY_PIN, Pin.IN, Pin.PULL_UP)\n        self.cs_pin = Pin(CS_PIN, Pin.OUT)\n        self.width = EPD_WIDTH \n        self.height = EPD_HEIGHT \n\n        self.spi = SPI(1)\n        self.spi.init(baudrate=4000_000)\n        self.dc_pin = Pin(DC_PIN, Pin.OUT)\n\n        self.buffer = bytearray(self.height * self.width // 8)\n        super().__init__(self.buffer, self.width, self.height, framebuf.MONO_HLSB)\n        self.init()\n\n    def digital_write(self, pin, value):\n        pin.value(value)\n\n    def digital_read(self, pin):\n        return pin.value()\n\n    def delay_ms(self, delaytime):\n        utime.sleep(delaytime / 1000.0)\n\n    def spi_writebyte(self, data):\n        self.spi.write(bytearray(data))\n\n    def module_exit(self):\n        self.digital_write(self.reset_pin, 0)\n\n    # Hardware reset\n    def reset(self):\n        self.digital_write(self.reset_pin, 1)\n        self.delay_ms(50) \n        self.digital_write(self.reset_pin, 0)\n        self.delay_ms(2)\n        self.digital_write(self.reset_pin, 1)\n        self.delay_ms(50)   \n\n    def send_command(self, command):\n        self.digital_write(self.dc_pin, 0)\n        self.digital_write(self.cs_pin, 0)\n        self.spi_writebyte([command])\n        self.digital_write(self.cs_pin, 1)\n\n    def send_data(self, data):\n        self.digital_write(self.dc_pin, 1)\n        self.digital_write(self.cs_pin, 0)\n        self.spi_writebyte([data])\n        self.digital_write(self.cs_pin, 1)\n\n    def send_data1(self, buf):\n        self.digital_write(self.dc_pin, 1)\n        self.digital_write(self.cs_pin, 0)\n        self.spi.write(bytearray(buf))\n        self.digital_write(self.cs_pin, 1)\n\n    def WaitUntilIdle(self):\n        print(\"e-Paper busy\")\n        while(self.digital_read(self.busy_pin) == 0):    # Wait until the busy_pin goes LOW\n            self.send_command(0x71)\n            self.delay_ms(20)\n        self.delay_ms(20) \n        print(\"e-Paper busy release\")  \n\n    def TurnOnDisplay(self):\n        self.send_command(0x12) # DISPLAY REFRESH\n        self.delay_ms(100)      #!!!The delay here is necessary, 200uS at least!!!\n        self.WaitUntilIdle()\n\n    def init(self):\n        # EPD hardware init start     \n        self.reset()\n\n        self.send_command(0x01)  # POWER SETTING\n        self.send_data(0x07)\n        self.send_data(0x07)     # VGH=20V,VGL=-20V\n        self.send_data(0x3f)     # VDH=15V\n        self.send_data(0x3f)     # VDL=-15V\n\n        self.send_command(0x04)  # POWER ON\n        self.delay_ms(100)\n        self.WaitUntilIdle()\n\n        self.send_command(0X00)   # PANNEL SETTING\n        self.send_data(0x1F)      # KW-3f   KWR-2F  BWROTP 0f   BWOTP 1f\n\n        self.send_command(0x61)     # tres\n        self.send_data(0x03)     # source 800\n        self.send_data(0x20)\n        self.send_data(0x01)     # gate 480\n        self.send_data(0xE0)\n\n        self.send_command(0X15)\n        self.send_data(0x00)\n\n        self.send_command(0X50)     # VCOM AND DATA INTERVAL SETTING\n        self.send_data(0x10)\n        self.send_data(0x00)\n\n        self.send_command(0X60)     # TCON SETTING\n        self.send_data(0x22)\n\n        self.send_command(0x65)     # Resolution setting\n        self.send_data(0x00)\n        self.send_data(0x00)     # 800*480\n        self.send_data(0x00)\n        self.send_data(0x00)\n\n        return 0;\n\n    def Clear(self):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10)\n        for i in range(0, wide):\n            self.send_data1([0xff] * high)\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1([0x00] * high)\n\n        self.TurnOnDisplay()\n\n    def ClearBlack(self):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10)\n        for i in range(0, wide):\n            self.send_data1([0x00] * high)\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1([0xff] * high)\n\n        self.TurnOnDisplay()\n\n    def display(self,blackimage):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10) \n        for i in range(0, wide):\n            self.send_data1(blackimage[(i * high) : ((i+1) * high)])\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1(blackimage[(i * high) : ((i+1) * high)])\n\n        self.TurnOnDisplay()\n\n\n    def sleep(self):\n        self.send_command(0x02) # power off\n        self.WaitUntilIdle()\n        self.send_command(0x07) # deep sleep\n        self.send_data(0xa5)\n\"\"\"\ndef poly(epd, points):\n    coordinates = [[]]\n    for point in points:\n        if len(coordinates[-1]) == 4:\n            coordinates.append([])\n            coordinates[-1] += [coordinates[-2][2], coordinates[-2][3]]\n        coordinates[-1].append(point[0])\n        coordinates[-1].append(point[1])\n    print(coordinates)\n    for c in coordinates:\n        epd.line(c[0], c[1], c[2], c[3], 0xff)\n    epd.line(coordinates[-1][2], coordinates[-1][3], coordinates[0][0], coordinates[0][1], 0xff)\n\"\"\"\nfb_smile1 = framebuf.FrameBuffer(bytearray(b'\\x00~\\x00\\x03\\xff\\xc0\\x07\\x81\\xe0\\x1e\\x00x8\\x00\\x1c0\\x00\\x0c`\\x00\\x0ea\\xc3\\x86\\xe0\\x00\\x07\\xc0\\x00\\x03\\xc0\\x00\\x03\\xc0\\x00\\x02\\xc0\\x00\\x03\\xc0\\x00\\x03\\xe0B\\x07`&lt;\\x06`\\x00\\x060\\x00\\x0c8\\x00\\x1c\\x1e\\x00x\\x07\\x81\\xe0\\x03\\xff\\xc0\\x00\\xff\\x00'), 24, 23, framebuf.MONO_HLSB)\n\nif __name__=='__main__':\n    epd = EPD_7in5()\n    epd.Clear()\n\n    epd.fill(0x00)\n\n    epd.blit(fb_smile1, 100, 100)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    \"\"\"\n    epd.text(\"Waveshare\", 5, 10, 0xff)\n    epd.text(\"Pico_ePaper-7.5\", 5, 40, 0xff)\n    epd.text(\"Raspberry Pico\", 5, 70, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    epd.vline(10, 90, 60, 0xff)\n    epd.vline(120, 90, 60, 0xff)\n    epd.hline(10, 90, 110, 0xff)\n    epd.hline(10, 150, 110, 0xff)\n    epd.line(10, 90, 120, 150, 0xff)\n    epd.line(120, 90, 10, 150, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    epd.rect(10, 180, 50, 80, 0xff)\n    epd.fill_rect(70, 180, 50, 80, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    epd.fill_rect(250, 150, 480, 20, 0xff)\n    epd.fill_rect(250, 310, 480, 20, 0xff)\n    epd.fill_rect(400, 0, 20, 480, 0xff)\n    epd.fill_rect(560, 0, 20, 480, 0xff)\n\n    for j in range(0, 3):\n        for i in range(0, 15):\n            epd.line(270+j*160+i, 20+j*160, 375+j*160+i, 140+j*160, 0xff)\n        for i in range(0, 15):\n            epd.line(375+j*160+i, 20+j*160, 270+j*160+i, 140+j*160, 0xff)\n        for i in range(0, 15):\n            epd.line(270+j*160, 20+j*160+i, 390+j*160, 125+j*160+i, 0xff)\n        for i in range(0, 15):\n            epd.line(270+j*160, 125+j*160+i, 390+j*160, 20+j*160+i, 0xff)        \n    epd.fill_rect(270, 190, 100, 100, 0xff)\n    epd.fill_rect(270, 350, 100, 100, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    \"\"\"\n\n    epd.Clear()\n    epd.delay_ms(2000)\n    print(\"sleep\")\n    epd.sleep()\n</code></pre> <p>Now I just had to make my display image and convert it into a byte array. In the future I'll consider trying to get the text to write bigger so that I can change the text in real time from the app without generating a new byte array (which is also a possibility), but for now I'll leave it at this.</p> <p>I used this website to create a byte array of this image.</p> <p></p> <p>But it was far too large and I got a memory allocation error (Thonny was very slow saving the program). I also noticed it had commas instead of slashes. I tried running this python code on my computer so I could decompress it on the RP2040, but this also failed as I crashed Thonny when copying the output from the terminal..</p> <pre><code>str_ = \"\"\"THE BYTE ARRAY\"\"\"\n\n\nitems = []\nfor item_ in str_.split(\",\"):\n    item = item_.strip()\n    if items and item == items[-1][0]:\n        items[-1][1] += 1\n    else:\n        items.append([item, 1])\nprint(items)\n</code></pre> <p>I re-ran the byte array creation instead at a resolution of 100x100 but got a weird dot pattern when I run the program.</p> <p></p> <p>I tried converting it with this, but it also failed.</p> <pre><code>str_ = \"\"\"*the byte list*\"\"\"\n\nprint(str_.replace(\" \",\"\").replace(\",\", \"\").replace(\"0x\", \"\\\\x\").replace(\"\\n\",\"\").replace(\"\\t\",\"\"))\n</code></pre> <p>Next I tried using this website to download a BMP file. I uploaded it to the Pico and changed the python to this, which gave a different, weird dot pattern.</p> <pre><code>with open('medical-symbol.bmp', 'rb') as f:\n    fb_smile1 = framebuf.FrameBuffer(bytearray(f.read()), 24, 23, framebuf.MONO_HLSB)\n</code></pre> <p>I tried every single one of the formats here and changed the dimensions to <code>100, 100</code>, but nothing worked.</p> <p>Finally, this forum, which I had used earlier, revealed that the MONO_HLSB is the same as a PBM file, so I used this website to convert my BMP to PBM and uploaded to the Pico. This time the result was much closer to what I wanted.</p> <pre><code>with open('medical-symbol.pbm', 'rb') as f:\n    fb_smile1 = framebuf.FrameBuffer(bytearray(f.read()), 100, 100, framebuf.MONO_HLSB)\n</code></pre> <p>The graininess was strange as the BMP file was not grainy whatsoever.</p> <p>I tried using this python program to convert the BMP file instead, since maybe it was a problem with the converting website, but this created no change.</p> <p>I tried using the original JPG size of 580x531 and still had the same problem. I even used this website to verify it wasn' a problem with the PBM file.</p> <p>I decided to print out the bytes with <code>print(f.read())</code> and the first 12 characters were <code>P4\\n580 531</code>. I decided to try to cut these off by changing <code>fb_smile1 = framebuf.FrameBuffer(bytearray(f.read()), 100, 100, framebuf.MONO_HLSB)</code> to <code>fb_smile1 = framebuf.FrameBuffer(bytearray(f.read()[12:]), 100, 100, framebuf.MONO_HLSB)</code>, and this worked! (I also had to restart Thonny and reinstall MicroPython everytime I printed out the bytes then tried to stop the program when it would get stuck). When I printed out <code>f.read()[:13]</code> there were two more characters than what I intended to cut off - I'm not sure what these were, but the program works so I'll leave it for now.</p> <p></p> <pre><code>from machine import Pin, SPI\nimport framebuf\nimport utime\n\n# Display resolution\nEPD_WIDTH       = 800\nEPD_HEIGHT      = 480\n\nRST_PIN         = 12\nDC_PIN          = 8\nCS_PIN          = 9\nBUSY_PIN        = 13\n\nclass EPD_7in5(framebuf.FrameBuffer):\n    def __init__(self):\n        self.reset_pin = Pin(RST_PIN, Pin.OUT)\n\n        self.busy_pin = Pin(BUSY_PIN, Pin.IN, Pin.PULL_UP)\n        self.cs_pin = Pin(CS_PIN, Pin.OUT)\n        self.width = EPD_WIDTH \n        self.height = EPD_HEIGHT \n\n        self.spi = SPI(1)\n        self.spi.init(baudrate=4000_000)\n        self.dc_pin = Pin(DC_PIN, Pin.OUT)\n\n        self.buffer = bytearray(self.height * self.width // 8)\n        super().__init__(self.buffer, self.width, self.height, framebuf.MONO_HLSB)\n        self.init()\n\n    def digital_write(self, pin, value):\n        pin.value(value)\n\n    def digital_read(self, pin):\n        return pin.value()\n\n    def delay_ms(self, delaytime):\n        utime.sleep(delaytime / 1000.0)\n\n    def spi_writebyte(self, data):\n        self.spi.write(bytearray(data))\n\n    def module_exit(self):\n        self.digital_write(self.reset_pin, 0)\n\n    # Hardware reset\n    def reset(self):\n        self.digital_write(self.reset_pin, 1)\n        self.delay_ms(50) \n        self.digital_write(self.reset_pin, 0)\n        self.delay_ms(2)\n        self.digital_write(self.reset_pin, 1)\n        self.delay_ms(50)   \n\n    def send_command(self, command):\n        self.digital_write(self.dc_pin, 0)\n        self.digital_write(self.cs_pin, 0)\n        self.spi_writebyte([command])\n        self.digital_write(self.cs_pin, 1)\n\n    def send_data(self, data):\n        self.digital_write(self.dc_pin, 1)\n        self.digital_write(self.cs_pin, 0)\n        self.spi_writebyte([data])\n        self.digital_write(self.cs_pin, 1)\n\n    def send_data1(self, buf):\n        self.digital_write(self.dc_pin, 1)\n        self.digital_write(self.cs_pin, 0)\n        self.spi.write(bytearray(buf))\n        self.digital_write(self.cs_pin, 1)\n\n    def WaitUntilIdle(self):\n        print(\"e-Paper busy\")\n        while(self.digital_read(self.busy_pin) == 0):    # Wait until the busy_pin goes LOW\n            self.send_command(0x71)\n            self.delay_ms(20)\n        self.delay_ms(20) \n        print(\"e-Paper busy release\")  \n\n    def TurnOnDisplay(self):\n        self.send_command(0x12) # DISPLAY REFRESH\n        self.delay_ms(100)      #!!!The delay here is necessary, 200uS at least!!!\n        self.WaitUntilIdle()\n\n    def init(self):\n        # EPD hardware init start     \n        self.reset()\n\n        self.send_command(0x01)  # POWER SETTING\n        self.send_data(0x07)\n        self.send_data(0x07)     # VGH=20V,VGL=-20V\n        self.send_data(0x3f)     # VDH=15V\n        self.send_data(0x3f)     # VDL=-15V\n\n        self.send_command(0x04)  # POWER ON\n        self.delay_ms(100)\n        self.WaitUntilIdle()\n\n        self.send_command(0X00)   # PANNEL SETTING\n        self.send_data(0x1F)      # KW-3f   KWR-2F  BWROTP 0f   BWOTP 1f\n\n        self.send_command(0x61)     # tres\n        self.send_data(0x03)     # source 800\n        self.send_data(0x20)\n        self.send_data(0x01)     # gate 480\n        self.send_data(0xE0)\n\n        self.send_command(0X15)\n        self.send_data(0x00)\n\n        self.send_command(0X50)     # VCOM AND DATA INTERVAL SETTING\n        self.send_data(0x10)\n        self.send_data(0x00)\n\n        self.send_command(0X60)     # TCON SETTING\n        self.send_data(0x22)\n\n        self.send_command(0x65)     # Resolution setting\n        self.send_data(0x00)\n        self.send_data(0x00)     # 800*480\n        self.send_data(0x00)\n        self.send_data(0x00)\n\n        return 0;\n\n    def Clear(self):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10)\n        for i in range(0, wide):\n            self.send_data1([0xff] * high)\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1([0x00] * high)\n\n        self.TurnOnDisplay()\n\n    def ClearBlack(self):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10)\n        for i in range(0, wide):\n            self.send_data1([0x00] * high)\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1([0xff] * high)\n\n        self.TurnOnDisplay()\n\n    def display(self,blackimage):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10) \n        for i in range(0, wide):\n            self.send_data1(blackimage[(i * high) : ((i+1) * high)])\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1(blackimage[(i * high) : ((i+1) * high)])\n\n        self.TurnOnDisplay()\n\n\n    def sleep(self):\n        self.send_command(0x02) # power off\n        self.WaitUntilIdle()\n        self.send_command(0x07) # deep sleep\n        self.send_data(0xa5)\n\"\"\"\ndef poly(epd, points):\n    coordinates = [[]]\n    for point in points:\n        if len(coordinates[-1]) == 4:\n            coordinates.append([])\n            coordinates[-1] += [coordinates[-2][2], coordinates[-2][3]]\n        coordinates[-1].append(point[0])\n        coordinates[-1].append(point[1])\n    print(coordinates)\n    for c in coordinates:\n        epd.line(c[0], c[1], c[2], c[3], 0xff)\n    epd.line(coordinates[-1][2], coordinates[-1][3], coordinates[0][0], coordinates[0][1], 0xff)\n\"\"\"\nwith open('medical-symbol-o-o.pbm', 'rb') as f:\n    fb_smile1 = framebuf.FrameBuffer(bytearray(f.read()[12:]), 580, 531, framebuf.MONO_HLSB)\n\nif __name__=='__main__':\n    epd = EPD_7in5()\n    epd.Clear()\n\n    epd.fill(0x00)\n\n    epd.blit(fb_smile1, 0, -10)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    \"\"\"\n    epd.text(\"Waveshare\", 5, 10, 0xff)\n    epd.text(\"Pico_ePaper-7.5\", 5, 40, 0xff)\n    epd.text(\"Raspberry Pico\", 5, 70, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    epd.vline(10, 90, 60, 0xff)\n    epd.vline(120, 90, 60, 0xff)\n    epd.hline(10, 90, 110, 0xff)\n    epd.hline(10, 150, 110, 0xff)\n    epd.line(10, 90, 120, 150, 0xff)\n    epd.line(120, 90, 10, 150, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    epd.rect(10, 180, 50, 80, 0xff)\n    epd.fill_rect(70, 180, 50, 80, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    epd.fill_rect(250, 150, 480, 20, 0xff)\n    epd.fill_rect(250, 310, 480, 20, 0xff)\n    epd.fill_rect(400, 0, 20, 480, 0xff)\n    epd.fill_rect(560, 0, 20, 480, 0xff)\n\n    for j in range(0, 3):\n        for i in range(0, 15):\n            epd.line(270+j*160+i, 20+j*160, 375+j*160+i, 140+j*160, 0xff)\n        for i in range(0, 15):\n            epd.line(375+j*160+i, 20+j*160, 270+j*160+i, 140+j*160, 0xff)\n        for i in range(0, 15):\n            epd.line(270+j*160, 20+j*160+i, 390+j*160, 125+j*160+i, 0xff)\n        for i in range(0, 15):\n            epd.line(270+j*160, 125+j*160+i, 390+j*160, 20+j*160+i, 0xff)        \n    epd.fill_rect(270, 190, 100, 100, 0xff)\n    epd.fill_rect(270, 350, 100, 100, 0xff)\n    epd.display(epd.buffer)\n    epd.delay_ms(5000)\n\n    \"\"\"\n\n    epd.Clear()\n    epd.delay_ms(2000)\n    print(\"sleep\")\n    epd.sleep()\n</code></pre>"},{"location":"stem/disability-forewarning-system/display-electronics/#final-image","title":"Final Image","text":"<p>I created a new project in Adobe Premiere Pro and made a new, white <code>Color Matte</code> that is <code>800x480</code> pixels per this website to match the epaper display. After creating a frame with the desired image, I clicked the camera icon in the preview window and exported the frame as a BMP. I just ignored the <code>.bmp.xmp</code> file as I'm not sure of its purpose. I then converted it to a PBM file with the same website as above.</p> <p></p> <p>It worked perfectly!! I also removed the code that clears the screen at the end of the program.</p> <p></p> <pre><code>from machine import Pin, SPI\nimport framebuf\nimport utime\n\n# Display resolution\nEPD_WIDTH       = 800\nEPD_HEIGHT      = 480\n\nRST_PIN         = 12\nDC_PIN          = 8\nCS_PIN          = 9\nBUSY_PIN        = 13\n\nclass EPD_7in5(framebuf.FrameBuffer):\n    def __init__(self):\n        self.reset_pin = Pin(RST_PIN, Pin.OUT)\n\n        self.busy_pin = Pin(BUSY_PIN, Pin.IN, Pin.PULL_UP)\n        self.cs_pin = Pin(CS_PIN, Pin.OUT)\n        self.width = EPD_WIDTH \n        self.height = EPD_HEIGHT \n\n        self.spi = SPI(1)\n        self.spi.init(baudrate=4000_000)\n        self.dc_pin = Pin(DC_PIN, Pin.OUT)\n\n        self.buffer = bytearray(self.height * self.width // 8)\n        super().__init__(self.buffer, self.width, self.height, framebuf.MONO_HLSB)\n        self.init()\n\n    def digital_write(self, pin, value):\n        pin.value(value)\n\n    def digital_read(self, pin):\n        return pin.value()\n\n    def delay_ms(self, delaytime):\n        utime.sleep(delaytime / 1000.0)\n\n    def spi_writebyte(self, data):\n        self.spi.write(bytearray(data))\n\n    def module_exit(self):\n        self.digital_write(self.reset_pin, 0)\n\n    # Hardware reset\n    def reset(self):\n        self.digital_write(self.reset_pin, 1)\n        self.delay_ms(50) \n        self.digital_write(self.reset_pin, 0)\n        self.delay_ms(2)\n        self.digital_write(self.reset_pin, 1)\n        self.delay_ms(50)   \n\n    def send_command(self, command):\n        self.digital_write(self.dc_pin, 0)\n        self.digital_write(self.cs_pin, 0)\n        self.spi_writebyte([command])\n        self.digital_write(self.cs_pin, 1)\n\n    def send_data(self, data):\n        self.digital_write(self.dc_pin, 1)\n        self.digital_write(self.cs_pin, 0)\n        self.spi_writebyte([data])\n        self.digital_write(self.cs_pin, 1)\n\n    def send_data1(self, buf):\n        self.digital_write(self.dc_pin, 1)\n        self.digital_write(self.cs_pin, 0)\n        self.spi.write(bytearray(buf))\n        self.digital_write(self.cs_pin, 1)\n\n    def WaitUntilIdle(self):\n        print(\"e-Paper busy\")\n        while(self.digital_read(self.busy_pin) == 0):    # Wait until the busy_pin goes LOW\n            self.send_command(0x71)\n            self.delay_ms(20)\n        self.delay_ms(20) \n        print(\"e-Paper busy release\")  \n\n    def TurnOnDisplay(self):\n        self.send_command(0x12) # DISPLAY REFRESH\n        self.delay_ms(100)      #!!!The delay here is necessary, 200uS at least!!!\n        self.WaitUntilIdle()\n\n    def init(self):\n        # EPD hardware init start     \n        self.reset()\n\n        self.send_command(0x01)  # POWER SETTING\n        self.send_data(0x07)\n        self.send_data(0x07)     # VGH=20V,VGL=-20V\n        self.send_data(0x3f)     # VDH=15V\n        self.send_data(0x3f)     # VDL=-15V\n\n        self.send_command(0x04)  # POWER ON\n        self.delay_ms(100)\n        self.WaitUntilIdle()\n\n        self.send_command(0X00)   # PANNEL SETTING\n        self.send_data(0x1F)      # KW-3f   KWR-2F  BWROTP 0f   BWOTP 1f\n\n        self.send_command(0x61)     # tres\n        self.send_data(0x03)     # source 800\n        self.send_data(0x20)\n        self.send_data(0x01)     # gate 480\n        self.send_data(0xE0)\n\n        self.send_command(0X15)\n        self.send_data(0x00)\n\n        self.send_command(0X50)     # VCOM AND DATA INTERVAL SETTING\n        self.send_data(0x10)\n        self.send_data(0x00)\n\n        self.send_command(0X60)     # TCON SETTING\n        self.send_data(0x22)\n\n        self.send_command(0x65)     # Resolution setting\n        self.send_data(0x00)\n        self.send_data(0x00)     # 800*480\n        self.send_data(0x00)\n        self.send_data(0x00)\n\n        return 0;\n\n    def Clear(self):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10)\n        for i in range(0, wide):\n            self.send_data1([0xff] * high)\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1([0x00] * high)\n\n        self.TurnOnDisplay()\n\n    def ClearBlack(self):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10)\n        for i in range(0, wide):\n            self.send_data1([0x00] * high)\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1([0xff] * high)\n\n        self.TurnOnDisplay()\n\n    def display(self,blackimage):\n\n        high = self.height\n        if( self.width % 8 == 0) :\n            wide =  self.width // 8\n        else :\n            wide =  self.width // 8 + 1\n\n        self.send_command(0x10) \n        for i in range(0, wide):\n            self.send_data1(blackimage[(i * high) : ((i+1) * high)])\n\n        self.send_command(0x13) \n        for i in range(0, wide):\n            self.send_data1(blackimage[(i * high) : ((i+1) * high)])\n\n        self.TurnOnDisplay()\n\n\n    def sleep(self):\n        self.send_command(0x02) # power off\n        self.WaitUntilIdle()\n        self.send_command(0x07) # deep sleep\n        self.send_data(0xa5)\n\nwith open('TS_FINAL_IMG.pbm', 'rb') as f:\n    fb_smile1 = framebuf.FrameBuffer(bytearray(f.read()[12:]), EPD_WIDTH, EPD_HEIGHT, framebuf.MONO_HLSB)\n\nif __name__=='__main__':\n    epd = EPD_7in5()\n    epd.Clear()\n\n    epd.fill(0x00)\n\n    epd.blit(fb_smile1, 0, 0)\n    epd.display(epd.buffer)\n\n    print(\"sleep\")\n    epd.sleep()\n</code></pre> <p>I cleared the epaper before I finished working on it, and I'm considering simply drawing it one time then not writing to it anymore and only using the Pico for controlling the servo and BLE communication. Also that was I didn't have to worry about using the shield with other wiring, as well, and a power source. But this also wouldn't be any better than a piece of paper, so I'm leaning against it.</p> <p>All of the code used MicroPython 1.20.0</p>"},{"location":"stem/disability-forewarning-system/display-electronics/#rechargeable-batteries","title":"Rechargeable Batteries","text":"<p>I want to use a rechargeable battery both for the cup holder and display electronics. I have a HW-357 module and a Lipo battery, and when I measured the output voltage of the battery, it was <code>1.7V</code>, so I let it charge inside of a Derblue Lipo Safe Bag.</p> <p>The potentiometer didn't work - even after charging always ~1.7v - soldered a different one called a TP4056 Lithium Battery Charger Module.</p> <p></p> <p>When I hooked up the servo, it worked!</p> <p></p> <p>Here's where I put it together!</p> <p>Sometimes the servo motor would become jitery, but I believe this was the result of a bad connection in the wiring, as after combining the electronics this problem disappeared.</p>"},{"location":"stem/disability-forewarning-system/display-electronics/#combining-with-hat","title":"Combining With HAT","text":"<p>I put it in the e-paper HAT, and I couldn't connect to it in Thonny. I realized I placed it one too many over to the side, and after changing that, it worked!</p> <p>This page leads me to believe that the e-paper uses SPI, so GP21 and UART 0 shouldn't be a problem!</p> <p>I found switching between the angles 0 and 100 was optimal.</p> <p>Now it was time to design the PCB board.</p>"},{"location":"stem/disability-forewarning-system/display-electronics/#display-electronics-pcb","title":"Display Electronics PCB","text":""},{"location":"stem/disability-forewarning-system/display-electronics/#designing-in-eaglecad","title":"Designing in EagleCAD","text":""},{"location":"stem/disability-forewarning-system/display-electronics/#iteration-1","title":"Iteration 1","text":"<p>Note I used <code>right-click &gt; Mirror</code> to mirror the pico footprints since I inserted the board from the back using through-hole milling.</p> <p>I used these two different footprints for pads:</p> <ul> <li>wirepad &gt; SMD5</li> <li>wirepad &gt; SMD2</li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p> <p>This didn't work until I soldered the wire on it because I realized that the <code>VSYS</code> pin only works when the board is powered via USB.</p> <p></p>"},{"location":"stem/disability-forewarning-system/display-electronics/#iteration-2","title":"Iteration 2","text":"<p>I redesigned the board to fix the <code>VSYS</code> problem. I played with milling different routing patterns, some of which failed to mill because of too-small trace widths (see below).</p> <p></p> <p>In terms of milling bits, I ended up using a <code>0.8mm</code> flat end mill.</p> <p></p> <p><code>VBUS</code> didn't completely solve the problem.</p> <p>I redid it. It stripped when I tried to unsolder a couple of times, so I had to re-mill the board. Then it worked!</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/display-electronics/#iteration-3","title":"Iteration 3","text":"<p>To modify the wiring, I had to add a <code>0ohm</code> resistor to jump one trace over another. Now the design was fully functional!</p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/","title":"Display Mechanism","text":""},{"location":"stem/disability-forewarning-system/display-mechanics/#display-mechanics","title":"Display Mechanics","text":""},{"location":"stem/disability-forewarning-system/display-mechanics/#finding-similar-examples","title":"Finding Similar Examples","text":"<p>Here are different projects I've found that have a similar e-paper display so that I can have a starting place for the mounting desing.</p> <ul> <li>Instructable YouTube Subscriber Counter</li> <li>E-paper Picture Frame</li> <li>Design Files for the Picture Frame</li> </ul> <p>Here's my Cuttle Project. For all of the iterations, the only changes I made were adjusting the parameter values of my parametric design.</p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#display-case","title":"Display Case","text":""},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-1","title":"Iteration 1","text":""},{"location":"stem/disability-forewarning-system/display-mechanics/#laser-cutting","title":"Laser Cutting","text":"<p>I used cardboard to test the design.</p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#didnt-fit","title":"Didn't Fit","text":""},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-2","title":"Iteration 2","text":""},{"location":"stem/disability-forewarning-system/display-mechanics/#design-adjustments","title":"Design Adjustments","text":"<p>Ribbon cable hole moved so it's not covered up. Sizing slightly adjusted.</p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#fit-perfectly","title":"Fit Perfectly","text":"<p>It fit perfectly! Now I need to add screwholes.</p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-3","title":"Iteration 3","text":""},{"location":"stem/disability-forewarning-system/display-mechanics/#design-adjustments_1","title":"Design Adjustments","text":"<p>I decided to use <code>M4X12</code> screws. I referenced Week 2 when I learned about screw naming conventions. I chose a nominal diameter of <code>4mm</code> somewhat arbitrarily, but chose <code>12mm</code> length specifically because the material is about <code>0.125in</code> wide which is <code>3.175mm</code>, and three pieces is <code>~10mm</code>, and when I incorporate attachment to the servo, some extra screw length will be necessary.</p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#result","title":"Result","text":"<p>I had to switch to <code>M4X16</code> screws as the <code>M4X12</code> screws weren't long enough. These worked but I may end up using <code>M4X20</code> screws in the final project. The case sometimes shifts a little bit, but adjusting the middle size slightly or have little pieces of rubber or dabs of hot glue should fix the problem.</p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#frame-mechanism","title":"Frame Mechanism","text":""},{"location":"stem/disability-forewarning-system/display-mechanics/#new-design-idea","title":"New Design Idea","text":""},{"location":"stem/disability-forewarning-system/display-mechanics/#servo-arm-attachment","title":"Servo Arm Attachment","text":""},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-1_1","title":"Iteration 1","text":"<p>Servo attachment screws are M3 so <code>3mm</code> nominal diameter. Centers of two holes are <code>4mm</code> apart.</p> <p>First draft of the design - realized can't have two screws. Still held fairly straight but wanted to be sure. I printed it on 100% infill. I oriented it flat so that I don't have to use supports, and it will be less likely to break from torque from the motor.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-2_1","title":"Iteration 2","text":"<p>Found this design. I first set the tolerance for the fit to <code>0.25mm</code> parametrically. I also just left both screwholes for now as I'm not sure which one is optimal to use. I printed it on 100% infill. I'm also considering printing in Nylon for the final piece to make it stronger. I'm considering adding more area around the sides that are cut thin because of the fit onto the motor.</p> <p></p> <p>Huge success!</p> <p></p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#case-attachment","title":"Case Attachment","text":""},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-1_2","title":"Iteration 1","text":"<p>https://grabcad.com/library/m4-hex-nut-1</p> <p></p> <p>I also updated the case design to include another screwhole. I forgot to add an offset or tolerance from the 3D-printed piece to the case.</p> <p>The piece fit snugly and the hex nut fit. I decreased the tolerance slightly from <code>0.4mm</code> to <code>0.2mm</code>.</p> <p></p> <p></p> <p>Here's the first iteration case attachment on the old version of the case without the screwhole.</p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-2_2","title":"Iteration 2","text":"<p>This iteration was an improvement, however the fit was still small around the case, possibly an error in the manufacturing of the cardboard I was using. The PLA flexes slightly so this shouldn't end up being a problem. The larger issue is that the hex bolt hole is still too large, and it's very hard to tighten the screw. I changed the tolerance to <code>0mm</code> since maybe the CAD model of the hex bolt I had found was problematic.</p> <p></p> <p>Here's the updated case.</p> <p></p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-3_1","title":"Iteration 3","text":"<p>The new tolerance still didn't work. I measured it instead of using the CAD model online and saw the diameter of the hex bolt was <code>2in</code>. Currently it had a radius of <code>3.475mm = 0.1368in</code> which should be <code>1in = 2.54mm</code>. So I changed the offset to <code>2.54mm - 3.475mm</code>. </p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-4","title":"Iteration 4","text":"<p>Now it was too tight of a fit. For the next iteration I added <code>0.5mm</code> to the size.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#frame","title":"Frame","text":"<p>This diagram revealed that my frame can be at most <code>16.75in</code> tall. My current design is approximately <code>10in</code>, so this shouldn't be a problem.</p> <p></p> <p>I also measured both the distance from the point or rotation of the servo to the end of the arm attachment, which was <code>~65mm</code> and the point of rotation of the case to the case attachment, which was also <code>~65mm</code>, and since the angle where the lines will be parallel and not overlapping will never be achieved with the design, there should be no problem with the arm length.</p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#servo-mount","title":"Servo Mount","text":""},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-1_3","title":"Iteration 1","text":"<p>Found this design of a servo. Could also use the one from the other part</p> <p>I had to make the frame slightly taller so that the suction cup and the servo holder's screws wouldn't overlap.</p> <p>I decided to use <code>M4</code> screws for this, as well. For future iterations I may add a hole indent for the head of the screw, but don't feel it's necessary for now, and I don't have this for the case itself since it's laser cut.</p> <p>The holes on the servo motor are <code>M3</code> screws. I just projected the holes from the CAD model to create the holes.</p> <p>I also noticed that the servo arm was weirdly moved, and I'm not sure why this happened as I don't believe I've moved anything, but I have the STL model saved, so I'm not too concerned. After correcting this because of something that moved (I'm not sure what), the case attachment didn't line up with the hole, but the servo can always be at an angle, so this shouldn't be a problem.</p> <p></p> <p>I printed this piece with <code>20%</code> infill for now, but will use <code>100%</code> infill for the final part.</p> <p></p> <p></p> <p></p> <p>It worked perfectly!</p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#suction-cup-attachment","title":"Suction Cup Attachment","text":""},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-1_4","title":"Iteration 1","text":"<p>I tested the suction cup screws and found that they are <code>M4</code> screws.</p> <p>Since I had the entire frame designed in Fusion 360 and not Cuttle, I followed this tutorial to create a sketch of the vector lines and exported it as a DXF directly from Fusion 360.</p> <p>It worked!</p> <p></p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#pins","title":"Pins","text":"<p>I decided to reverse the first design I came up with (pictured below) and have both the pin and the pin hole be 3D-printed. This way I could put the pin and the hole inside of each other before connecting it to the frame and case - otherwise, I would never be able to get the case in the frame.</p> <p></p> <p>I also realized that, up until now, I've been designing the case on <code>3/8in</code> material. For now I'll change it to <code>1/8in</code> but change to <code>1/4in</code> if it turns out our lab has a greater abundance of that material.</p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-1_5","title":"Iteration 1","text":"<p>I referenced this article to make \"floating\" pieces in Prusa by merging the two parts then moving one individually by referencing the hierarchy. I set the print detail to <code>0.1mm</code> and <code>100%</code> infill. I see a blue line on the top of the circle of the outer-hinge, so I'm not sure whether the print will work, but I'll try it.</p> <p></p> <p>The print-in-place design worked first try!</p> <p></p> <p></p> <p></p> <p>The design worked very well, but the holes were very tight for the screw. It still worked, and I might increase the size of the hole be <code>0.5mm</code> if it causes problems throughout the rest of the prototyping process.</p> <p>I re-printed the same piece for the second side.</p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-2_3","title":"Iteration 2","text":"<p>I increased the hole size by <code>0.5mm</code>, changing the diameter from <code>4mm</code> to <code>4.5mm</code>. I also rotated it temporarily in Fusion 360 before exporting into Prusa so that I wouldn't have to merge and reposition the parts before slicing.</p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#putting-it-together","title":"Putting It Together","text":"<p>I assembled the design and it fit together perfectly!</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>The product will not be on the driver-side window in the end, I'm just testing it on a window in the picture below.</p> <p></p> <p>When I hooked up the electronics, it worked!</p> <p>But the 0 wasn't at the correct spot, so I set the servo to 0 in the code, took off the arm, and put it back on at the right spot.</p> <p></p> <p>now it was correct!</p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#electronics-case","title":"Electronics Case","text":""},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-1_6","title":"Iteration 1","text":"<p>The circuit board is slightly less than <code>100mm X 30mm</code>. To account for the <code>43mm</code> long bluetooth module, is should be at least <code>150mm X 30mm</code>. And to give extra room for wires, it should be at least <code>150mm X 50mm</code>. Since the battery is <code>55mm X 5mm X 75mm</code>, the case should be enlarged to <code>150mm X 40mm X 60mm</code>.</p> <p>I also added four M3 screwholes for the ribbon cable adaptor. I used measurements of <code>2mm</code> from the outside of the hole to the edge of the board, <code>13.5mm</code> from the outside edges of two holes vertically, and <code>21.5mm</code> between the insides of the holes horizontally to create the deisgn. In the end, this adaptor caused stress on the ribbon cable which ruined another one of the displays. I ended up using adhestive to attach it to the back of the display case.</p> <p></p> <p>The 3D-printed threads worked sufficiently, although if tightened too hard, they lose the ability to tighten at all. After experimenting with both hex bolts and 3D-printed threads in my project, I've found that hex bolts tend to work more smoothly.</p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-2_4","title":"Iteration 2","text":"<p>First iteration - screw holes very tight fit but screwed in tight. The ones without threads couldn't fit an M3 screw in, so increased size by 0.5mm.</p> <p>Also realized I forgot the add a hole for the servo motor cables. I used this calculator to figure out the diameter of the hole for three 1.5mm wires, and a 4mm hole worked! However, pulling the heads of the wires through the small hole was not easy, but they never accidentally were pulled back into the electronics case.</p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-3_2","title":"Iteration 3","text":"<p>When I cut the lid out of acryllic, the screwholes were too close to the edge and broke, so I redesigned it in the next iteration to have more space around the screwholes. I also added more area around the screwholes in the design of the case, but I never ended up printing it.</p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-4_1","title":"Iteration 4","text":"<p>I implemented the changes described in the previous iteration by adding more area around the screwholes.</p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-5","title":"Iteration 5","text":"<p>I added a switch in the power wire coming out of the <code>TP4056 Module</code> (not from the battery so that the battery could charge even if the switch isn't turned on). I added a <code>6mm</code> hole for the switch and secured it with a washer and bolt. This worked first try!</p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-6","title":"Iteration 6","text":"<p>I added a hole for the charger. It took several tried to get the dimensions exactly correct. I temporarily held the charger in place using nitto tape, but I modified the design of the electronics case to include screwholes. Without the screwholes, it is difficult to plug into the charger without it moving, and removing the lid before charging is recommended.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#cutting-acryllic","title":"Cutting Acryllic","text":""},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-1_7","title":"Iteration 1","text":"<p>To cut my <code>1/8\"</code> acryllic, I used the <code>Medium (*color*) Acryllic</code> setting in Glowforge. I had to be sure to turn off the custom cardboard setting on the individual SVGs even though I selected the material overall.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/display-mechanics/#iteration-2_5","title":"Iteration 2","text":"<p>I had a problem where, when the screen turned, the bolt on the hinge would collide with the frame. I measured that the distance from the axis of rotation to the end of the bolt is <code>11.5mm</code>, so to be safe, I added a hole that's <code>13mm</code> from the axis of rotation.</p> <p>I also noticed that I accidentally moved the frame slightly in Fusion 360 before making the elecrtonics box, so it was sightly off center. I was having trouble correcting this problem it so I just left it, as it didn't make any noticeable difference.</p> <p>I also ensured that the new design would preclude collisions in Fusion 360.</p> <p></p> <p>The new design worked well! I had also added fillets.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"stem/disability-forewarning-system/final-project-planning/","title":"Planning","text":""},{"location":"stem/disability-forewarning-system/final-project-planning/#final-project-outline","title":"Final Project Outline","text":""},{"location":"stem/disability-forewarning-system/final-project-planning/#the-idea","title":"The Idea","text":"<p>Tourette Syndrome is not deadly, but ignorance about the condition can be life-threatening. For people with severe tics, their movements and vocalizations are often misinterpreted by law enforcement as intoxication or aggression, dangerously escalating encounters. I wanted to create a device to help facilitate safe interactions between law enforcement and people wtih severe tics.</p> <p>The first step was to gain a strong understanding of the needs of drivers who have severe tics, as well as the perspective of law enfrocement officers at a traffic stop. To understand driver needs, I interviewed drivers with Tourette's. I learned that the only current solution for drivers with severe tics is an information card that can be handed over to a law enforcement officer. However, there are several major problems with this solution:</p> <ul> <li>Reaching for the card takes the driver's hands out of the officer's view, potentially making the officer believe the driver is reaching for a weapon.</li> <li>If a driver waits for the officer to arrive to retrieve the card and is experiencing severe tics, the situation could escalate before information is provided.</li> </ul> <p>Current Card</p> <p></p> <p>Next, I met with local police officers. They provided great insights from the law enforcement perspective about what's going through an officer's mind at a traffic stop and how they are trained to handle situations with different special populations. The biggest takeaway was that it is important to communicate to the officer that the driver has Tourette Syndrome as early as possible in the encounter. An officer starts at the highest level of alert and caution possible because suspecting the worst leaves them the most prepared.</p> <p>From these initial discussions, I first thought that the best solution would be a flip-up screen that mounts onto the driver-side outside mirror of a car and informs the officer that the driver has Tourette Syndrome. The screen would remain folded until the driver is pulled over. The officer would notice the device while walking up to the car, diffusing the situation as early as possible. Communicating in a precise and concise manner is especially important for officers who've recieved less training with special populations. Later on, I changed this design based on another interview.</p>"},{"location":"stem/disability-forewarning-system/final-project-planning/#weekly-plan","title":"Weekly Plan","text":"Week Contribution To Final Project Computer Aided Design Attachment mechanism to mirror, cup holder mechanism, screen case, (screen weatherproofing?) Computer Controlled Cutting Cup holder mechanism Electronics Production Microcontrollers for screen and trigger button 3D Scanning and Printing Screen case Electronics Design Microcontrollers for screen and trigger button Computer Controlled Machining TBD Embedded Programming Programming for both microcontrollers Molding and Casting Attachment mechanism to mirror Input Devices Trigger button, accelerometer (to detect when the car is stopped), (voice activated)? Output Devices Speaker, screen, servo to move up screen Networking and Communications SMS messaging, wireless communication from button to mirror microcontroller Mechanical Design TBD Interface Application and Programming Interfacing trigger button and accelerometer with output servo, screen, and speakers"},{"location":"stem/disability-forewarning-system/final-project-planning/#rough-sketch","title":"Rough Sketch","text":"<p>Initially, I thought that a button on the steering wheel could be pressed by the driver to raise the screen mounted on the mirror and communicate that the driver has Tourette Syndrome. I believed that having the button on the steering wheel would require the least amount of movement by the driver as the officer approached.</p> <p></p> <p>However, I decided against the button because it could accidentally be pressed while driving. I started to design a mechanism with a button that fits into a cupholder that could activate the device.</p> <p></p> <p>I consulted with Dr. Fagan, a professor at UNC Charlotte, to brainstorm other potential ideas for the screen. We talked about a see-through LED screen that goes over the mirror and only turns on when activated, as well as a bendable LED screen that is released over the driver-side door when the window is rolled down.</p> <p>If I still had time during Fab Academy after making the Minimum Viable Product (MVP), I planned to create a mobile app or website that would allow users customize the message displayed on the screen to expand the technology to help people with other conditions who may have difficulty communicating with law enforcement. Also, if time permitted, I would try to add a mechanism to the cup holder case that expands to fit a cup holder of any size. </p>"},{"location":"stem/disability-forewarning-system/final-project-planning/#logic-flowchart","title":"Logic Flowchart","text":"<pre><code>graph LR\nA(Trigger Button Pressed) ==&gt; B{Is Car Parked?}\nB --&gt; |Yes| C((Display Screen))\nB --&gt; |No| D((Do Nothing))</code></pre>"},{"location":"stem/disability-forewarning-system/final-project-planning/#project-overhaul","title":"Project Overhaul","text":"<p>I interviewed another law enforcement official on to get his advice on my project. He suggested that a display in the back window of the car might be a better idea than on the mirror for several reasons:</p> <ul> <li>The officer is focusing on the individual inside of the vehicle. The officer would only look at the mirror if it were the only line of visiblity to the driver. An officer would be more likely to see the display if it were in the back window.</li> <li>A device inside of the car mounted to the back window would not need clearance from the DMV.</li> <li>A screen mounted to the rear window could provide a larger viewing space.</li> <li>A device that resides inside of the car would not require weather-proofing.</li> </ul> <p>Considering these insights, I changed the display of my project. The next challenge was to determine how to attach the device to the inside roof of the car and how to attach the motor to the display.</p> <p>I originally imagined the servo motor to be placed like this where the screen flips downwards from the inside roof of the car.</p> <p></p> <p>I considered moving the display upward with a sliding motion like this instead, but ended up going back to the above design since the angle between the roof and the trunk would prevent the upward sliding motion.</p> <p>For the motor itself, I planned to make a servo-driven hinge mechanism similar to products I found while researching. This Thingiverse page has the <code>STL</code> files from the design below, as well as a technical drawing. This GrabCAD page has 3D models also containing the servo motor itself.</p> <p></p> <p>I also planned on attaching the device through suction cups to the back window, as I felt this would be the easiest and most secure mechanism for holding the display in place.</p>"},{"location":"stem/disability-forewarning-system/final-project-planning/#design-shift","title":"Design Shift","text":"<p>I met with Dr. Fagan again who suggested that I slightly change my design so that the motor is on the axis the screen is rotating around.</p> <p></p> <p>Using this servo motor case model, I adapted my design. Since I wasn't sure what motor I'd use yet, I didn't design the attachment mechanism between the motor shaft and the screen.</p> <p></p> <p>Next, given the weight of my screen and case <code>x</code>, I wanted to know the minimum torque for a motor to be able to turn it. Dr. Fagan taught me to calculate the torque by multiplying the gravitational force by the distance between the axis of rotation and the center of mass. He said I could ignore the angle since it starts out horizontal. He then said I should multiply the result by a safety factor of two.</p> <p></p> <p>Here's the calculation simplified to an inequality for which I could plug in my material and design once it was finalized: <code>torque &gt;= 19.6 * m * r</code> where <code>m</code> is the mass and <code>r</code> is the distance from the motor to the center of gravity.</p> <p></p>"},{"location":"stem/disability-forewarning-system/final-project-planning/#additional-features","title":"Additional Features","text":"<p>Also, beyond the MVP, I wanted to implement low-battery notifications to make sure that the user would never be in a situation where the device fails during an encounter with law enforcement.</p>"},{"location":"stem/disability-forewarning-system/motor-calculations/","title":"Motor Calculations","text":""},{"location":"stem/disability-forewarning-system/motor-calculations/#motor-calculations","title":"Motor Calculations","text":"<p>Based off of my learning how to calculate torque, I'll find the minimum torque necessary for my project. I want to make all of my estimates conservative to be sure the motor will function smoothly.</p>"},{"location":"stem/disability-forewarning-system/motor-calculations/#estimating-weight","title":"Estimating Weight","text":"<p>I'm not sure of the exact values, but I overestimate anything I'm unsure of here.</p> <p>According to this website, <code>1/2\"</code> acryllic is <code>2.879 lbs/sq. ft</code>.</p> <p><code>M = (2.879lbs/ft^2) * (12in * 8in) * (1ft / 12in)^2 * (0.453kg / 1lb) = 0.869458kg</code></p> <p></p> <p><code>r = 7.211in * (0.0254m / 1in) = 0.183m</code></p> <p><code>torque &gt;= 19.6 * M * r</code></p> <p><code>torque &gt;= 19.6 * 0.869458kg * 0.183m</code></p> <p><code>torque &gt;= 3.12 N m</code></p> <p>According to this website, <code>3.12 N m * (0.1019716213 kilogram-force meter / 1 N m) = 0.318 kg-m</code></p> <p><code>torque &gt;= 0.318 kg-m</code></p> <p>So, I ordered two of this motor. I know it's overkill, but I'm sure it will work, it has metal gears, and I was having trouble finding motors in the <code>~1kg</code> range.</p> <p>I also realized that my calculations assume the center of gravity and the rotation poins have no difference in placement on the axis perpendicular to the plane of the triangle drawn above, but any small different here shouldn't make a significant impact.</p>"},{"location":"stem/disability-forewarning-system/project-reflection/","title":"Final Project: Reflection","text":""},{"location":"stem/disability-forewarning-system/project-reflection/#final-project-reflection","title":"Final Project: Reflection","text":"<p>All Fusion 360 CAD Files</p> <p>Cupholder CAD With Textures</p> <p>Display CAD With Textures</p> <p>Final Code (Download Previous Iterations Here)</p> <p>Cupholder Production Files</p> <p>Display Case Production Files</p> <p>Epaper Image Files</p> <p>PCB Export Files</p> <p>Here's my Cuttle Project. The exported SVGs from different iterations are included in the Display Case Production Files</p>"},{"location":"stem/disability-forewarning-system/project-reflection/#reflection","title":"Reflection","text":"<p>I am proud of my final project and feel that it demonstrates a wide variety of skills I've learned throughout Fab Academy. After finishing an MVP, I also had to add more features, like a recharging port in the display electronics and an acryllic lid to the electronics case. I was able to overcome challenges I'd faced in previous weeks, such as interfacing with an e-paper display, and I've learned the importance of only changing one variable at a time and closely following instructions before modifying components of a tutorial.</p>"},{"location":"stem/disability-forewarning-system/project-requirements/","title":"Project Summary","text":""},{"location":"stem/disability-forewarning-system/project-requirements/#project-summary","title":"Project Summary","text":""},{"location":"stem/disability-forewarning-system/project-requirements/#final-project-demonstration","title":"Final Project Demonstration","text":"<p>Here's a link to a higher quality export of the video!</p>"},{"location":"stem/disability-forewarning-system/project-requirements/#essential-questions","title":"Essential Questions","text":""},{"location":"stem/disability-forewarning-system/project-requirements/#what-does-it-do","title":"What does it do?","text":"<p>Whenever a button is pressed in the driverside cupholder of a car, a display is lowered into the rear window and an e-paper display flashes, displaying a message that informs an officer that the driver has Tourette Syndrome.</p>"},{"location":"stem/disability-forewarning-system/project-requirements/#whos-done-what-beforehand","title":"Who\u2019s done what beforehand?","text":"<p>The current solution used by the Tourette Association of America are information cards that people with Tourette can hand to a law enforcement officer, yet there are several problems with this card:</p> <ul> <li>Scrambling for the card making the officer nervous</li> <li>Escalation before the officer asks for documents</li> <li>Communication about reaching for the card if the driver has vocal tics</li> </ul> <p></p> <p>I met with local police officers. They provided great insights from the law enforcement perspective about what's going through an officer's mind at a traffic stop and how they are trained to handle situations with different special populations. The biggest takeaway was that an officer starts at the highest level of alert and caution possible - suspecting the worst leaves them the most prepared, but being too relaxed then encountering a dangerous scenario puts the officer's life at risk. Therefore, it is important to communicate to the officer that the driver has Tourette's as early as possible in the encounter.</p> <p>Our conclusion from the discussion was that the best solution would be some device visible to the officer walking up to the car that informs them that the driver has Tourette's and is not being aggressive or intoxicated, etc. This way the driver is not fiddling around with a device and the officer will notice the device as they're walking up to the car, diffusing the situation as early as possible. Communicating in a precise and concise manner is especially important when dealing with officers who've recieved less training with special populations.</p> <p>Here are different projects I've found that have a similar e-paper display so that I can have a starting place for the mounting desing.</p> <ul> <li>Instructable YouTube Subscriber Counter</li> <li>E-paper Picture Frame</li> <li>Design Files for the Picture Frame</li> </ul>"},{"location":"stem/disability-forewarning-system/project-requirements/#what-did-you-design-and-what-parts-and-systems-were-made","title":"What did you design and what parts and systems were made?","text":"<p>Parts and Systems Designed and Made:</p> <ul> <li>Cupholder Electronics Casing, also see here</li> <li>Cupholder Electronics - PCB</li> <li>Display Electronics Casing</li> <li>Display Frame</li> <li>Epaper Casing</li> <li>Display Electronics - PCB, Wiring</li> </ul> <p>Parts and Systems Bought:</p> <ul> <li>Button</li> <li>Suction cups</li> <li>Microcontrollers (RP2040 &amp; ESP32C3)</li> <li>Epaper Display</li> <li>Battery Recharging Module</li> <li>Batteries</li> <li>Servo Motor</li> </ul>"},{"location":"stem/disability-forewarning-system/project-requirements/#what-materials-and-components-were-used-where-did-they-come-from-how-much-did-they-cost","title":"What materials and components were used, where did they come from, how much did they cost?","text":"<p>See the Bill-Of-Materials here!</p> Item Count Use Cost Link 7.5\" E-Paper Display 1 Display message in rear window $57.99 WaveShare 6\"X8\"X1/8\" Sheets of Black Acryllic 3 Case for display $22.56 Amazon (more than necessary) 11\"X19X\"1/8\" Sheets of Clear Acryllic 2 Frame for display $29.99 Amazon (more than necessary) 20kg Servo Motor 1 Moving display $11.99 Amazon Raspberry Pi Pico RP2040 1 Display electronics $9.95 Amazon Seeed Studio XIAO ESP32C3 1 Cup Holder Electronics $9.90 Amazon TP4056 Lithium Battery Charger Module 1 set of 2 Battery recharging $10.99 Amazon Lipo Battery 2 Powering electronics $46.48 Amazon HM-10 BLE Module 1 Wireless communication $10.99 Amazon Screws and hex nuts -- Assembly -- -- PCB Copper -- PCB boards -- -- Black PLA Filament -- 3D printing -- -- White PLA Filament -- 3D printing -- -- <p>Total Cost: $210.84</p>"},{"location":"stem/disability-forewarning-system/project-requirements/#what-processes-were-used","title":"What processes were used?","text":"<ul> <li>2D Design<ul> <li>Laser Cutting with Cuttle</li> <li>Electronics Design with EagleCAD<ul> <li>Cupholder Electronics</li> <li>Display Electronics</li> </ul> </li> </ul> </li> <li>3D Design<ul> <li>3D Printing with Fusion 360<ul> <li>Cupholder</li> <li>Display Hinges</li> <li>Servo Arm Attachment</li> <li>Servo Mount</li> </ul> </li> <li>Full CAD Models<ul> <li>Cupholder CAD</li> <li>Display CAD</li> </ul> </li> </ul> </li> </ul> <ul> <li>Additive Fabrication<ul> <li>3D Printing<ul> <li>Cupholder</li> <li>Display Hinges</li> <li>Servo Arm Attachment</li> <li>Servo Mount</li> </ul> </li> </ul> </li> <li>Subtractive Fabrication<ul> <li>Laser Cutting</li> <li>Milling<ul> <li>Cupholder Electronics</li> <li>Display Electronics</li> </ul> </li> </ul> </li> <li>Electronics Design<ul> <li>EagleCAD<ul> <li>Cupholder Electronics</li> <li>Display Electronics</li> </ul> </li> </ul> </li> <li>Electronics Production<ul> <li>Candle<ul> <li>Cupholder Electronics</li> <li>Display Electronics</li> </ul> </li> </ul> </li> <li>Embedded Microcontroller Interfacing and Programming<ul> <li>Programming<ul> <li>Arduino/C++</li> <li>MicroPython</li> </ul> </li> <li>Networking<ul> <li>UART</li> <li>SPI</li> <li>Bluetooth Low Energy</li> </ul> </li> </ul> </li> <li>System Integration and Packaging<ul> <li>Electronics Integration</li> <li>System Assembly</li> <li>Electronics Casing<ul> <li>Cupholder Electronics</li> <li>Display Electronics</li> </ul> </li> </ul> </li> </ul>"},{"location":"stem/disability-forewarning-system/project-requirements/#what-questions-were-answered","title":"What questions were answered?","text":"<ul> <li>How will the display be mounted in the car?</li> <li>How will the microcontrollers communicate wirelessly?</li> <li>What torque is required from the servo motor?</li> </ul>"},{"location":"stem/disability-forewarning-system/project-requirements/#what-worked-what-didnt","title":"What worked? What didn\u2019t?","text":"<p>The entire premise of the project was successfuly, including the trigger mechanism in the cupholder, the moving display, the message and image on the display, and the mounting mechanism. Throughout the process I had many smaller failures documented on their respective pages, but in the end, the only systems that weren't functioning were those beyond the MVP which I didn't get an opportunity to complete, including iPhone alerts when the system is activating and an app that interfaces with the display to customize the message, although these systems can be implemented in future improvements upon the project.</p>"},{"location":"stem/disability-forewarning-system/project-requirements/#how-was-it-evaluated","title":"How was it evaluated?","text":"<p>During Applications and Implications Week, I said the project would be successful if it met all of the following criteria:</p> <ul> <li>When the button is pressed, the display is moved into the rear window</li> <li>There is a message shown on the display</li> <li>The display is visible from behind the car</li> </ul> <p>All of these criteria are met, so the project is successful!</p>"},{"location":"stem/disability-forewarning-system/project-requirements/#what-are-the-implications","title":"What are the implications?","text":"<p>The technology developed through this project can be expanded to all different conditions when informing officers at a traffic stop, including deaf, austistic, and other groups. I hope that collaboration with different organizations will distribute the product to people whose lives it will benefit.</p>"},{"location":"stem/disability-forewarning-system/project-requirements/#what-license-was-chosen","title":"What license was chosen?","text":"<p>The work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</p>"},{"location":"stem/disability-forewarning-system/wireless-communication/","title":"Wireless Communication","text":""},{"location":"stem/disability-forewarning-system/wireless-communication/#wireless-communication","title":"Wireless Communication","text":"<p>I used the code from this website for the ESP32C3. I also installed the ArduinoBLE package in the Arduino IDE through the package manager.</p> <p>I then downloaded the <code>rNF Connect</code> app on my phone and followed the instructions in the tutorial, which worked!</p> <p></p> <p></p> <p>Working ESP32C3 code:</p> <pre><code>#include &lt;ArduinoBLE.h&gt;\n\nBLEService ledService(\"19B10000-E8F2-537E-4F6C-D104768A1214\"); // Bluetooth\u00ae Low Energy LED Service\n 6\n// Bluetooth\u00ae Low Energy LED Switch Characteristic - custom 128-bit UUID, read and writable by central\nBLEByteCharacteristic switchCharacteristic(\"19B10001-E8F2-537E-4F6C-D104768A1214\", BLERead | BLEWrite);\n\nconst int Relay1 = D2; \nconst int Relay2 = D3; \nconst int Relay3 = D4; \nconst int Relay4 = D5; \n\nint Rvalue; // received value from Bluetooth Application\n\n\nvoid setup() {\n  Serial.begin(9600); //Baudrate\n\n  // Set all the Relays as output\n  pinMode(Relay1, OUTPUT);\n   pinMode(Relay2, OUTPUT);\n     pinMode(Relay3, OUTPUT);\n   pinMode(Relay4, OUTPUT);\n\n  // begin initialization\n  if (!BLE.begin()) {\n    Serial.println(\"starting Bluetooth\u00ae Low Energy module failed!\");\n\n    while (1);\n  }\n\n  // set advertised local name and service UUID:\n  BLE.setLocalName(\"AdamsBluetoothESP32C3\");            // this will appear in the App search result.\n  BLE.setAdvertisedService(ledService);\n\n  // add the characteristic to the service\n  ledService.addCharacteristic(switchCharacteristic);\n\n  // add service\n  BLE.addService(ledService);\n\n  // set the initial value for the characeristic:\n  switchCharacteristic.writeValue(0);\n\n  // start advertising\n  BLE.advertise();\n\n  Serial.println(\"BLE LED Peripheral\");\n}\n\nvoid loop() {\n  // listen for Bluetooth\u00ae Low Energy peripherals to connect:\n  BLEDevice central = BLE.central();\n\n  // if a central is connected to peripheral:\n  if (central) {\n    Serial.print(\"Connected to central: \");\n    // print the central's MAC address:\n    Serial.println(central.address());\n\n\n  while (central.connected()) {\n        if (switchCharacteristic.written()) {\n          Rvalue=switchCharacteristic.value(); // received value is stored in variable Rvalue.\n          Serial.print(Rvalue);\n          Serial.println(\" recieved!\");\n        }\n      }\n\n    // when the central disconnects, print it out:\n    Serial.print(F(\"Disconnected from central: \"));\n    Serial.println(central.address());\n  }\n}\n</code></pre> <p>Some other forums revealed that HC-05's Bluetooth isn't supported by Apple, so I couldn't test whether this code works. This code (and the wiring) is based off of this website.</p> <pre><code>from machine import Pin, UART\n\nprint(\"Something is happening\")\n\nuart = UART(0, 9600)\nled = Pin(13, Pin.OUT)\n\nwhile True:\n  if uart.any() &gt; 0:\n    data = uart.read()\n    print(data)\n    if \"on\" in data:\n      led.value(1)\n      print('LED on \\n')\n      uart.write('LED on \\n')\n    elif \"off\" in data:\n      led.value(0)\n      print('LED off \\n')\n      uart.write('LED off \\n')\"\"\"\n</code></pre> <p>ChatGPT said that the HC-05 can't use BLE, and gave me the following code to run instead on the ESP32. I also could order the HM-10 module instead, but I'll try the other solution for now. After I had it write the code it said it make a mistake and the ESP32C3 specifically doesn't support non-BLE bluetooth communication.</p> <p>Here's code written for the MicroPython.</p> <pre><code>from machine import Pin, UART\nimport time\n\nuart = UART(0, 9600)  # The HM-10 uses a baud rate of 9600 by default\n\n# Send AT commands to the HM-10 module to connect to the ESP32C3\n# Replace the MAC address below with the MAC address of your ESP32C3\nuart.write('AT+CONMAC_address_of_your_ESP32C3\\n')\ntime.sleep(1) # Waiting for the connection to be established\n\nwhile True:\n    # Send a message to the ESP32C3\n    message = \"Hello, ESP32C3!\"\n    uart.write(message)\n\n    # Wait for a second before sending the next message\n    time.sleep(1)\n\n    # Read any incoming messages\n    if uart.any():\n        data = uart.read()\n        print(data)\n</code></pre> <p>Here's the code it wrote to figure out the address of the esp32c3.</p> <pre><code>#include &lt;WiFi.h&gt;\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(1000);\n\n  // Print ESP32 Local MAC Address\n  Serial.printf(\"ESP32C3 MAC Address: %s\\n\", WiFi.macAddress().c_str());\n}\n\nvoid loop() {\n}\n</code></pre> <p>Here was the output!</p> <pre><code>34:85:18:00:8C:98\n</code></pre> <p>And based on that, here's the new MicroPython code:</p> <pre><code>from machine import Pin, UART\nimport time\n\nuart = UART(0, 9600)  # The HM-10 uses a baud rate of 9600 by default\n\n# Send AT commands to the HM-10 module to connect to the ESP32C3\nuart.write('AT+CON348518008C98\\n')\ntime.sleep(1) # Waiting for the connection to be established\n\nwhile True:\n    # Send a message to the ESP32C3\n    message = \"Hello, ESP32C3!\"\n    uart.write(message)\n\n    # Wait for a second before sending the next message\n    time.sleep(1)\n\n    # Read any incoming messages\n    if uart.any():\n        data = uart.read()\n        print(data)\n</code></pre> <p>I asked to confirm that the original ESP32C3 code was advertising the BLE connection, and here was its affirmative response.</p> <p></p><pre><code>Yes, the original code you provided for the ESP32C3 does advertise it. The following line in the setup function starts the advertising process:\n</code></pre> <pre><code>BLE.advertise();\n</code></pre> <pre><code>This line makes the ESP32C3 visible to other BLE devices, which allows the HM-10 module to discover and connect to it.\n\nMoreover, the following line sets a local name for the device which can be helpful while scanning:\n</code></pre> <pre><code>BLE.setLocalName(\"AdamsBluetoothESP32C3\");\n</code></pre> <pre><code>When a BLE device such as the HM-10 scans for nearby devices, it will see a device named \"AdamsBluetoothESP32C3\". This is the name of your ESP32C3.\n</code></pre> <p>ChatGPT wrote the following code.</p> <pre><code>from machine import UART, Pin\nimport time\n\nuart = UART(0, 9600)  # init with given baudrate\n\ndef send_command(cmd):\n    uart.write(cmd + '\\r\\n')\n    time.sleep(0.5)  # Wait for command to execute\n\ndef setup():\n    send_command('AT')  # Check if HM-10 is responding\n    response = uart.read()\n    if response == 'OK':\n        print('HM-10 is responding')\n    else:\n        print('HM-10 not responding')\n\n    send_command('AT+ROLE1')  # Set HM-10 to central role\n\n    # Assuming you know the address of your peripheral\n    # Replace the X's with the address of your peripheral\n    send_command('AT+CON348518008C98\\n')  \n\ndef loop():\n    while True:\n        if uart.any():  # If there's data on UART\n            data = uart.read()\n            print('Received:', data)\n            # Process data here\n\n        # Add your own data sending logic here\n        # uart.write('Data to send')\n        time.sleep(0.1)\n\nif __name__ == \"__main__\":\n    setup()\n    loop()\n</code></pre> <p>And I used this for the ESP32-C3.</p> <pre><code>#include &lt;ArduinoBLE.h&gt;\n\nBLEService ledService(\"19B10000-E8F2-537E-4F6C-D104768A1214\"); // Bluetooth\u00ae Low Energy LED Service\n\n// Bluetooth\u00ae Low Energy LED Switch Characteristic - custom 128-bit UUID, read and writable by central\nBLEByteCharacteristic switchCharacteristic(\"19B10001-E8F2-537E-4F6C-D104768A1214\", BLERead | BLEWrite);\n\nconst int Relay1 = D2; \nconst int Relay2 = D3; \nconst int Relay3 = D4; \nconst int Relay4 = D5; \n\nint Rvalue; // received value from Bluetooth Application\n\n\nvoid setup() {\n  Serial.begin(9600); //Baudrate\n\n  // Set all the Relays as output\n  pinMode(Relay1, OUTPUT);\n   pinMode(Relay2, OUTPUT);\n     pinMode(Relay3, OUTPUT);\n   pinMode(Relay4, OUTPUT);\n\n  // begin initialization\n  if (!BLE.begin()) {\n    Serial.println(\"starting Bluetooth\u00ae Low Energy module failed!\");\n\n    while (1);\n  }\n\n  // set advertised local name and service UUID:\n  BLE.setLocalName(\"AdamsBluetoothESP32C3\");            // this will appear in the App search result.\n  BLE.setAdvertisedService(ledService);\n\n  // add the characteristic to the service\n  ledService.addCharacteristic(switchCharacteristic);\n\n  // add service\n  BLE.addService(ledService);\n\n  // set the initial value for the characeristic:\n  switchCharacteristic.writeValue(0);\n\n  // start advertising\n  BLE.advertise();\n\n  Serial.println(\"BLE LED Peripheral\");\n}\n\nvoid loop() {\n  // listen for Bluetooth\u00ae Low Energy peripherals to connect:\n  BLEDevice central = BLE.central();\n\n  // if a central is connected to peripheral:\n  if (central) {\n    Serial.print(\"Connected to central: \");\n    // print the central's MAC address:\n    Serial.println(central.address());\n\n\n  while (central.connected()) {\n        if (switchCharacteristic.written()) {\n          Rvalue=switchCharacteristic.value(); // received value is stored in variable Rvalue.\n          Serial.print(Rvalue);\n          Serial.println(\" recieved!\");\n        }\n      }\n\n    // when the central disconnects, print it out:\n    Serial.print(F(\"Disconnected from central: \"));\n    Serial.println(central.address());\n  }\n}\n</code></pre>"},{"location":"stem/disability-forewarning-system/wireless-communication/#hm-10-bluetooth-module","title":"HM-10 Bluetooth Module","text":"<p>I found this page updated today (6/1)! In the page source I saw a link to this GitHub repo. I downloaded the entire repo as a zip file. Unfortunately, the bluetooth module wasn't recognized even though the repo said I needed only <code>1.17</code> MicroPython or higher. However, the original documentation said some features may not have been released yet.</p> <p>I used the Bluetooth Terminal app on my iPhone and saw the name of the module was <code>DSD TECH</code> and the UUID (which this post revealed is not constant) was <code>A370BABF-1390-E050-10EA-338637BA6996</code>.</p> <p>I also realized that the red light flashing when it's not connected and contantly on when it is.</p> <p>Sending the <code>AT</code> commands from this source, this source, this source, this source, and thi ssource never worked for me, although I could read information from UART.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Here's the working MicroPython code.</p> <pre><code>from machine import UART, Pin\nimport time\n\nuart = UART(0, 9600, tx=Pin(0), rx=Pin(1))  # init with given baudrate\nuart.init(9600, bits=8, parity=None, stop=1)\ndef send_command(cmd):\n    uart.write(cmd + '\\r\\n')\n    time.sleep(0.5)  # Wait for command to execute\n\ndef setup():\n    send_command('wakeup')  # Check if HM-10 is responding\n    response = uart.read()\n    print(response)\n    if response == 'OK':\n        print('HM-10 is responding')\n    else:\n        print('HM-10 not responding')\n\n    send_command('AT+ROLE1')  # Set HM-10 to central role\n\n    # Assuming you know the address of your peripheral\n    # Replace the X's with the address of your peripheral\n    send_command('AT+CON348518008C98\\n')  \n\ndef loop():\n    while True:\n        if uart.any():\n            print(uart.readline())\n\nif __name__ == \"__main__\":\n    setup()\n    loop()\n</code></pre> <p>Here was the Arduino Uno code that worked.</p> <pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial HM10(2, 3); // RX = 2, TX = 3\n\nchar appData;  \n\nString inData = \"\";\n\nvoid setup()\n\n{\n\n  Serial.begin(9600);\n\n  Serial.println(\"HM10 serial started at 9600\");\n\n  HM10.begin(9600); // set HM10 serial at 9600 baud rate\n\n  pinMode(13, OUTPUT); // onboard LED\n\n  digitalWrite(13, LOW); // switch OFF LED\n\n\n}\n\n\nvoid loop()\n\n{\n\n  HM10.listen();  // listen the HM10 port\n\n  while (HM10.available() &gt; 0) {   // if HM10 sends something then read\n\n    appData = HM10.read();\n\n    inData = String(appData);  // save the data in string format\n\n    Serial.write(appData);\n\n  }\n\n\n\n\n  if (Serial.available()) {           // Read user input if available.\n\n    delay(10);\n\n    HM10.write(Serial.read());\n\n  }\n\n  if ( inData == \"F\") {\n\n    Serial.println(\"LED OFF\");\n\n    digitalWrite(13, LOW); // switch OFF LED\n\n    delay(500);\n\n  }\n\n  if ( inData == \"N\") {\n\n    Serial.println(\"LED ON\");\n\n    digitalWrite(13, HIGH); // switch ON LED\n\n    delay(500);\n\n    digitalWrite(13, HIGH); // switch ON LED\n\n    delay(500);\n\n    digitalWrite(13, LOW); // switch OFF LED\n\n    delay(500);\n\n    digitalWrite(13, HIGH); // switch ON LED\n\n    delay(500);\n\n    digitalWrite(13, LOW); // switch OFF LED\n\n    delay(500);\n\n    digitalWrite(13, HIGH); // switch ON LED\n\n    delay(500);\n\n    digitalWrite(13, LOW); // switch OFF LED\n\n    delay(500);\n\n    digitalWrite(13, HIGH); // switch ON LED\n\n    delay(500);\n\n    digitalWrite(13, LOW); // switch OFF LED\n\n    delay(500);\n\n    digitalWrite(13, HIGH); // switch OFF LED\n\n    delay(500);\n\n\n\n  }\n\n}\n</code></pre> <p>ChatGPT revised the ESP32C3's code to connect to the bluetooth module named <code>DSD TECH</code>, and it worked first try!</p> <pre><code>#include &lt;ArduinoBLE.h&gt;\n\nBLEService ledService(\"19B10000-E8F2-537E-4F6C-D104768A1214\"); \nBLEByteCharacteristic switchCharacteristic(\"19B10001-E8F2-537E-4F6C-D104768A1214\", BLERead | BLEWrite);\n\nconst int Relay1 = D2; \nconst int Relay2 = D3; \nconst int Relay3 = D4; \nconst int Relay4 = D5;\n\nint Rvalue;\n\nvoid setup() {\n  Serial.begin(9600); \n\n  pinMode(Relay1, OUTPUT);\n  pinMode(Relay2, OUTPUT);\n  pinMode(Relay3, OUTPUT);\n  pinMode(Relay4, OUTPUT);\n\n  if (!BLE.begin()) {\n    Serial.println(\"starting Bluetooth failed!\");\n    while (1);\n  }\n\n  ledService.addCharacteristic(switchCharacteristic);\n  BLE.addService(ledService);\n  switchCharacteristic.writeValue(0);\n\n  Serial.println(\"Scanning...\");\n\n  BLE.scanForName(\"DSD TECH\");\n}\n\nvoid loop() {\n  // check if a peripheral has been discovered\n  BLEDevice peripheral = BLE.available();\n\n  if (peripheral) {\n    // discovered a peripheral\n    Serial.print(\"Found \");\n    Serial.print(peripheral.address());\n    Serial.print(\" '\");\n    Serial.print(peripheral.localName());\n    Serial.println(\"'\");\n\n    // if the peripheral is named \"DSD TECH\", connect to it\n    if (peripheral.localName() == \"DSD TECH\") {\n      Serial.println(\"Connecting ...\");\n\n      if (peripheral.connect()) {\n        Serial.println(\"Connected\");\n        // if connected, do something with the peripheral:\n        // for example, read or write a characteristic\n      } else {\n        Serial.println(\"Failed to connect!\");\n      }\n    }\n  }\n}\n</code></pre> <p>It then wrote this code to send a message.</p> <pre><code>#include &lt;ArduinoBLE.h&gt;\n\nBLEService ledService(\"19B10000-E8F2-537E-4F6C-D104768A1214\"); \nBLEByteCharacteristic switchCharacteristic(\"19B10001-E8F2-537E-4F6C-D104768A1214\", BLERead | BLEWrite);\n\nconst int Relay1 = D2; \nconst int Relay2 = D3; \nconst int Relay3 = D4; \nconst int Relay4 = D5;\n\nint Rvalue;\n\nvoid setup() {\n  Serial.begin(9600); \n\n  pinMode(Relay1, OUTPUT);\n  pinMode(Relay2, OUTPUT);\n  pinMode(Relay3, OUTPUT);\n  pinMode(Relay4, OUTPUT);\n\n  if (!BLE.begin()) {\n    Serial.println(\"starting Bluetooth failed!\");\n    while (1);\n  }\n\n  ledService.addCharacteristic(switchCharacteristic);\n  BLE.addService(ledService);\n  switchCharacteristic.writeValue(0);\n\n  Serial.println(\"Scanning...\");\n\n  BLE.scanForName(\"DSD TECH\");\n}\n\nvoid loop() {\n  // check if a peripheral has been discovered\n  BLEDevice peripheral = BLE.available();\n\n  if (peripheral) {\n    // discovered a peripheral\n    Serial.print(\"Found \");\n    Serial.print(peripheral.address());\n    Serial.print(\" '\");\n    Serial.print(peripheral.localName());\n    Serial.println(\"'\");\n\n    // if the peripheral is named \"DSD TECH\", connect to it\n    if (peripheral.localName() == \"DSD TECH\") {\n      Serial.println(\"Connecting ...\");\n\n      if (peripheral.connect()) {\n        Serial.println(\"Connected\");\n        // if connected, do something with the peripheral:\n\n        // discover peripheral attributes\n        if (peripheral.discoverAttributes()) {\n          // get the remote characteristic by its UUID\n          BLECharacteristic remoteCharacteristic = peripheral.characteristic(\"19B10001-E8F2-537E-4F6C-D104768A1214\");\n\n          if (remoteCharacteristic) {\n            uint8_t value = 1;\n            if (remoteCharacteristic.canWrite()) {\n              remoteCharacteristic.writeValue(value);\n              Serial.println(\"Sent value to remote characteristic\");\n            } else {\n              Serial.println(\"Remote characteristic is not writable\");\n            }\n          } else {\n            Serial.println(\"Remote characteristic not found\");\n          }\n        } else {\n          Serial.println(\"Attribute discovery failed\");\n        }\n      } else {\n        Serial.println(\"Failed to connect!\");\n      }\n    }\n  }\n}\n</code></pre> <p>But it didn't work, so it revised it to the following.</p> <p>This repo</p> <pre><code>#include &lt;ArduinoBLE.h&gt;\n\nvoid setup() {\n  Serial.begin(9600);\n  while (!Serial);\n\n  // begin initialization\n  if (!BLE.begin()) {\n    Serial.println(\"starting Bluetooth\u00ae Low Energy module failed!\");\n\n    while (1);\n  }\n\n  Serial.println(\"Bluetooth\u00ae Low Energy Central - Peripheral Explorer\");\n\n  // start scanning for peripherals\n  BLE.scan();\n}\n\nvoid loop() {\n  // check if a peripheral has been discovered\n  BLEDevice peripheral = BLE.available();\n\n  if (peripheral) {\n    // discovered a peripheral, print out address, local name, and advertised service\n    Serial.print(\"Found \");\n    Serial.print(peripheral.address());\n    Serial.print(\" '\");\n    Serial.print(peripheral.localName());\n    Serial.print(\"' \");\n    Serial.print(peripheral.advertisedServiceUuid());\n    Serial.println();\n\n    // see if peripheral is a LED\n    if (peripheral.localName() == \"DSD TECH\") { //LED\n      // stop scanning\n      BLE.stopScan();\n\n      explorerPeripheral(peripheral);\n\n      // peripheral disconnected, we are done\n      while (1) {\n        // do nothing\n      }\n    }\n  }\n}\n\nvoid explorerPeripheral(BLEDevice peripheral) {\n  // connect to the peripheral\n  Serial.println(\"Connecting ...\");\n\n  if (peripheral.connect()) {\n    Serial.println(\"Connected\");\n  } else {\n    Serial.println(\"Failed to connect!\");\n    return;\n  }\n\n  // discover peripheral attributes\n  Serial.println(\"Discovering attributes ...\");\n  if (peripheral.discoverAttributes()) {\n    Serial.println(\"Attributes discovered\");\n  } else {\n    Serial.println(\"Attribute discovery failed!\");\n    peripheral.disconnect();\n    return;\n  }\n\n  // read and print device name of peripheral\n  Serial.println();\n  Serial.print(\"Device name: \");\n  Serial.println(peripheral.deviceName());\n  Serial.print(\"Appearance: 0x\");\n  Serial.println(peripheral.appearance(), HEX);\n  Serial.println();\n\n  // loop the services of the peripheral and explore each\n  for (int i = 0; i &lt; peripheral.serviceCount(); i++) {\n    BLEService service = peripheral.service(i);\n\n    exploreService(service);\n  }\n\n  Serial.println();\n\n  // we are done exploring, disconnect\n  Serial.println(\"Disconnecting ...\");\n  peripheral.disconnect();\n  Serial.println(\"Disconnected\");\n}\n\nvoid exploreService(BLEService service) {\n  // print the UUID of the service\n  Serial.print(\"Service \");\n  Serial.println(service.uuid());\n\n  // loop the characteristics of the service and explore each\n  for (int i = 0; i &lt; service.characteristicCount(); i++) {\n    BLECharacteristic characteristic = service.characteristic(i);\n\n    exploreCharacteristic(characteristic);\n  }\n}\n\nvoid exploreCharacteristic(BLECharacteristic characteristic) {\n  // print the UUID and properties of the characteristic\n  Serial.print(\"\\tCharacteristic \");\n  Serial.print(characteristic.uuid());\n  Serial.print(\", properties 0x\");\n  Serial.print(characteristic.properties(), HEX);\n\n  // check if the characteristic is readable\n  if (characteristic.canRead()) {\n    // read the characteristic value\n    characteristic.read();\n\n    if (characteristic.valueLength() &gt; 0) {\n      // print out the value of the characteristic\n      Serial.print(\", value 0x\");\n      printData(characteristic.value(), characteristic.valueLength());\n    }\n  }\n  Serial.println();\n\n  // loop the descriptors of the characteristic and explore each\n  for (int i = 0; i &lt; characteristic.descriptorCount(); i++) {\n    BLEDescriptor descriptor = characteristic.descriptor(i);\n\n    exploreDescriptor(descriptor);\n  }\n}\n\nvoid exploreDescriptor(BLEDescriptor descriptor) {\n  // print the UUID of the descriptor\n  Serial.print(\"\\t\\tDescriptor \");\n  Serial.print(descriptor.uuid());\n\n  // read the descriptor value\n  descriptor.read();\n\n  // print out the value of the descriptor\n  Serial.print(\", value 0x\");\n  printData(descriptor.value(), descriptor.valueLength());\n\n  Serial.println();\n}\n\nvoid printData(const unsigned char data[], int length) {\n  for (int i = 0; i &lt; length; i++) {\n    unsigned char b = data[i];\n\n    if (b &lt; 16) {\n      Serial.print(\"0\");\n    }\n\n    Serial.print(b, HEX);\n  }\n}\n</code></pre> <p>output:</p> <pre><code>    Characteristic 2a03, properties 0xA, value 0x000000000000\n        Descriptor 2803, value 0x020B00042A\n        Descriptor 2a04, value 0x5000A0000000E803\n    Characteristic 2a04, properties 0x2, value 0x5000A0000000E803\nService 1801\n    Characteristic 2a05, properties 0x20\n        Descriptor 2902, value 0x0000\nService ffe0\n    Characteristic ffe1, properties 0x16, value 0x38AB4153DAF7\n        Descriptor 2902, value 0x0000\n        Descriptor 2901, value 0x4453442054454348\n\nDisconnecting ...\nDisconnected\n</code></pre> <p>The <code>0X38AB...</code> was same as on the phone app Lightblue.</p> <p>I decided to try to modify the scanner code, which worked! I was having trouble converting a <code>char[]</code> to a <code>char*</code> so I couldn't check the entire <code>UUID</code>, but checking the fourth character worked!</p> <pre><code>#include &lt;ArduinoBLE.h&gt;\n\nvoid setup() {\n  Serial.begin(9600);\n  while (!Serial);\n\n  // begin initialization\n  if (!BLE.begin()) {\n    Serial.println(\"starting Bluetooth\u00ae Low Energy module failed!\");\n\n    while (1);\n  }\n\n  Serial.println(\"Bluetooth\u00ae Low Energy Central - Peripheral Explorer\");\n\n  // start scanning for peripherals\n  BLE.scan();\n}\n\nvoid loop() {\n  // check if a peripheral has been discovered\n  BLEDevice peripheral = BLE.available();\n\n  if (peripheral) {\n    // discovered a peripheral, print out address, local name, and advertised service\n    Serial.print(\"Found \");\n    Serial.print(peripheral.address());\n    Serial.print(\" '\");\n    Serial.print(peripheral.localName());\n    Serial.print(\"' \");\n    Serial.print(peripheral.advertisedServiceUuid());\n    Serial.println();\n\n    // see if peripheral is a LED\n    if (peripheral.localName() == \"DSD TECH\") { //LED\n      // stop scanning\n      BLE.stopScan();\n\n      explorerPeripheral(peripheral);\n\n      // peripheral disconnected, we are done\n      while (1) {\n        // do nothing\n      }\n    }\n  }\n}\n\nvoid explorerPeripheral(BLEDevice peripheral) {\n  // connect to the peripheral\n  Serial.println(\"Connecting ...\");\n\n  if (peripheral.connect()) {\n    Serial.println(\"Connected\");\n  } else {\n    Serial.println(\"Failed to connect!\");\n    return;\n  }\n\n  // discover peripheral attributes\n  Serial.println(\"Discovering attributes ...\");\n  if (peripheral.discoverAttributes()) {\n    Serial.println(\"Attributes discovered\");\n  } else {\n    Serial.println(\"Attribute discovery failed!\");\n    peripheral.disconnect();\n    return;\n  }\n\n  // read and print device name of peripheral\n  Serial.println();\n  Serial.print(\"Device name: \");\n  Serial.println(peripheral.deviceName());\n  Serial.print(\"Appearance: 0x\");\n  Serial.println(peripheral.appearance(), HEX);\n  Serial.println();\n\n  // loop the services of the peripheral and explore each\n  for (int i = 0; i &lt; peripheral.serviceCount(); i++) {\n    BLEService service = peripheral.service(i);\n\n    exploreService(service);\n  }\n\n  Serial.println();\n\n  // we are done exploring, disconnect\n  Serial.println(\"Disconnecting ...\");\n  peripheral.disconnect();\n  Serial.println(\"Disconnected\");\n}\n\nvoid exploreService(BLEService service) {\n  // print the UUID of the service\n  Serial.print(\"Service \");\n  Serial.println(service.uuid());\n\n  // loop the characteristics of the service and explore each\n  for (int i = 0; i &lt; service.characteristicCount(); i++) {\n    BLECharacteristic characteristic = service.characteristic(i);\n\n    exploreCharacteristic(characteristic);\n  }\n}\n\nvoid exploreCharacteristic(BLECharacteristic characteristic) {\n  // print the UUID and properties of the characteristic\n  Serial.print(\"\\tCharacteristic \");\n  Serial.println(characteristic.uuid());\n  char s[] = \"ffe1\";\n  Serial.print(s[3]);Serial.print(\" == \");Serial.print(characteristic.uuid()[3]);Serial.println(\"? \");Serial.println(characteristic.uuid()[3] == s[3]);\n  if (characteristic.uuid()[3] == s[3]){\n    Serial.print(\"WRITING 6 to \");Serial.println(characteristic.uuid());\n  uint8_t v_ = 6;\n  characteristic.writeValue(v_);\n  }\n  Serial.print(\", properties 0x\");\n  Serial.print(characteristic.properties(), HEX);\n\n  // check if the characteristic is readable\n  if (characteristic.canRead()) {\n    // read the characteristic value\n    characteristic.read();\n\n    if (characteristic.valueLength() &gt; 0) {\n      // print out the value of the characteristic\n      Serial.print(\", value 0x\");\n      printData(characteristic.value(), characteristic.valueLength());\n    }\n  }\n  Serial.println();\n\n  // loop the descriptors of the characteristic and explore each\n  for (int i = 0; i &lt; characteristic.descriptorCount(); i++) {\n    BLEDescriptor descriptor = characteristic.descriptor(i);\n\n    exploreDescriptor(descriptor);\n  }\n}\n\nvoid exploreDescriptor(BLEDescriptor descriptor) {\n  // print the UUID of the descriptor\n  Serial.print(\"\\t\\tDescriptor \");\n  Serial.print(descriptor.uuid());\n\n  // read the descriptor value\n  descriptor.read();\n\n  // print out the value of the descriptor\n  Serial.print(\", value 0x\");\n  printData(descriptor.value(), descriptor.valueLength());\n\n  Serial.println();\n}\n\nvoid printData(const unsigned char data[], int length) {\n  for (int i = 0; i &lt; length; i++) {\n    unsigned char b = data[i];\n\n    if (b &lt; 16) {\n      Serial.print(\"0\");\n    }\n\n    Serial.print(b, HEX);\n  }\n}\n</code></pre> <p>I also noticed that I can't decode the uint8_t only can tell what it is in its byte form.</p> <p>I then modified it to this so that it would only scan for a device that matched the HM-10's name, which worked!</p> <pre><code>#include &lt;ArduinoBLE.h&gt;\n\nvoid setup() {\n  Serial.begin(9600);\n  while (!Serial);\n\n  // begin initialization\n  if (!BLE.begin()) {\n    Serial.println(\"starting Bluetooth\u00ae Low Energy module failed!\");\n\n    while (1);\n  }\n\n  Serial.println(\"Bluetooth\u00ae Low Energy Central - Peripheral Explorer\");\n\n  // start scanning for peripherals\n  BLE.scanForName(\"DSD TECH\");\n}\n\nvoid loop() {\n  // check if a peripheral has been discovered\n  BLEDevice peripheral = BLE.available();\n\n  if (peripheral) {\n    // discovered a peripheral, print out address, local name, and advertised service\n    Serial.print(\"Found \");\n    Serial.print(peripheral.address());\n    Serial.print(\" '\");\n    Serial.print(peripheral.localName());\n    Serial.print(\"' \");\n    Serial.print(peripheral.advertisedServiceUuid());\n    Serial.println();\n\n    // see if peripheral is a LED\n    if (peripheral.localName() == \"DSD TECH\") { //LED\n      // stop scanning\n      BLE.stopScan();\n\n      explorerPeripheral(peripheral);\n\n      // peripheral disconnected, we are done\n      while (1) {\n        // do nothing\n      }\n    }\n  }\n}\n\nvoid explorerPeripheral(BLEDevice peripheral) {\n  // connect to the peripheral\n  Serial.println(\"Connecting ...\");\n\n  if (peripheral.connect()) {\n    Serial.println(\"Connected\");\n  } else {\n    Serial.println(\"Failed to connect!\");\n    return;\n  }\n\n  // discover peripheral attributes\n  Serial.println(\"Discovering attributes ...\");\n  if (peripheral.discoverAttributes()) {\n    Serial.println(\"Attributes discovered\");\n  } else {\n    Serial.println(\"Attribute discovery failed!\");\n    peripheral.disconnect();\n    return;\n  }\n\n  // read and print device name of peripheral\n  Serial.println();\n  Serial.print(\"Device name: \");\n  Serial.println(peripheral.deviceName());\n  Serial.print(\"Appearance: 0x\");\n  Serial.println(peripheral.appearance(), HEX);\n  Serial.println();\n\n  // loop the services of the peripheral and explore each\n  for (int i = 0; i &lt; peripheral.serviceCount(); i++) {\n    BLEService service = peripheral.service(i);\n\n    exploreService(service);\n  }\n\n  Serial.println();\n\n  // we are done exploring, disconnect\n  Serial.println(\"Disconnecting ...\");\n  peripheral.disconnect();\n  Serial.println(\"Disconnected\");\n}\n\nvoid exploreService(BLEService service) {\n  // print the UUID of the service\n  Serial.print(\"Service \");\n  Serial.println(service.uuid());\n\n  // loop the characteristics of the service and explore each\n  for (int i = 0; i &lt; service.characteristicCount(); i++) {\n    BLECharacteristic characteristic = service.characteristic(i);\n\n    exploreCharacteristic(characteristic);\n  }\n}\n\nvoid exploreCharacteristic(BLECharacteristic characteristic) {\n  // print the UUID and properties of the characteristic\n  Serial.print(\"\\tCharacteristic \");\n  Serial.println(characteristic.uuid());\n  char s[] = \"ffe1\";\n  Serial.print(s[3]);Serial.print(\" == \");Serial.print(characteristic.uuid()[3]);Serial.println(\"? \");Serial.println(characteristic.uuid()[3] == s[3]);\n  if (characteristic.uuid()[3] == s[3]){\n    Serial.print(\"WRITING 6 to \");Serial.println(characteristic.uuid());\n  uint8_t v_ = 6;\n  characteristic.writeValue(v_);\n  }\n  Serial.print(\", properties 0x\");\n  Serial.print(characteristic.properties(), HEX);\n\n  // check if the characteristic is readable\n  if (characteristic.canRead()) {\n    // read the characteristic value\n    characteristic.read();\n\n    if (characteristic.valueLength() &gt; 0) {\n      // print out the value of the characteristic\n      Serial.print(\", value 0x\");\n      printData(characteristic.value(), characteristic.valueLength());\n    }\n  }\n  Serial.println();\n\n  // loop the descriptors of the characteristic and explore each\n  for (int i = 0; i &lt; characteristic.descriptorCount(); i++) {\n    BLEDescriptor descriptor = characteristic.descriptor(i);\n\n    exploreDescriptor(descriptor);\n  }\n}\n\nvoid exploreDescriptor(BLEDescriptor descriptor) {\n  // print the UUID of the descriptor\n  Serial.print(\"\\t\\tDescriptor \");\n  Serial.print(descriptor.uuid());\n\n  // read the descriptor value\n  descriptor.read();\n\n  // print out the value of the descriptor\n  Serial.print(\", value 0x\");\n  printData(descriptor.value(), descriptor.valueLength());\n\n  Serial.println();\n}\n\nvoid printData(const unsigned char data[], int length) {\n  for (int i = 0; i &lt; length; i++) {\n    unsigned char b = data[i];\n\n    if (b &lt; 16) {\n      Serial.print(\"0\");\n    }\n\n    Serial.print(b, HEX);\n  }\n}\n</code></pre>"},{"location":"stem/expert-network-map/","title":"Expert Network Map","text":""},{"location":"stem/expert-network-map/#expert-network-map","title":"Expert Network Map","text":""},{"location":"stem/expert-network-map/#introduction","title":"Introduction","text":"<p>While enrolled in Fab Academy, I could easily identify experts within the Charlotte Fab Lab when I faced technical roadblocks. However, subject area experts were difficult to locate beyond my local lab, and vast amounts of helpful documentation shared by the global Fab community were hard to find. To resolve this problem, I created the <code>Expert Network Map</code>, a software project consisting of two components: a network analysis of the Fab Academy community and an interactive visualization of the network. </p> <p>I executed the project in three distinct phases: I wrote a script to collect the data, designed a text-classification AI model to sort links by subject area for analysis, and utilized D3JS to present the findings in an interactive visualization.</p> <p>Here is a link to the <code>Expert Network Map</code>! (be sure to use Chrome on a computer)</p> <p>In July 2023, I virtually presented the <code>Expert Network Map</code> at the International Fab Lab Conference and Symposium, the largest digital fabrication event in the world. The Expert Network Map is live and used by over 500 students. Find my presentation below.</p> <p>For a more detailed description of the project, please read below.</p> <p>Thank you very much to Francisco Sanchez Arroyo for all of his guidance and help, as well as to Nadieh Bremer for her advice on visualization.</p>"},{"location":"stem/expert-network-map/#project-description","title":"Project Description","text":""},{"location":"stem/expert-network-map/#background","title":"Background","text":"<p>The <code>Expert Network Map</code> is an analysis of 1,000+ members of the Fab Academy community to locate hidden expertise in 17 subject areas and an interactive visualization of the network. Fab Academy is a digital fabrication course focused on rapid-prototyping led by MIT Professor Neil Gershenfeld. All Fab Academy students keep a documentation website detailing the process of completing projects, and students are encouraged to seek out others\u2019 documentation to navigate technical roadblocks. For an example of a documentation website, see mine here. To give credit to content referenced, students add links in their own websites to the documentation websites they found helpful. See the box below for an example in my documentation website where I link to Nidhie Dhiman's documentation to give her credit.</p> <p></p>"},{"location":"stem/expert-network-map/#problem-hypothesis-and-prototype","title":"Problem, Hypothesis, and Prototype","text":"<p>While I knew who had helpful documentation in my Charlotte Fab community, with over 1,000 documentation websites globally, there was a lot of untapped expertise I couldn\u2019t locate. I recognized that if expert documentation could quickly be identified, all students would be able to work more efficiently. </p> <p>I hypothesized that the more times students\u2019 documentation websites were referenced by their peers in a subject area, the more expertise they possessed. As a test, I ran a network analysis of the 13 students in the Charlotte Fab community, quantifying the number of times each student\u2019s documentation website was referenced by their peers. The analysis yielded promising results: some students had significantly more references than the rest of the peer group, and student were frequently linking each other's websites. </p> <p></p> <p>Read more about my initial prototype here: 1st iteration and 2nd iteration.</p>"},{"location":"stem/expert-network-map/#pitch","title":"Pitch","text":"<p>I showed the results to my local lab leader, Mr. Dubick, who suggested that I talk to Professor Gershenfeld and propose analyzing the global Fab community network to identify experts by topic. Professor Gershenfeld believed the network analysis would be incredibly valuable and connected me with a mentor in Spain, Francisco Sanchez Arroyo, who advised me on the best tools and structure to use.</p>"},{"location":"stem/expert-network-map/#project-execution","title":"Project Execution","text":"<p>I executed the project in three distinct phases: I wrote a script to collect the data, designed a text-classification AI model to sort links by subject area, and utilized D3JS to present the data in an interactive visualization.</p>"},{"location":"stem/expert-network-map/#step-1-data-collection","title":"Step 1: Data Collection","text":"<p>For the first step, I wrote a <code>Python</code> script to scrape all Fab Academy students\u2019 documentation website GitLab repos over the past six years using the <code>Python-GitLab API</code> and scan for URL references to other student websites using <code>RegEx</code>. I also stored 1,000 characters before and after to use for classification and used Pandas to create a reference matrix that structured the data for analysis. My program yielded a database of ~29,000 references.</p>"},{"location":"stem/expert-network-map/#step-2-ai-sorting-data-analysis","title":"Step 2: AI, Sorting Data &amp; Analysis","text":"<p>After the data were collected, I knew I had a significant challenge. For the network analysis to be useful, I needed to calculate the number of times a student\u2019s documentation was referenced for a specific subject area. I had collected tens of thousands of pages of documentation text that used vastly different naming conventions for each subject area (for example, \"3D Scanning &amp; Printing\" vs \"3d.printing.and.scanning\"), and much of the text understandably had spelling errors given that many Fab Academy students do not speak English as a first language. To overcome the challenge of categorizing references by subject area with no consistent naming convention, I created a text-classification neural network. Using a list of keywords that were often associated with a Fab Academy subject-area, for example \"PLA filament\" for \"3D Printing,\" I was able to classify ~13,000 of the ~29,000 references based on the surrounding text. Find a <code>JSON</code> file of the keywords I used for each subject area below.</p> <pre><code>{\n  \"Prefab\": [],\n  \"Computer-Aided Design\": [\n    \"Computer-Aided Design\",\n    \"freecad\"\n  ],\n  \"Computer-Controlled Cutting\": [\n    \"Laser Cut\",\n    \"CCC week\",\n    \"Computer-Controlled Cutting\"\n  ],\n  \"Embedded Programing\": [\n    \"Embedded Programming\",\n    \"MicroPython\",\n    \"C++\",\n    \"pythoncpp\",\n    \"ino\",\n    \"Arduino IDE\",\n    \"programming week\"\n  ],\n  \"3D Scanning and Printing\": [\n    \"3D Printing\",\n    \"3D Scanning\",\n    \"TPU\",\n    \"PETG\",\n    \"filament\",\n    \"Prusa\",\n    \"3d printing week\",\n    \"polyCAM\",\n    \"3D Scanning and Printing\",\n    \"3d printers\",\n    \"3d printer\"\n  ],\n  \"Electronics Design\": [\n    \"EagleCAD\",\n    \"Eagle\",\n    \"KiCAD\",\n    \"Routing\",\n    \"Auto-Route\",\n    \"Trace\",\n    \"Footprint\",\n    \"electronic design\",\n    \"Electronics Design\"\n  ],\n  \"Computer-Controlled Machining\": [\n    \"CNC\",\n    \"Shopbot\",\n    \"Computer-Controlled Machining\"\n  ],\n  \"Electronics Production\": [\n    \"Mill\",\n    \"Milling\",\n    \"copper\",\n    \"electronic production\",\n    \"Electronics Production\"\n  ],\n  \"Mechanical Design, Machine Design\": [\n    \"Machine week\",\n    \"actuation and automation\",\n    \"Mechanical Design, Machine Design\"\n  ],\n  \"Input Devices\": [\n    \"Input Devices\",\n    \"Input Device\",\n    \"Inputs Devices\",\n    \"Electronic input\",\n    \"sensor\",\n    \"Input Devices\"\n  ],\n  \"Moulding and Casting\": [\n    \"Part A\",\n    \"Part B\",\n    \"pot time\",\n    \"pottime\",\n    \"molding\",\n    \"moulding\",\n    \"casting\",\n    \"cast\",\n    \"Moulding and Casting\"\n  ],\n  \"Output Devices\": [\n    \"Output Device\",\n    \"Outputs Devices\",\n    \"Outputs Device\",\n    \"Servo\",\n    \"motor\",\n    \"Output Devices\"\n  ],\n  \"Embedded Networking and Communications\": [\n    \"SPI\",\n    \"UART\",\n    \"I2C\",\n    \"RX\",\n    \"TX\",\n    \"SCL\",\n    \"networking week\",\n    \"networking\",\n    \"network\",\n    \"networking and communications\",\n    \"Embedded Networking and Communications\"\n  ],\n  \"Interface and Application Programming\": [\n    \"Interfacing Week\",\n    \"interface week\",\n    \"Interface and Application Programming\"\n  ],\n  \"Wildcard Week\": [\n    \"Wildcard Week\"\n  ],\n  \"Applications and Implications\": [\n    \"Applications and Implications\",\n    \"Bill-of-Materials\",\n    \"Bill of materials\"\n  ],\n  \"Invention, Intellectual Property and Business Models\": [\n    \"Patent\",\n    \"copyright\",\n    \"trademark\",\n    \"Invention, Intellectual Property and Business Models\"\n  ],\n  \"Final Project\": [\n    \"Final Project\"\n  ],\n  \"Other\": []\n}\n</code></pre> <p>To classify the remaining ~19,500 references, I trained my own text-classification neural network off of the 1,000 characters before and after each of the ~13,000 already classified references using <code>Python</code> and <code>PyTorch</code>. I designed the neural network with 5,000 input nodes, a hidden layer of 200 nodes, and 18 output nodes (one for each Fab Academy subject area). To format the data for the neural network, I used the <code>Sci-Kit Learn CountVectorizer</code> to tokenize the text surrounding each URL, and the resulting matrix was converted to a <code>NumPy</code> array and then to a <code>PyTorch tensor</code>. To train the neural network, I implemented <code>Cross-Entropy Loss</code> as the loss function to measure the model's performance in predicting the correct subject-area, and I employed the <code>Adam optimizer</code> to adjust the model's weights. After hyperparameter tuning using a grid-search algorithm, the model achieved its best accuracy of 86.3% using a learning rate of 0.01 and dropout rate of 0.1. You can see the gridsearch algorithm below.</p> <pre><code># Define grid of hyperparameters\nlearning_rates = [0.1, 0.01, 0.001]\ndropout_rates = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Perform the grid search\nbest_accuracy = 0.0\nbest_lr = None\nbest_dropout_rate = None\nbest_model = None\n\nfor lr in learning_rates:\n    for dropout_rate in dropout_rates:\n        # train_model is defined earlier\n        accuracy, model = train_model(lr, dropout_rate)\n        print(f'Learning rate: {lr}, Dropout rate: {dropout_rate}, Accuracy: {accuracy}')\n\n        if accuracy &gt; best_accuracy:\n            best_accuracy = accuracy\n            best_lr = lr\n            best_dropout_rate = dropout_rate\n            best_model = model\n</code></pre> <p>The model successfully classified the remaining ~19,500 references. </p> <p>After the data were collected, I ran a network density analysis for the global community, as well as each individual lab that had more than five members. The global network density was <code>~0.0024</code>, while <code>~91.3%</code> of the individual labs had a higher density than this, ranging from approximately <code>0.03</code> to <code>0.45</code> (with the exception of the <code>Rwanda</code> network density of <code>~0.013</code>), supporting my hypothesis that students frequently connected with experts in their own lab, but not in the global community. Next, for the network analysis to be useful, I calculated each student's in-degree centrality by subject area. Read more about this process below.</p>"},{"location":"stem/expert-network-map/#step-3-data-visualization","title":"Step 3: Data Visualization","text":"<p>Lastly, I wanted to provide the global Fab community with an easy-to-use navigation tool to locate expert documentation by subject area, as identified in my network analysis. I consulted with Mr. Arroyo and decided to create an interactive force simulation graph using <code>D3JS</code>. In the graph, each node represents a student and each edge represents references between students. </p> <p></p> <p>The more times a student\u2019s documentation website has been referenced, the larger the student\u2019s node, corresponding to more expertise. Other data, such as a student\u2019s Fab Lab location and graduation year, were encoded via other visual mediums. I added interactive features, such as filters for subject area, geography, and graduation year, to help students quickly identify experts based on their needs.</p> <p></p> <p>Because the first version of the <code>Expert Network Map</code> had a large number of data points reloading in real-time, the tool was too slow to be usable. I made two modifications to optimize performance. First, I used D3JS\u2019 enter-update-exit protocol to change the force simulation graph without reloading all of the data. Next, I collapsed multiple references between the same students into a single edge with greater force. The <code>Expert Network Map</code> is live and will be used by Fab Academy 2024 students.</p>"},{"location":"stem/expert-network-map/#documentation","title":"Documentation","text":""},{"location":"stem/expert-network-map/#step-1-data-collection_1","title":"Step 1: Data Collection","text":"<p>Download the Python code for Step 1 here!</p>"},{"location":"stem/expert-network-map/#scraping-overview-and-pagination-concerns","title":"Scraping Overview and Pagination Concerns","text":"<p>The first step of the project is to collect data on all of the references between Fab Academy students' documentation from 2018-2023. Since every student's documentation website is hosted from a GitLab repo, I wrote a Python script that uses the Python-GitLab API to scan each student's repo using a RegEx. </p> <p>In my first iteration of the script, I did not realize that the GitLab API paginates to the first twenty projects or repos by default, and the RegEx failed to include links from students between years (for example, a student from 2023 referencing a student from 2018). I realized this error after I had completed part of Step 2 and successfully trained and hyperparameter tuned a neural network to categorize text by subject-area. So, I could have included more training data, however I decided not to re-run the training process since the model had a lot of data to train on even with the pagination and missing references (~13,000 blocks of 2,000 characters of text, approximately 18,000 pages) and achieved a satisfactory accuracy of 86.3%. Most importantly, these students' data and the extra references were included in the network analysis in Step 2, as well as in the data visualization in Step 3. I will show the code with the errors first (the changes were minimal between the versions), then include the altered version in Step 2.</p>"},{"location":"stem/expert-network-map/#data-structure","title":"Data Structure","text":"<p>Data was stored in the below structure before being converted to a Pandas dataframe. There was an array of tuples that contained the GitLab ID of a student's lab's subgroup and a dictionary. The dictionary had one key, the name of the student, and had another dictionary as the value. The inner dictionary contained key-value pairs of how many times the student referenced other students' websites.</p> <pre><code>[(lab_id: id (int), {\"Student Name\": {\"student-referenced\": num_references (int), ...}}), ...]\n</code></pre>"},{"location":"stem/expert-network-map/#subject-area-keywords","title":"Subject-Area Keywords","text":"<p>Additionally, I wrote a list of keywords for each subject-area. If the 2,000 characters surrounding a link contained one of the keywords, a new object was stored in a <code>jsonl</code> file containing the text and categorized subject-area. Additionally, self-links were included in the training data. Here's a sample from the collected data.</p> <pre><code>{\"text\": \"018/labs/fablabamsterdam/students/klein-xavier/pages/week8.html\\\"&gt;check here to know how i did it&lt;/a&gt;), i set the clock to &lt;i&gt;internal 8 mhz&lt;/i&gt;.\\n\\ni tried the code &lt;a href=\\\"https://github.com/maltesemants1/charlieplexing-the-arduino/blob/master/charlieplexing%20sketch\\\" target=\\\"_blank\\\"&gt;from the tutorial i followed&lt;/a&gt;.&lt;br&gt;\\nnow, if you look at images of the board above, something is missing. the regulator. if you're already noticed it you win this \\\"very good eyes\\\" cup:&lt;br&gt;&lt;br&gt;\\n&lt;img src=\\\"week11/img/cup.gif\\\" alt=\\\"\\\"&gt;&lt;br&gt;&lt;br&gt;\\n\\ni try first with the code above, i change the pins, looking to this type of datasheet: &lt;br&gt;&lt;br&gt;\\n&lt;img src=\\\"http://fabacademy.org/2018/labs/fablabtrivandrum/students/aby-michael/week9/image/attinypinouts14.jpg\\\" alt=\\\"\\\"&gt;&lt;br&gt;&lt;br&gt;\\n\\n i've upload the code and nothing happened. the regulator started to fried!&lt;br&gt;\\n it fried because i put it there to regulate a 9v from a battery to 5v. but there was no battery when i tested the code (using the programmer as power supply) and the regulator didn't enjoy it.&lt;br&gt;\\n so for the next \\\"experiments\\\" i remove it and used only the programmer as power supply.&lt;br&gt;&lt;br&gt;\\n\\n i manage to make charlieplexing working with the good pins, i've made some mods to the code in order to have a back and forth movement (you check this code &lt;a href=\\\"http://archive.fabacademy.org/2018/labs/fablabamsterdam/students/klein-xavier/pages/week11/file/charlieplexing.ino\\\"&gt;here&lt;/a&gt;.):&lt;br&gt;&lt;br&gt;\\n &lt;img src=\\\"week11/img/pins.png\\\" alt=\\\"\\\"&gt;&lt;br&gt;&lt;br&gt;\\n here's the beast:&lt;br&gt;&lt;br&gt;\\n&lt;iframe src=\\\"https://giphy.com/embed/1lxry3fbt0naiel2gn\\\" width=\\\"480\\\" height=\\\"266\\\" frameborder=\\\"0\\\" class=\\\"giphy-embed\\\" allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;&lt;br&gt;\\n\\n&lt;b&gt;the code:&lt;/b&gt;&lt;br&gt;&lt;br&gt;\\n\\nt\\n\\n/*&lt;br&gt;\\n * charlieplexing code for this board:&lt;br&gt;\\n\\n * http://archive.fabacademy.org/2018/labs/fablabamsterdam/students/klein-xavier/pages/week11/file/ledboard.zip &lt;br&gt;\\n * wtfpl xavier klein &lt;br&gt;\\n */ &lt;br&gt;\\n\\n&lt;br&gt;\\n&lt;b&gt;here i have 3 variables related to the 3 pins i dedicated to for each row.&lt;/b&gt;&lt;br&gt;\\n//setting the pin for each row.&lt;br&gt;\\nconst int led_1 = 0;     //led\", \"label\": \"Embedded Programing\", \"metadata\": {\"from\": \"https://fabacademy.org/2018/labs/fablabamsterdam/students/klein-xavier/\", \"to\": \"https://fabacademy.org/2018/labs/fablabtrivandrum/students/aby-michael/\"}}\n</code></pre> <p>Below is a list of the subject-areas and the corresponding keywords (later the subject-areas \"Prefab\" and \"Other\" were removed):</p> <pre><code>TOPICS = [\n    \"Prefab\",\n    \"Computer-Aided Design\",\n    \"Computer-Controlled Cutting\",\n    \"Embedded Programing\",\n    \"3D Scanning and Printing\",\n    \"Electronics Design\",\n    \"Computer-Controlled Machining\",\n    \"Electronics Production\",\n    \"Mechanical Design, Machine Design\",\n    \"Input Devices\",\n    \"Moulding and Casting\",\n    \"Output Devices\",\n    \"Embedded Networking and Communications\",\n    \"Interface and Application Programming\",\n    \"Wildcard Week\",\n    \"Applications and Implications\",\n    \"Invention, Intellectual Property and Business Models\",\n    \"Final Project\",\n    \"Other\"\n]\n\nTOPIC_SEARCH_TERMS = [\n    [],\n    [\"Computer-Aided Design\", \"freecad\"], \n    [\"Laser Cut\", \"CCC week\", \"Computer-Controlled Cutting\"],\n    [\"Embedded Programming\", \"MicroPython\", \"C\\+\\+\", \"python\" \"cpp\", \"ino\", \"Arduino IDE\", \"programming week\"], \n    [\"3D Printing\", \"3D Scanning\", \"TPU\", \"PETG\", \"filament\", \"Prusa\", \"3d printing week\", \"polyCAM\", \"3D Scanning and Printing\", \"3d printers\", \"3d printer\"], # not PLA because in too many other words\n    [\"EagleCAD\", \"Eagle\", \"KiCAD\", \"Routing\", \"Auto-Route\", \"Trace\", \"Footprint\", \"electronic design\", \"Electronics Design\"],\n    [\"CNC\", \"Shopbot\", \"Computer-Controlled Machining\"],\n    [\"Mill\", \"Milling\", \"copper\", \"electronic production\", \"Electronics Production\"],\n    [\"Machine week\", \"actuation and automation\", \"Mechanical Design, Machine Design\"],\n    [\"Input Devices\", \"Input Device\", \"Inputs Devices\", \"Electronic input\", \"sensor\", \"Input Devices\"],\n    [\"Part A\", \"Part B\", \"pot time\", \"pottime\", \"molding\", \"moulding\", \"casting\", \"cast\", \"Moulding and Casting\"],\n    [\"Output Device\", \"Outputs Devices\", \"Outputs Device\", \"Servo\", \"motor\", \"Output Devices\"],\n    [\"SPI\", \"UART\", \"I2C\", \"RX\", \"TX\", \"SCL\", \"networking week\", \"networking\", \"network\", \"networking and communications\", \"Embedded Networking and Communications\"],\n    [\"Interfacing Week\", \"interface week\", \"Interface and Application Programming\"],\n    [\"Wildcard Week\"],\n    [\"Applications and Implications\", \"Bill-of-Materials\", \"Bill of materials\"],\n    [\"Patent\", \"copyright\", \"trademark\", \"Invention, Intellectual Property and Business Models\"],\n    [\"Final Project\"],\n    []\n]\n</code></pre>"},{"location":"stem/expert-network-map/#gitlab-structure","title":"GitLab Structure","text":"<p>The Fab Academy student GitLab repos are structured as follows:</p> <p></p> <p>So it worked down the tree, starting with each year's subgroup and traversing down the tree breadth-first. Helper functions are included in the full <code>main_collection.py</code> below.</p> <pre><code>for year in range(2018, 2024):\n    print(\"Loading student names...\")\n    all_student_names = get_all_people(year)\n    print(all_student_names)\n    print(\"Collecting student repo IDs...\")\n    all_student_repo_ids = get_all_student_repo_ids(year, ALL_LAB_SUBGROUP_IDS[year], all_student_names)\n    print(all_student_repo_ids)\n\n    all_reference_dicts = [] # [(lab_id: id (int), {\"Student Name\": {\"student-referenced\": num_references (int), ...}}), ...]\n\n    for lab_number, id in all_student_repo_ids:\n        reference_dict_list = []\n\n        compiled_reference_dict = get_all_reference_dicts(year, id)\n\n        print(\"Adding reference dictionary to database...\")\n        all_reference_dicts.append((lab_number, {format_name(get_repo_name(id), year): compiled_reference_dict}))\n        print(f\"All reference dictionaries so far... {all_reference_dicts}\")\n    reference_dicts_across_years.append(all_reference_dicts)\n\nmatrix = format_data_to_matrix(reference_dicts_across_years)\n</code></pre> <p>Since all links to another's website in documentation should be found in either an <code>HTML</code>, <code>TXT</code>, or <code>Markdown</code> file, I only scanned for references in these file types. I also provided the Subgroup IDs of the overal Fab Academy GitLab Projects for the years 2018-2023.</p> <pre><code>VALID_EXTENSOINS = [\"html\", \"txt\", \"md\"]\nALL_LAB_SUBGROUP_IDS = {\n    2023: 8145,\n    2022: 3632,\n    2021: 2917,\n    2020: 2140,\n    2019: 1619,\n    2018: 852\n}\n</code></pre> <p>In order to decrease run-time when running the script multiple times, certain information, such as the list of every student's names from the fabacademy.org website, are pickled and stored locally.</p>"},{"location":"stem/expert-network-map/#full-code","title":"Full Code","text":"<p>Here is the entire <code>main_collection.py</code> file with helper functions. </p> <p>main_collection.py</p> <pre><code>import requests, base64, urllib.parse, gitlab, re, pickle, os, time, json\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom urllib.parse import urljoin\n\nGL = gitlab.Gitlab('https://gitlab.fabcloud.org', api_version=4)\nVALID_EXTENSOINS = [\"html\", \"txt\", \"md\"]\nALL_LAB_SUBGROUP_IDS = {\n    2023: 8145,\n    2022: 3632,\n    2021: 2917,\n    2020: 2140,\n    2019: 1619,\n    2018: 852\n}\n\nCHARACTERS_EACH_DIRECTION_TOPIC_DETECTION = 1000\nTOPICS = [\n    \"Prefab\",\n    \"Computer-Aided Design\",\n    \"Computer-Controlled Cutting\",\n    \"Embedded Programing\",\n    \"3D Scanning and Printing\",\n    \"Electronics Design\",\n    \"Computer-Controlled Machining\",\n    \"Electronics Production\",\n    \"Mechanical Design, Machine Design\",\n    \"Input Devices\",\n    \"Moulding and Casting\",\n    \"Output Devices\",\n    \"Embedded Networking and Communications\",\n    \"Interface and Application Programming\",\n    \"Wildcard Week\",\n    \"Applications and Implications\",\n    \"Invention, Intellectual Property and Business Models\",\n    \"Final Project\",\n    \"Other\"\n]\n\nTOPIC_SEARCH_TERMS = [\n    [],\n    [\"Computer-Aided Design\", \"freecad\"], \n    [\"Laser Cut\", \"CCC week\", \"Computer-Controlled Cutting\"],\n    [\"Embedded Programming\", \"MicroPython\", \"C\\+\\+\", \"python\" \"cpp\", \"ino\", \"Arduino IDE\", \"programming week\"], \n    [\"3D Printing\", \"3D Scanning\", \"TPU\", \"PETG\", \"filament\", \"Prusa\", \"3d printing week\", \"polyCAM\", \"3D Scanning and Printing\", \"3d printers\", \"3d printer\"], # not PLA because in too many other words\n    [\"EagleCAD\", \"Eagle\", \"KiCAD\", \"Routing\", \"Auto-Route\", \"Trace\", \"Footprint\", \"electronic design\", \"Electronics Design\"],\n    [\"CNC\", \"Shopbot\", \"Computer-Controlled Machining\"],\n    [\"Mill\", \"Milling\", \"copper\", \"electronic production\", \"Electronics Production\"],\n    [\"Machine week\", \"actuation and automation\", \"Mechanical Design, Machine Design\"],\n    [\"Input Devices\", \"Input Device\", \"Inputs Devices\", \"Electronic input\", \"sensor\", \"Input Devices\"],\n    [\"Part A\", \"Part B\", \"pot time\", \"pottime\", \"molding\", \"moulding\", \"casting\", \"cast\", \"Moulding and Casting\"],\n    [\"Output Device\", \"Outputs Devices\", \"Outputs Device\", \"Servo\", \"motor\", \"Output Devices\"],\n    [\"SPI\", \"UART\", \"I2C\", \"RX\", \"TX\", \"SCL\", \"networking week\", \"networking\", \"network\", \"networking and communications\", \"Embedded Networking and Communications\"],\n    [\"Interfacing Week\", \"interface week\", \"Interface and Application Programming\"],\n    [\"Wildcard Week\"],\n    [\"Applications and Implications\", \"Bill-of-Materials\", \"Bill of materials\"],\n    [\"Patent\", \"copyright\", \"trademark\", \"Invention, Intellectual Property and Business Models\"],\n    [\"Final Project\"],\n    []\n] \n\n# return file contents from GitLab repo\ndef get_file_content(file_path, project_id, default_branch_name):\n    print(f\"Getting file content: {file_path}, {project_id}\")\n    safe_url = f\"https://gitlab.fabcloud.org/api/v4/projects/{project_id}/repository/files/{urllib.parse.quote(file_path, safe='')}?ref={default_branch_name}\"\n    print(safe_url)\n    response = requests.get(safe_url).json()\n    if 'message' in response:\n        if '404' in response['message']:\n            print(f\"404 ERROR from {safe_url}\")\n            return\n    encrypted_blob = response['content']\n\n    decrypted_text = base64.b64decode(encrypted_blob)\n    return decrypted_text\n\n# get name of GitLab repo\ndef get_repo_name(project_id):\n    safe_url = f\"https://gitlab.fabcloud.org/api/v4/projects/{project_id}\"\n    print(safe_url)\n    response = requests.get(safe_url).json()\n    web_url = response['web_url']\n    if 'message' in response:\n        if '404' in response['message']:\n            print(f\"404 ERROR from {safe_url}\")\n            return\n    return response['name'], gitlab_url_to_site_url(f\"{web_url}/\") # / to make it consistent with the name lists with urljoin and the a's hrefs\n\n# get a list of the subgroups of a GitLab project\ndef get_file_repo_list(id):\n    all_file_paths = []\n    project = GL.projects.get(id)\n    all_directories = project.repository_tree(recursive=True, all=True)\n    for item in all_directories:\n        path = item['path']\n        if path.split('.')[-1].lower().strip() in VALID_EXTENSOINS:\n            all_file_paths.append(path)\n    return all_file_paths\n\n# get the IDs of the subgroups of a GitLab project\ndef get_subgroup_ids(group_id):\n    safe_url = f\"https://gitlab.fabcloud.org/api/v4/groups/{group_id}/subgroups\"\n    response = None\n    while response is None:\n        try:\n            response = requests.get(safe_url).json()\n        except Exception as e:\n            print(f\"Server timeout- {e}\")\n            time.sleep(10)\n    p_ids = []\n    for item in response:\n        try:\n            p_ids.append(item['id'])\n        except:\n            print(\"Error finding subgroups -- skipping\")\n    return p_ids\n\n# get the IDs of subgprojects of a GitLab project\ndef get_subproject_ids(group_id):\n    safe_url = f\"https://gitlab.fabcloud.org/api/v4/groups/{group_id}/projects\"\n    response = requests.get(safe_url).json()\n    p_ids = []\n    for item in response:\n        p_ids.append(item['id'])\n    return p_ids\n\ndef name_split_char(year):\n    return \".\" if year &lt; 2021 else \" \"\n\n# convert a URL to a GitLab repo to a URL to the hosted website\ndef gitlab_url_to_site_url(gitlab_url):\n    return f\"https://fabacademy.org/{gitlab_url.split('https://gitlab.fabcloud.org/academany/fabacademy/')[-1]}\"\n\n# format student's name to create a unique identifier for each student\ndef format_name(name_url_tup, year, tup=True):\n    if tup:\n        name, web_url = name_url_tup\n        return f'{\"-\".join(name.lower().strip().split(name_split_char(year)))};{web_url}' \n    else:\n        print(\"Warning: name generated without URL\")\n        name = name_url_tup\n        return \"-\".join(name.lower().strip().split(name_split_char(year)))\n\n# remove all links to websites that are not students' repos\ndef filter_only_student_repos(all_student_repo_ids, all_student_names, year):\n    filtered_ids = []\n    all_student_urls = [name.split(\";\")[1].strip() for name in all_student_names]\n    for i, id_list in all_student_repo_ids:\n        for id in id_list:\n            _, web_url = get_repo_name(id)\n            if web_url.strip()[:-1] in all_student_urls or web_url.strip() in all_student_urls: # [:-1] to remove ending slash\n                filtered_ids.append((i, id))\n    return filtered_ids\n\n# get the repo IDs of all fab Academy students\ndef get_all_student_repo_ids(year, year_subgroup_id, all_student_names):\n    if save_exists(\"student_repo_id_saves\", year):\n        return load_obj(\"student_repo_id_saves\", year)\n    all_student_repo_ids = []\n    all_lab_ids = get_subgroup_ids(year_subgroup_id)\n\n    for id in all_lab_ids:\n        for sub_id in get_subgroup_ids(id):\n            all_student_repo_ids.append((id, get_subproject_ids(sub_id))) # ((i, get_subproject_ids(sub_id)))\n    print(all_student_repo_ids)\n    to_return = filter_only_student_repos(all_student_repo_ids, all_student_names, year)\n    save_obj(\"student_repo_id_saves\", to_return, year)\n    return to_return\n\ndef save_exists(folder_name, name):\n    return os.path.exists(f\"{folder_name}/{name}.obj\")\n\ndef load_obj(folder_name, name):\n    with open(f\"{folder_name}/{name}.obj\", \"rb\") as filehandler:\n        return pickle.load(filehandler)\n\ndef save_obj(folder_name, obj, name):\n    with open(f\"{folder_name}/{name}.obj\", 'wb') as filehandler: \n        pickle.dump(obj, filehandler)\n\n# go to fabacademy.org website to find student roster and all students' names and links to their websites\ndef get_all_people(year):\n    if save_exists(\"people_saves\", year):\n        return load_obj(\"people_saves\", year)\n\n    base_url = f\"https://fabacademy.org/{year}/people.html\"\n    soup = BeautifulSoup(requests.get(base_url).content, 'html.parser')\n\n    if year &gt; 2018:\n        lab_divs = soup.find_all(\"div\", {\"class\": \"lab\"})\n\n        names = []\n\n        for lab_div in lab_divs:\n            lis = lab_div.find_all(\"li\")\n\n            As = [li.find(\"a\") for li in lis]\n\n            names += [f\"{a.text.strip().lower().replace(' ', '-')};{urljoin(base_url, a['href'])}\" for a in As]        \n    else:\n        lis = soup.find_all(\"li\")\n        names = [f\"{li.find('a').text.strip().lower().replace(' ', '-')};{urljoin(base_url, li.find('a')['href'])}\" for li in lis]\n\n    save_obj(\"people_saves\", names, year)\n\n    return names\n\n# scan a repo for references to another student's documentation\ndef get_references(content, year, from_url):\n    pattern = re.compile(f\"\\/{year}\\/labs\\/[^\\/]+\\/students\\/(\\w|-)+\\/\")\n    people_linked = {}\n    for match in pattern.finditer(str(content)):\n        full_url = f\"https://fabacademy.org{match.group(0)}\"\n        print(f\"FULL URL {full_url}\")\n        person = format_name((match.group(0).split(\"/\")[-2], full_url), year)\n\n        link_label = None\n\n        topic_search_start_ind = match.start() - CHARACTERS_EACH_DIRECTION_TOPIC_DETECTION\n        if topic_search_start_ind &lt; 0:\n            topic_search_start_ind = 0\n        topic_search_end_ind = match.end() + CHARACTERS_EACH_DIRECTION_TOPIC_DETECTION\n        if topic_search_end_ind &gt; len(content):\n            topic_search_end_ind = len(content)\n        print(f\"({match.start()}, {match.end()}) -&gt; ({topic_search_start_ind}, {topic_search_end_ind})\")\n        topic_text = content.decode()[topic_search_start_ind:topic_search_end_ind].lower()\n\n        print(\"TOPIC TEXT\", topic_text)\n        for i in range(len(TOPICS)):\n            topic = TOPICS[i]\n            topic_search_terms = TOPIC_SEARCH_TERMS[i]\n            for item in topic_search_terms:\n                item_spaces = item.replace(\"-\", \" \").replace(\"/\", \" \").replace(\",\", \" \").lower().strip()\n                if re.search(re.compile(item_spaces.replace(\" \",\".\")), topic_text) or re.search(re.compile(item_spaces.replace(\" \",\"-\")), topic_text) or re.search(re.compile(item_spaces), topic_text) or re.search(re.compile(item_spaces.replace(\" \",\"\")), topic_text):\n                    link_label = topic\n\n        if link_label is None:\n            continue\n\n        with open(\"NLP_data/train.jsonl\", \"a\") as file:\n            file.write('{' + '\"text\": ' + json.dumps(topic_text) + ', \"label\": \"' + link_label + '\", \"metadata\": '+ '{' + '\"from\": \"' + from_url + '\", \"to\": \"' + full_url + '\"' + '}' + '}\\n')\n\n        if person in people_linked:\n            if link_label in people_linked[person]:\n                people_linked[person][link_label] += 1\n        else:\n            people_linked[person] = {}\n            people_linked[person][link_label] = 1\n\n    return people_linked\n\n# combine students' dictionaries of references to other's websites\ndef combine_reference_dicts(reference_dict_list):\n    combined_reference_dict = {}\n    for dict in reference_dict_list:\n        for key in dict:\n            if key in combined_reference_dict:\n                for topic_key in dict[key]:\n                    if topic_key in combined_reference_dict[key]:\n                        combined_reference_dict[key][topic_key] += dict[key][topic_key]\n                    else:\n                        combined_reference_dict[key][topic_key] = dict[key][topic_key]\n            else:\n                combined_reference_dict[key] = dict[key] \n    return combined_reference_dict\n\n# convert data to Pandas crosstab matrix\ndef format_data_to_matrix(data):\n    students = []\n\n    for year_info in data: # [(lab_id: int, {\"Student Name\": {\"student-referenced\": num_references: int, ...}}), ...]\n        for student_info in year_info: # (lab_id: int, {\"Student Name\": {\"student-referenced\": num_references: int, ...}})\n            lab_id = student_info[0] \n            student_name = list(student_info[1].keys())[0]\n            reference_dict = student_info[1][list(student_info[1].keys())[0]]\n            students.append(student_name) \n\n    print(\"STUDENTS\", students)\n\n    df = pd.crosstab(students, students)\n    df.rename_axis(\"Referencing Students\", axis=0, inplace=True)\n    df.rename_axis(\"Referenced Students\", axis=1, inplace=True)\n\n    df = pd.DataFrame(df, index=df.index, columns=pd.MultiIndex.from_product([df.columns, TOPICS]))\n\n    for student1 in students:\n        for student2 in students:\n            for topic_name in TOPICS:\n                df.at[student1, (student2, topic_name)] = (pd.NA if student1 == student2 else 0)\n\n    def assign_value(referencer_student, referenced_student, num_references, topic):\n        if referencer_student == referenced_student:\n            print(f\"Ignoring self-referenced student {referencer_student}\")\n        elif referenced_student not in students:\n            print(\"Referenced student isn't a student - URL matched naming convention so regex caught but wasn't checked against student list - skipping\")\n        else:\n            df.loc[referencer_student, (referenced_student, topic)] = num_references\n\n    def get_value(referencer_student, referenced_student, topic):\n        return df.loc[referencer_student, (referenced_student, topic)]\n\n    for year_info in data:\n        for student_info in year_info:\n            student_name = list(student_info[1].keys())[0]\n            reference_dict = dict(student_info[1][student_name])\n            for referenced_student in reference_dict:\n                for reference_type in reference_dict[referenced_student]:\n                    num_references = reference_dict[referenced_student][reference_type]\n                    assign_value(student_name, referenced_student, num_references, reference_type)\n\n    df.to_csv(\"final_data.csv\", index_label=\"Referencing Students|Referenced Students\")\n\n    return df\n\n# get all of the reference dictionaries of different students for a given year\ndef get_all_reference_dicts(year, id):\n    filename = f\"{year}-{id}\"\n    if save_exists(\"reference_dict_saves\", filename):\n        print(f\"Save exists! {load_obj('reference_dict_saves', filename)}\")\n        return load_obj(\"reference_dict_saves\", filename)\n    reference_dict_list = []\n    default_branch_name_response = requests.get(f\"https://gitlab.fabcloud.org/api/v4/projects/{id}/repository/branches\").json()\n    default_branch_name = None\n    for branch in default_branch_name_response:\n        if branch['default']:\n            default_branch_name = branch['name']\n    if default_branch_name is None:\n        print(f\"Error: Default Branch Not Found (id: {id}) {default_branch_name_response} - leaving as None\")\n    try:\n        for file in get_file_repo_list(id):\n            print(f\"Checking {file}...\")\n            reference_dict_list.append(get_references(get_file_content(file, id, default_branch_name), year, get_repo_name(id)[1]))\n        print(\"Generating compiled reference dictionary...\")\n        compiled_reference_dict = combine_reference_dicts(reference_dict_list)\n        print(compiled_reference_dict)\n        save_obj(\"reference_dict_saves\", compiled_reference_dict, filename)\n        print(f\"SAVING to {filename}\")\n        return compiled_reference_dict\n    except gitlab.exceptions.GitlabGetError as e:\n        return combine_reference_dicts(reference_dict_list)\n\nif __name__ == \"__main__\":\n    reference_dicts_across_years = [] # [[(lab_id: id (int), {\"Student Name\": {\"student-referenced\": num_references: (int), ...}}), ...], ...]\n\n    for year in range(2018, 2024):\n        print(\"Loading student names...\")\n        all_student_names = get_all_people(year)\n        print(all_student_names)\n        print(\"Collecting student repo IDs...\")\n        all_student_repo_ids = get_all_student_repo_ids(year, ALL_LAB_SUBGROUP_IDS[year], all_student_names)\n        print(all_student_repo_ids)\n\n        all_reference_dicts = [] # [(lab_id: id (int), {\"Student Name\": {\"student-referenced\": num_references: 9d (int), ...}}), ...]\n\n        for lab_number, id in all_student_repo_ids:\n            reference_dict_list = []\n\n            compiled_reference_dict = get_all_reference_dicts(year, id)\n\n            print(\"Adding reference dictionary to database...\")\n            all_reference_dicts.append((lab_number, {format_name(get_repo_name(id), year): compiled_reference_dict}))\n            print(f\"All reference dictionaries so far... {all_reference_dicts}\")\n        reference_dicts_across_years.append(all_reference_dicts)\n\n\n    matrix = format_data_to_matrix(reference_dicts_across_years)\n</code></pre>"},{"location":"stem/expert-network-map/#step-2-ai-sorting-data-analysis_1","title":"Step 2: AI, Sorting Data &amp; Analysis","text":"<p>Download the Python code and all other files for Step 2 here! (10.6 MB)</p> <p>Download the neural network, training data, and final data for Step 2 here! (no cached pickle objects for data collection) (9.8 MB)</p> <p>Download only the Python code for Step 2 here!</p>"},{"location":"stem/expert-network-map/#training-the-model","title":"Training the Model","text":"<p>Before running the training, I had to format the trianing data from a <code>jsonl</code> to a <code>csv</code> file. So, I wrote <code>jsonl2csv.py</code> to convert the JSON objects into CSV format. I used a number to signify each subject-area (each will correspond to an output node in the neural network) and save the exported dataframe as <code>NLP_data/train.csv</code>.</p> <p>jsonl2csv.py</p> <pre><code>import json, string\nimport pandas as pd\n\nDATA_LABELS = {\n    \"Prefab\": 0,\n    \"Computer-Aided Design\": 1,\n    \"Computer-Controlled Cutting\": 2,\n    \"Embedded Programing\": 3,\n    \"3D Scanning and Printing\": 4,\n    \"Electronics Design\": 5,\n    \"Computer-Controlled Machining\": 6,\n    \"Electronics Production\": 7,\n    \"Mechanical Design, Machine Design\": 8,\n    \"Input Devices\": 9,\n    \"Moulding and Casting\": 10,\n    \"Output Devices\": 11,\n    \"Embedded Networking and Communications\": 12,\n    \"Interface and Application Programming\": 13,\n    \"Wildcard Week\": 14,\n    \"Applications and Implications\": 15,\n    \"Invention, Intellectual Property and Business Models\": 16,\n    \"Final Project\": 17,\n    \"Other\": 18\n}\n\nif __name__ == \"__main__\":\n    txts = []\n    labels = []\n    tos = []\n    froms = []\n    with open('NLP_data/train.jsonl', 'r') as jsonl:\n        for line in jsonl.readlines():\n            j = json.loads(line)\n            txts.append(\"\".join([char for char in j['text'] if char in set(string.printable)])) # string.printable removes non-ASCII chars to avoid writing errors\n            labels.append(DATA_LABELS[j['label']])\n            tos.append(j['metadata']['to'])\n            froms.append(j['metadata']['from'])\n\n    data_dict = {\n        \"Text\": txts,\n        \"Labels\": labels,\n        \"To\": tos,\n        \"From\": froms\n    }\n\n    df = pd.DataFrame(data_dict)\n\n    df.to_csv(\"NLP_data/train.csv\")\n</code></pre> <p>To train the model in <code>train_nn.py</code>, I used the Python machine-learning libraries <code>PyTorch</code> and <code>Sci-Kit Learn</code>. I'll break the code into sections then provide the entire file below.</p> <p>First, I loaded the CSV with Pandas, stored the 2,000 blocks and their lables in two series, and used <code>train_test_split</code> from <code>sklearn.model_selection</code> to put 80% of the data into a training set and 20% into a testing set.</p> <pre><code># Read the CSV file\ndf = pd.read_csv('NLP_data/train.csv')\n\n# Columns are named 'Text' and 'Labels'\ntexts = df['Text']\nlabels = df['Labels']\n\n# Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(texts, labels, test_size=0.2, random_state=42)\n</code></pre> <p>Then, using the <code>CountVectorizer</code> from <code>sklearn.feature_extraction.text</code>, I vectorized the training and test data. You can read about the <code>CountVectorizer</code> here.</p> <pre><code># Convert the texts into vectors\nvectorizer = CountVectorizer(max_features=5000)  # limit to 5000 most frequent words/tokens\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n</code></pre> <p>I pickled and saved the vectorizer object.</p> <pre><code># Save the vectorizer\npickle.dump(vectorizer, open(\"vectorizer.pickle\", \"wb\"))\n</code></pre> <p>Next I converted the train and test data to NumPy arrays then PyTorch tensors.</p> <pre><code># Convert the vectors and labels to numpy arrays\nX_train = X_train.toarray()\nX_test = X_test.toarray()\ny_train = y_train.to_numpy()\ny_test = y_test.to_numpy()\n\nX_train = torch.from_numpy(X_train).float()\nX_test = torch.from_numpy(X_test).float()\ny_train = torch.from_numpy(y_train).long()\ny_test = torch.from_numpy(y_test).long()\n</code></pre> <p>Then I defined the <code>TextClassifer</code> neural network class. There are three layers: input, hidden, and output. Adjacent layers are fully connected (FC) (also called <code>linear</code> layers). The network also implements dropout and the ReLU activaition function before the hidden layer.</p> <pre><code>class TextClassifier(nn.Module):\n    def __init__(self, input_dim, hidden_dim, output_dim, dropout_prob=0.5):\n        super(TextClassifier, self).__init__()\n        self.fc1 = nn.Linear(input_dim, hidden_dim)\n        self.dropout = nn.Dropout(dropout_prob)\n        self.fc2 = nn.Linear(hidden_dim, output_dim)\n\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = self.dropout(x)\n        x = self.fc2(x)\n        return x\n</code></pre> <p>Next, to begin finding the optimal hyperparameter combinations, I defined a list of values of <code>learning rate</code> and <code>dropout rate</code> to try, as well as a function to train the network with a specified value for each of these hyperparameters. The dimensions of the network are <code>5000x200x18</code>. The training runs 100 epochs using the <code>Adam optimizer</code> and <code>CrossEntropyLoss</code> function. Then the model performance evaluated. The <code>train_model</code> function returns the model accuracy (measured on the test set data) and the model itself.</p> <pre><code># define grid of hyperparameters\nlearning_rates = [0.1, 0.01, 0.001]\ndropout_rates = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# define a function for the training loop\ndef train_model(lr, dropout_rate):\n    model = TextClassifier(input_dim=X_train.shape[1], hidden_dim=200, output_dim=18, dropout_prob=dropout_rate)\n    criterion = nn.CrossEntropyLoss()\n    optimizer = optim.Adam(model.parameters(), lr=lr)\n\n    for epoch in range(100):  \n        optimizer.zero_grad()\n        outputs = model(X_train)\n        loss = criterion(outputs, y_train)\n        loss.backward()\n        optimizer.step()\n\n    # Evaluate the model\n    with torch.no_grad():\n        outputs = model(X_test)\n        _, predicted = torch.max(outputs, 1)\n        correct = (predicted == y_test).sum().item()\n        accuracy = correct / y_test.size(0)\n\n    return accuracy, model\n</code></pre> <p>Then to implement the gridsearch, I loop through the combinations of <code>learning rate</code> and <code>dropout rate</code>, training and evaluating a neural network then storing its parameters and the model itself if the accuracy is better than all previous accuracies.</p> <pre><code># Perform the grid search\nbest_accuracy = 0.0\nbest_lr = None\nbest_dropout_rate = None\nbest_model = None\n\nfor lr in learning_rates:\n    for dropout_rate in dropout_rates:\n        accuracy, model = train_model(lr, dropout_rate)\n        print(f'Learning rate: {lr}, Dropout rate: {dropout_rate}, Accuracy: {accuracy}')\n\n        if accuracy &gt; best_accuracy:\n            best_accuracy = accuracy\n            best_lr = lr\n            best_dropout_rate = dropout_rate\n            best_model = model\n</code></pre> <p>Finally, the results of the best model are printed, the best model is saved in the <code>best_model.pt</code> file, and the best parameters are pickled and saved in <code>best_params.pickle</code>.</p> <pre><code>print(f'Best learning rate: {best_lr}, Best dropout rate: {best_dropout_rate}, Best accuracy: {best_accuracy}')\n\n# Save the best model to a file\ntorch.save(best_model.state_dict(), 'best_model.pt')\n\n# Also save the parameters in a dictionary\nbest_params = {\"learning_rate\": best_lr, \"dropout_rate\": best_dropout_rate, \"accuracy\": best_accuracy}\n\nwith open('best_params.pickle', 'wb') as handle:\n    pickle.dump(best_params, handle, protocol=pickle.HIGHEST_PROTOCOL)\n</code></pre> <p>All together, here is <code>train_nn.py</code>.</p> <p>train_nn.py</p> <pre><code>import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom sklearn.metrics import accuracy_score\nimport pickle\n\n# Read the CSV file\ndf = pd.read_csv('NLP_data/train.csv')\n\n# Columns are named 'Text' and 'Labels'\ntexts = df['Text']\nlabels = df['Labels']\n\n# Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(texts, labels, test_size=0.2, random_state=42)\n\n# Convert the texts into vectors\nvectorizer = CountVectorizer(max_features=5000)  # limit to 5000 most frequent words/tokens\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n\n# Save the vectorizer\npickle.dump(vectorizer, open(\"vectorizer.pickle\", \"wb\"))\n\n# Convert the vectors and labels to numpy arrays\nX_train = X_train.toarray()\nX_test = X_test.toarray()\ny_train = y_train.to_numpy()\ny_test = y_test.to_numpy()\n\nX_train = torch.from_numpy(X_train).float()\nX_test = torch.from_numpy(X_test).float()\ny_train = torch.from_numpy(y_train).long()\ny_test = torch.from_numpy(y_test).long()\n\nclass TextClassifier(nn.Module):\n    def __init__(self, input_dim, hidden_dim, output_dim, dropout_prob=0.5):\n        super(TextClassifier, self).__init__()\n        self.fc1 = nn.Linear(input_dim, hidden_dim)\n        self.dropout = nn.Dropout(dropout_prob)\n        self.fc2 = nn.Linear(hidden_dim, output_dim)\n\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = self.dropout(x)\n        x = self.fc2(x)\n        return x\n\n# define grid of hyperparameters\nlearning_rates = [0.1, 0.01, 0.001]\ndropout_rates = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# define a function for the training loop\ndef train_model(lr, dropout_rate):\n    model = TextClassifier(input_dim=X_train.shape[1], hidden_dim=200, output_dim=18, dropout_prob=dropout_rate)\n    criterion = nn.CrossEntropyLoss()\n    optimizer = optim.Adam(model.parameters(), lr=lr)\n\n    for epoch in range(100):  \n        optimizer.zero_grad()\n        outputs = model(X_train)\n        loss = criterion(outputs, y_train)\n        loss.backward()\n        optimizer.step()\n\n    # Evaluate the model\n    with torch.no_grad():\n        outputs = model(X_test)\n        _, predicted = torch.max(outputs, 1)\n        correct = (predicted == y_test).sum().item()\n        accuracy = correct / y_test.size(0)\n\n    return accuracy, model\n\n# Perform the grid search\nbest_accuracy = 0.0\nbest_lr = None\nbest_dropout_rate = None\nbest_model = None\n\nfor lr in learning_rates:\n    for dropout_rate in dropout_rates:\n        accuracy, model = train_model(lr, dropout_rate)\n        print(f'Learning rate: {lr}, Dropout rate: {dropout_rate}, Accuracy: {accuracy}')\n\n        if accuracy &gt; best_accuracy:\n            best_accuracy = accuracy\n            best_lr = lr\n            best_dropout_rate = dropout_rate\n            best_model = model\n\nprint(f'Best learning rate: {best_lr}, Best dropout rate: {best_dropout_rate}, Best accuracy: {best_accuracy}')\n\n# Save the best model to a file\ntorch.save(best_model.state_dict(), 'best_model.pt')\n\n# Also save the parameters in a dictionary\nbest_params = {\"learning_rate\": best_lr, \"dropout_rate\": best_dropout_rate, \"accuracy\": best_accuracy}\n\nwith open('best_params.pickle', 'wb') as handle:\n    pickle.dump(best_params, handle, protocol=pickle.HIGHEST_PROTOCOL)\n</code></pre> <p>To load the model, I wrote <code>load_model_and_classify.py</code>. The script defines classes for importing the pickled neural network and using it to classify references.</p> <p>load_model_and_classify.py</p> <pre><code>import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport torch\nimport torch.nn as nn\nimport pickle\n\nclass TextClassifier(nn.Module):\n    def __init__(self, input_dim, hidden_dim, output_dim, dropout_prob=0.5):\n        super(TextClassifier, self).__init__()\n        self.fc1 = nn.Linear(input_dim, hidden_dim)\n        self.dropout = nn.Dropout(dropout_prob)\n        self.fc2 = nn.Linear(hidden_dim, output_dim)\n\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = self.dropout(x)\n        x = self.fc2(x)\n        return x\n\nclass Classifier(object):\n    def __init__(self):\n        # Load the saved parameters\n        with open('best_params.pickle', 'rb') as handle:\n            self.best_params = pickle.load(handle)\n\n        # Load the vectorizer\n        self.vectorizer = pickle.load(open(\"vectorizer.pickle\", \"rb\"))\n        self.input_dim = len(self.vectorizer.get_feature_names_out())\n\n        # Initialize and load the saved model\n        self.model = TextClassifier(input_dim=self.input_dim, hidden_dim=200, output_dim=18, dropout_prob=self.best_params['dropout_rate'])\n        self.model.load_state_dict(torch.load('best_model.pt'))\n\n    def ClassifyDF(self, df):\n        # Let's assume your new data only has a 'Text' column\n        texts = df['Text']\n\n        # Convert the texts into vectors\n        X = self.vectorizer.transform(texts)\n\n        # Convert the vectors to PyTorch tensors\n        X = torch.from_numpy(X.toarray()).float()\n\n        # Predict labels for the new data\n        with torch.no_grad():\n            outputs = self.model(X)\n            _, predicted = torch.max(outputs, 1)\n\n        # Add the predicted labels to the DataFrame\n        df['Predicted Labels'] = predicted.numpy()\n\n        return df\n\n    def classifyItem(self, content):\n        texts = [content]\n\n        # Convert the texts into vectors\n        X = self.vectorizer.transform(texts)\n\n        # Convert the vectors to PyTorch tensors\n        X = torch.from_numpy(X.toarray()).float()\n\n        # Predict labels for the new data\n        with torch.no_grad():\n            outputs = self.model(X)\n            _, predicted = torch.max(outputs, 1)\n\n        return predicted.numpy()[0]\n</code></pre>"},{"location":"stem/expert-network-map/#classifying-references","title":"Classifying References","text":"<p>Now that I have a neural network to classify references between students, I revised <code>main_collection.py</code> to <code>main.py</code>, implementing topic classification. I'll first point out the significant changes then display the entire file.</p> <p>First, I fixed the pagination bug from Step 1 in three places:</p> <ul> <li><code>get_file_repo_list</code> function</li> </ul> <pre><code># original\nall_directories = project.repository_tree(recursive=True, all=True)\n\n# fixed\nall_directories = project.repository_tree(recursive=True, all=True, per_page=200)\n</code></pre> <ul> <li><code>get_subgroup_ids</code> function</li> </ul> <pre><code># original\nsafe_url = f\"https://gitlab.fabcloud.org/api/v4/groups/{group_id}/subgroups\"\n\n# fixed\nsafe_url = f\"https://gitlab.fabcloud.org/api/v4/groups/{group_id}/subgroups?per_page=999999\"\n</code></pre> <ul> <li><code>get_subproject_ids</code> function</li> </ul> <pre><code># original\nsafe_url = f\"https://gitlab.fabcloud.org/api/v4/groups/{group_id}/projects\"\n\n# fixed\nsafe_url = f\"https://gitlab.fabcloud.org/api/v4/groups/{group_id}/projects?per_page=99999\"\n</code></pre> <p>I also fixed the bug where only references between students of the same years are counted.</p> <ul> <li><code>get_references</code> function</li> </ul> <pre><code># original\npattern = re.compile(f\"\\/{year}\\/labs\\/[^\\/]+\\/students\\/(\\w|-)+\\/\")\n\n# fixed\npattern = re.compile(f\"\\/20[0-9][0-9]\\/labs\\/[^\\/]+\\/students\\/(\\w|-)+\\/\")\n</code></pre> <p>Second, the script no longer stores references that have a subject-area keyword in a <code>jsonl</code> file, and it uses the neural network to classify all of the references that don't have keywords.</p> <p>in <code>get_references</code> function</p> <pre><code># original\nif link_label is None:\n    continue\n\nwith open(\"NLP_data/train.jsonl\", \"a\") as file:\n    file.write('{' + '\"text\": ' + json.dumps(topic_text) + ', \"label\": \"' + link_label + '\", \"metadata\": '+ '{' + '\"from\": \"' + from_url + '\", \"to\": \"' + full_url + '\"' + '}' + '}\\n')\n\nif person in people_linked:\n    if link_label in people_linked[person]:\n        people_linked[person][link_label] += 1\nelse:\n    people_linked[person] = {}\n    people_linked[person][link_label] = 1\n\n# new\nif link_label is None:\n    link_label = TOPICS[classifier.classifyItem(content)]\n\nif person in people_linked:\n    if link_label in people_linked[person]:\n        people_linked[person][link_label] += 1\nelse:\n    people_linked[person] = {}\n    people_linked[person][link_label] = 1\n</code></pre> <p>Finally, the output matrix, <code>final_data.csv</code>, now sorts references by subject-area.</p> <p>in <code>format_data_to_matrix</code> function</p> <pre><code># original\nprint(\"STUDENTS\", students)\n\ndf = pd.crosstab(students, students)\ndf.rename_axis(\"Referencing Students\", axis=0, inplace=True)\ndf.rename_axis(\"Referenced Students\", axis=1, inplace=True)\n\ndf = pd.DataFrame(df, index=df.index, columns=pd.MultiIndex.from_product([df.columns, TOPICS]))\n\nfor student1 in students:\n    for student2 in students:\n        for topic_name in TOPICS:\n            df.at[student1, (student2, topic_name)] = (pd.NA if student1 == student2 else 0)\n\ndef assign_value(referencer_student, referenced_student, num_references, topic):\n    if referencer_student == referenced_student:\n        print(f\"Ignoring self-referenced student {referencer_student}\")\n    elif referenced_student not in students:\n        print(\"Referenced student isn't a student - URL matched naming convention so regex caught but wasn't checked against student list - skipping\")\n    else:\n        df.loc[referencer_student, (referenced_student, topic)] = num_references\n\ndef get_value(referencer_student, referenced_student, topic):\n    return df.loc[referencer_student, (referenced_student, topic)]\n\nfor year_info in data:\n    for student_info in year_info:\n        student_name = list(student_info[1].keys())[0]\n        reference_dict = dict(student_info[1][student_name])\n        for referenced_student in reference_dict:\n            for reference_type in reference_dict[referenced_student]:\n                num_references = reference_dict[referenced_student][reference_type]\n                assign_value(student_name, referenced_student, num_references, reference_type)\n\ndf.to_csv(\"final_data.csv\", index_label=\"Referencing Students|Referenced Students\")\n\nreturn df\n\n# new\nstudents_links = [X.split(\";\")[1] for X in students]\n\nlink_student_dict = {}\n\nfor i in range(len(students)):\n    link_student_dict[students_links[i]] = students[i]\n\nprint(\"STUDENTS\", students)\n\ndf = pd.crosstab(students, students)\ndf.rename_axis(\"Referencing Students\", axis=0, inplace=True)\ndf.rename_axis(\"Referenced Students\", axis=1, inplace=True)\n\ndf = pd.DataFrame(df, index=df.index, columns=pd.MultiIndex.from_product([df.columns, TOPICS]))\n\nfor student1 in students:\n    for student2 in students:\n        for topic_name in TOPICS:\n            df.at[student1, (student2, topic_name)] = (pd.NA if student1 == student2 else 0)\n\ndef assign_value(referencer_student, referenced_student, num_references, topic):\n    if referencer_student == referenced_student:\n        print(f\"Ignoring self-referenced student {referencer_student}\")\n    elif referenced_student not in students:\n        if referenced_student.split(\";\")[1] in students_links:\n            assign_value(referencer_student, link_student_dict[referenced_student.split(\";\")[1]], num_references, topic)\n        else:\n            print(\"Referenced student isn't a student - URL matched naming convention so regex caught but wasn't checked against student list - skipping\")\n    else:\n        df.loc[referencer_student, (referenced_student, topic)] = num_references\n\ndef get_value(referencer_student, referenced_student, topic):\n    return df.loc[referencer_student, (referenced_student, topic)]\n\nfor year_info in data:\n    for student_info in year_info:\n        student_name = list(student_info[1].keys())[0]\n        reference_dict = dict(student_info[1][student_name])\n        for referenced_student in reference_dict:\n            for reference_type in reference_dict[referenced_student]:\n                num_references = reference_dict[referenced_student][reference_type]\n                assign_value(student_name, referenced_student, num_references, reference_type)\n\ndf.to_csv(\"final_data.csv\", index_label=\"Referencing Students|Referenced Students\")\n\nreturn df\n</code></pre> <p>All together, here is <code>main.py</code>.</p> <p>main.py</p> <pre><code>import requests, base64, urllib.parse, gitlab, re, pickle, os, time, json\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom urllib.parse import urljoin\nfrom load_model_and_classify import Classifier\n\nGL = gitlab.Gitlab('https://gitlab.fabcloud.org', api_version=4)\nVALID_EXTENSOINS = [\"html\", \"txt\", \"md\"]\nALL_LAB_SUBGROUP_IDS = {\n    2023: 8145,\n    2022: 3632,\n    2021: 2917,\n    2020: 2140,\n    2019: 1619,\n    2018: 852\n}\n\nCHARACTERS_EACH_DIRECTION_TOPIC_DETECTION = 1000\nTOPICS = [\n    \"Prefab\",\n    \"Computer-Aided Design\",\n    \"Computer-Controlled Cutting\",\n    \"Embedded Programing\",\n    \"3D Scanning and Printing\",\n    \"Electronics Design\",\n    \"Computer-Controlled Machining\",\n    \"Electronics Production\",\n    \"Mechanical Design, Machine Design\",\n    \"Input Devices\",\n    \"Moulding and Casting\",\n    \"Output Devices\",\n    \"Embedded Networking and Communications\",\n    \"Interface and Application Programming\",\n    \"Wildcard Week\",\n    \"Applications and Implications\",\n    \"Invention, Intellectual Property and Business Models\",\n    \"Final Project\",\n    \"Other\"\n]\n\nTOPIC_SEARCH_TERMS = [\n    [],\n    [\"Computer-Aided Design\", \"freecad\"], \n    [\"Laser Cut\", \"CCC week\", \"Computer-Controlled Cutting\"],\n    [\"Embedded Programming\", \"MicroPython\", \"C\\+\\+\", \"python\" \"cpp\", \"ino\", \"Arduino IDE\", \"programming week\"], \n    [\"3D Printing\", \"3D Scanning\", \"TPU\", \"PETG\", \"filament\", \"Prusa\", \"3d printing week\", \"polyCAM\", \"3D Scanning and Printing\", \"3d printers\", \"3d printer\"], # not PLA because in too many other words\n    [\"EagleCAD\", \"Eagle\", \"KiCAD\", \"Routing\", \"Auto-Route\", \"Trace\", \"Footprint\", \"electronic design\", \"Electronics Design\"],\n    [\"CNC\", \"Shopbot\", \"Computer-Controlled Machining\"],\n    [\"Mill\", \"Milling\", \"copper\", \"electronic production\", \"Electronics Production\"],\n    [\"Machine week\", \"actuation and automation\", \"Mechanical Design, Machine Design\"],\n    [\"Input Devices\", \"Input Device\", \"Inputs Devices\", \"Electronic input\", \"sensor\", \"Input Devices\"],\n    [\"Part A\", \"Part B\", \"pot time\", \"pottime\", \"molding\", \"moulding\", \"casting\", \"cast\", \"Moulding and Casting\"],\n    [\"Output Device\", \"Outputs Devices\", \"Outputs Device\", \"Servo\", \"motor\", \"Output Devices\"],\n    [\"SPI\", \"UART\", \"I2C\", \"RX\", \"TX\", \"SCL\", \"networking week\", \"networking\", \"network\", \"networking and communications\", \"Embedded Networking and Communications\"],\n    [\"Interfacing Week\", \"interface week\", \"Interface and Application Programming\"],\n    [\"Wildcard Week\"],\n    [\"Applications and Implications\", \"Bill-of-Materials\", \"Bill of materials\"],\n    [\"Patent\", \"copyright\", \"trademark\", \"Invention, Intellectual Property and Business Models\"],\n    [\"Final Project\"],\n    []\n\n] \n\n# returns file content from a repo\ndef get_file_content(file_path, project_id, default_branch_name):\n    print(f\"Getting file content: {file_path}, {project_id}\")\n    safe_url = f\"https://gitlab.fabcloud.org/api/v4/projects/{project_id}/repository/files/{urllib.parse.quote(file_path, safe='')}?ref={default_branch_name}\"\n    print(safe_url)\n    response = requests.get(safe_url).json()\n    if 'message' in response:\n        if '404' in response['message']:\n            print(f\"404 ERROR from {safe_url}\")\n            return\n    encrypted_blob = response['content']\n\n    decrypted_text = base64.b64decode(encrypted_blob)\n    return decrypted_text\n\n# get name of GitLab repo\ndef get_repo_name(project_id):\n    if save_exists(\"repo_names\", f\"{project_id}\"):\n        return load_obj(\"repo_names\", f\"{project_id}\")\n    safe_url = f\"https://gitlab.fabcloud.org/api/v4/projects/{project_id}\"\n    print(safe_url)\n    response = requests.get(safe_url).json()\n    web_url = response['web_url']\n    if 'message' in response:\n        if '404' in response['message']:\n            print(f\"404 ERROR from {safe_url}\")\n            return\n\n    to_return = response['name'], gitlab_url_to_site_url(f\"{web_url}/\") # / to make it consistent with the name lists with urljoin and the a's hrefs\n\n    save_obj(\"repo_names\", to_return, f\"{project_id}\")\n\n    return to_return\n\n# get a list of the subgroups of a GitLab project\ndef get_file_repo_list(id):\n    all_file_paths = []\n    project = GL.projects.get(id)\n    all_directories = project.repository_tree(recursive=True, all=True, per_page=200) # pagination bug patched\n    for item in all_directories:\n        print(item)\n        path = item['path']\n        if path.split('.')[-1].lower().strip() in VALID_EXTENSOINS:\n            all_file_paths.append(path)\n    return all_file_paths\n\n# get the IDs of the subgroups of a GitLab project\ndef get_subgroup_ids(group_id):\n    safe_url = f\"https://gitlab.fabcloud.org/api/v4/groups/{group_id}/subgroups?per_page=999999\" # pagination bug patched\n    response = None\n    while response is None:\n        try:\n            response = requests.get(safe_url).json()\n        except Exception as e:\n            print(f\"Server timeout- {e}\")\n            time.sleep(10)\n    p_ids = []\n    for item in response:\n        try:\n            p_ids.append(item['id'])\n        except:\n            print(\"Error finding subgroups -- skipping\")\n    return p_ids\n\n# get the IDs of subgprojects of a GitLab project\ndef get_subproject_ids(group_id):\n    safe_url = f\"https://gitlab.fabcloud.org/api/v4/groups/{group_id}/projects?per_page=99999\" # pagination bug patched\n    response = requests.get(safe_url).json()\n    p_ids = []\n    for item in response:\n        p_ids.append(item['id'])\n    return p_ids\n\ndef name_split_char(year):\n    return \".\" if year &lt; 2021 else \" \"\n\n# convert a URL to a GitLab repo to a URL to the hosted website\ndef gitlab_url_to_site_url(gitlab_url):\n    return f\"https://fabacademy.org/{gitlab_url.split('https://gitlab.fabcloud.org/academany/fabacademy/')[-1]}\"\n\n# format student's name to create a unique identifier for each student\ndef format_name(name_url_tup, year, tup=True):\n    if tup:\n        name, web_url = name_url_tup\n        return f'{\"-\".join(name.lower().strip().split(name_split_char(year)))};{web_url}' \n    else:\n        print(\"Warning: name generated without URL\")\n        name = name_url_tup\n        return \"-\".join(name.lower().strip().split(name_split_char(year)))\n\n# remove all links to websites that are not students' repos\ndef filter_only_student_repos(all_student_repo_ids, all_student_names, year):\n    filtered_ids = []\n    all_student_urls = [name.split(\";\")[1].strip() for name in all_student_names]\n    for i, id_list in all_student_repo_ids:\n        for id in id_list:\n            _, web_url = get_repo_name(id)\n            if web_url.strip()[:-1] in all_student_urls or web_url.strip() in all_student_urls: # [:-1] to remove ending slash\n                filtered_ids.append((i, id))\n    return filtered_ids\n\n# get the repo IDs of all fab Academy students\ndef get_all_student_repo_ids(year, year_subgroup_id, all_student_names):\n    if save_exists(\"student_repo_id_saves\", year):\n        return load_obj(\"student_repo_id_saves\", year)\n    all_student_repo_ids = []\n    all_lab_ids = get_subgroup_ids(year_subgroup_id)\n    for id in all_lab_ids:\n        for sub_id in get_subgroup_ids(id):\n            print(sub_id)\n            all_student_repo_ids.append((id, get_subproject_ids(sub_id))) # ((i, get_subproject_ids(sub_id)))\n    print(\"ALL STUDENT REPO IDs\", all_student_repo_ids)\n    print(all_student_repo_ids)\n    to_return = filter_only_student_repos(all_student_repo_ids, all_student_names, year)\n    print(\"FILTERED\", to_return)\n    save_obj(\"student_repo_id_saves\", to_return, year)\n    return to_return\n\ndef save_exists(folder_name, name):\n    return os.path.exists(f\"{folder_name}/{name}.obj\")\n\ndef load_obj(folder_name, name):\n    with open(f\"{folder_name}/{name}.obj\", \"rb\") as filehandler:\n        return pickle.load(filehandler)\n\ndef save_obj(folder_name, obj, name):\n    with open(f\"{folder_name}/{name}.obj\", 'wb') as filehandler: \n        pickle.dump(obj, filehandler)\n\n# go to fabacademy.org website to find student roster and all students' names and links to their websites\ndef get_all_people(year):\n    if save_exists(\"people_saves\", year):\n        return load_obj(\"people_saves\", year)\n\n    base_url = f\"https://fabacademy.org/{year}/people.html\"\n    soup = BeautifulSoup(requests.get(base_url).content, 'html.parser')\n\n    if year &gt; 2018:\n        lab_divs = soup.find_all(\"div\", {\"class\": \"lab\"})\n\n        names = []\n\n        for lab_div in lab_divs:\n            lis = lab_div.find_all(\"li\")\n\n            As = [li.find(\"a\") for li in lis]\n\n            names += [f\"{a.text.strip().lower().replace(' ', '-')};{urljoin(base_url, a['href'])}\" for a in As]        \n    else:\n        lis = soup.find_all(\"li\")\n        names = [f\"{li.find('a').text.strip().lower().replace(' ', '-')};{urljoin(base_url, li.find('a')['href'])}\" for li in lis]\n\n    save_obj(\"people_saves\", names, year)\n\n    return names\n\n# scan a repo for references to another student's documentation\ndef get_references(content, year, from_url):\n    pattern = re.compile(f\"\\/20[0-9][0-9]\\/labs\\/[^\\/]+\\/students\\/(\\w|-)+\\/\")\n    people_linked = {}\n    for match in pattern.finditer(str(content)):\n        full_url = f\"https://fabacademy.org{match.group(0)}\"\n        print(f\"FULL URL {full_url}\")\n        person = format_name((match.group(0).split(\"/\")[-2], full_url), year)\n\n        link_label = None\n\n        topic_search_start_ind = match.start() - CHARACTERS_EACH_DIRECTION_TOPIC_DETECTION\n        if topic_search_start_ind &lt; 0:\n            topic_search_start_ind = 0\n        topic_search_end_ind = match.end() + CHARACTERS_EACH_DIRECTION_TOPIC_DETECTION\n        if topic_search_end_ind &gt; len(content):\n            topic_search_end_ind = len(content)\n        print(f\"({match.start()}, {match.end()}) -&gt; ({topic_search_start_ind}, {topic_search_end_ind})\")\n        topic_text = content.decode()[topic_search_start_ind:topic_search_end_ind].lower()\n\n        print(\"TOPIC TEXT\", topic_text)\n        for i in range(len(TOPICS)):\n            topic = TOPICS[i]\n            topic_search_terms = TOPIC_SEARCH_TERMS[i]\n            for item in topic_search_terms:\n                item_spaces = item.replace(\"-\", \" \").replace(\"/\", \" \").replace(\",\", \" \").lower().strip()\n                if re.search(re.compile(item_spaces.replace(\" \",\".\")), topic_text) or re.search(re.compile(item_spaces.replace(\" \",\"-\")), topic_text) or re.search(re.compile(item_spaces), topic_text) or re.search(re.compile(item_spaces.replace(\" \",\"\")), topic_text):\n                    link_label = topic\n\n        if link_label is None:\n            link_label = TOPICS[classifier.classifyItem(content)]\n\n        if person in people_linked:\n            if link_label in people_linked[person]:\n                people_linked[person][link_label] += 1\n        else:\n            people_linked[person] = {}\n            people_linked[person][link_label] = 1\n\n    return people_linked\n\n# combine students' dictionaries of references to other's websites\ndef combine_reference_dicts(reference_dict_list):\n    combined_reference_dict = {}\n    for dict in reference_dict_list:\n        for key in dict:\n            if key in combined_reference_dict:\n                for topic_key in dict[key]:\n                    if topic_key in combined_reference_dict[key]:\n                        combined_reference_dict[key][topic_key] += dict[key][topic_key]\n                    else:\n                        combined_reference_dict[key][topic_key] = dict[key][topic_key]\n            else:\n                combined_reference_dict[key] = dict[key] \n    return combined_reference_dict\n\n# convert data to Pandas crosstab matrix, now including subject-area\ndef format_data_to_matrix(data):\n    students = []\n\n    for year_info in data: # [(lab_id: (int), {\"Student Name\": {\"student-referenced\": num_references (int), ...}}), ...]\n        for student_info in year_info: # (lab_id: (int), {\"Student Name\": {\"student-referenced\": num_references (int), ...}})\n            lab_id = student_info[0] \n            student_name = list(student_info[1].keys())[0]\n            reference_dict = student_info[1][list(student_info[1].keys())[0]]\n            students.append(student_name) \n\n    students_links = [X.split(\";\")[1] for X in students]\n\n    link_student_dict = {}\n\n    for i in range(len(students)):\n        link_student_dict[students_links[i]] = students[i]\n\n    print(\"STUDENTS\", students)\n\n    df = pd.crosstab(students, students)\n    df.rename_axis(\"Referencing Students\", axis=0, inplace=True)\n    df.rename_axis(\"Referenced Students\", axis=1, inplace=True)\n\n    df = pd.DataFrame(df, index=df.index, columns=pd.MultiIndex.from_product([df.columns, TOPICS]))\n\n    for student1 in students:\n        for student2 in students:\n            for topic_name in TOPICS:\n                df.at[student1, (student2, topic_name)] = (pd.NA if student1 == student2 else 0)\n\n    def assign_value(referencer_student, referenced_student, num_references, topic):\n        if referencer_student == referenced_student:\n            print(f\"Ignoring self-referenced student {referencer_student}\")\n        elif referenced_student not in students:\n            if referenced_student.split(\";\")[1] in students_links:\n                assign_value(referencer_student, link_student_dict[referenced_student.split(\";\")[1]], num_references, topic)\n            else:\n                print(\"Referenced student isn't a student - URL matched naming convention so regex caught but wasn't checked against student list - skipping\")\n        else:\n            df.loc[referencer_student, (referenced_student, topic)] = num_references\n\n    def get_value(referencer_student, referenced_student, topic):\n        return df.loc[referencer_student, (referenced_student, topic)]\n\n    for year_info in data:\n        for student_info in year_info:\n            student_name = list(student_info[1].keys())[0]\n            reference_dict = dict(student_info[1][student_name])\n            for referenced_student in reference_dict:\n                for reference_type in reference_dict[referenced_student]:\n                    num_references = reference_dict[referenced_student][reference_type]\n                    assign_value(student_name, referenced_student, num_references, reference_type)\n\n    df.to_csv(\"final_data.csv\", index_label=\"Referencing Students|Referenced Students\")\n\n    return df\n\n# get all of the reference dictionaries of different students for a given year\ndef get_all_reference_dicts(year, id):\n    filename = f\"{year}-{id}\"\n    if save_exists(\"reference_dict_saves\", filename):\n        print(f\"Save exists! {load_obj('reference_dict_saves', filename)}\")\n        return load_obj(\"reference_dict_saves\", filename)\n    reference_dict_list = []\n    default_branch_name_response = requests.get(f\"https://gitlab.fabcloud.org/api/v4/projects/{id}/repository/branches\").json()\n    default_branch_name = None\n    for branch in default_branch_name_response:\n        if branch['default']:\n            default_branch_name = branch['name']\n    if default_branch_name is None:\n        print(f\"Error: Default Branch Not Found (id: {id}) {default_branch_name_response} - leaving as None\")\n    try:\n        for file in get_file_repo_list(id):\n            print(f\"Checking {file}...\")\n            reference_dict_list.append(get_references(get_file_content(file, id, default_branch_name), year, get_repo_name(id)[1]))\n        print(\"Generating compiled reference dictionary...\")\n        compiled_reference_dict = combine_reference_dicts(reference_dict_list)\n        print(compiled_reference_dict)\n        save_obj(\"reference_dict_saves\", compiled_reference_dict, filename)\n        print(f\"SAVING to {filename}\")\n        return compiled_reference_dict\n    except gitlab.exceptions.GitlabGetError as e:\n        print(\"Error, returning combined reference dicts:\", e)\n        return combine_reference_dicts(reference_dict_list)\n\ndef get_people_soup(year):\n    filename = f\"{year}-soup\"\n    if save_exists(\"people_saves\", filename):\n        return load_obj(\"people_saves\", filename)\n\n    base_url = f\"https://fabacademy.org/{year}/people.html\"\n    soup = BeautifulSoup(requests.get(base_url).content, 'html.parser')\n\n    save_obj(\"people_saves\", soup, filename)\n\n    return soup\n\ndef repo_name_to_student_name(name_and_web_url_tup):\n    name, web_url = name_and_web_url_tup\n    year = web_url.split(\"/\")[3]\n    href = f'/{\"/\".join(web_url.split(\"/\")[3:])}'\n    people_soup = get_people_soup(year)\n    As = people_soup.find_all('a', href=True)\n    a = [_ for _ in As if _['href'] == href or _['href'] == href[:-1]][0] # or to account for ending slash\n    name_final = a.text.strip()\n    return name_final, web_url\n\nif __name__ == \"__main__\":\n    classifier = Classifier()\n\n    reference_dicts_across_years = [] # [[(lab_id: (int), {\"Student Name\": {\"student-referenced\": num_references (int), ...}}), ...], ...]\n\n    for year in range(2018, 2024):\n        print(\"Loading student names...\")\n        all_student_names = get_all_people(year)\n        print(all_student_names)\n        print(\"Collecting student repo IDs...\")\n        all_student_repo_ids = get_all_student_repo_ids(year, ALL_LAB_SUBGROUP_IDS[year], all_student_names)\n        print(all_student_repo_ids)\n\n        all_reference_dicts = [] # [(lab_id: (int), {\"Student Name\": {\"student-referenced\": num_references (int), ...}}), ...]\n\n        for lab_number, id in all_student_repo_ids:\n            \"\"\"temp_i += 1\n            if temp_i &gt; 3:\n                break\"\"\"\n            reference_dict_list = []\n\n            compiled_reference_dict = get_all_reference_dicts(year, id)\n            print(compiled_reference_dict)\n\n            print(\"Adding reference dictionary to database...\")\n            all_reference_dicts.append((lab_number, {format_name(get_repo_name(id), year): compiled_reference_dict}))\n            print(f\"All reference dictionaries so far... {all_reference_dicts}\")\n        reference_dicts_across_years.append(all_reference_dicts)\n\n    matrix = format_data_to_matrix(reference_dicts_across_years)\n</code></pre>"},{"location":"stem/expert-network-map/#network-analysis","title":"Network Analysis","text":"<p>Code</p> <p>Download the network analysis code here!</p> <p><code>density.py</code> calculates the global network density.</p> <p>density.py</p> <pre><code>import pandas as pd\nimport pickle, json\nimport networkx as nx\n\nwith open(\"final_data.json\", \"rb\") as file:\n    final_data = json.load(file)\n\nG = nx.DiGraph()\n\n# Add nodes to the graph\nfor node in final_data[\"nodes\"]:\n    G.add_node(node[\"id\"])\n\n# Add edges (links) to the graph\nfor link in final_data[\"links\"]:\n    G.add_edge(link[\"source\"], link[\"target\"], weight=link[\"value\"], topic=link[\"topic\"])\n\n# Calculate density\ndensity = nx.density(G)\n\nwith open(\"density.obj\",\"wb\") as file:\n    pickle.dump(density, file)\n\nprint(density)\n</code></pre> <p><code>density_by_lab.py</code> creates a data table of the network density of each lab.</p> <p>density_by_lab.py</p> <pre><code>import pandas as pd\nimport pickle, json\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\nlab_names_urls = ['aachen', 'aalto', 'agrilab', 'akgec', 'akureyri', 'algarve', 'bahrain', 'bangalore', 'barcelona', 'benfica', 'berytech', 'bhubaneswar', 'bhutan', 'boldseoul', 'bottrop', 'brighton', 'cept', 'chaihuo', 'chandigarh', 'charlotte', 'cidi', 'cit', 'ciudadmexico', 'cpcc', 'crunchlab', 'dassault', 'deusto', 'dhahran', 'digiscope', 'dilijan', 'ecae', 'echofab', 'ecostudio', 'egypt', 'energylab', 'esan', 'esne', 'fablabaachen', 'fablabaalto', 'fablabakgec', 'fablabamsterdam', 'fablabat3flo', 'fablabbahrain', 'fablabbeijing', 'fablabberytech', 'fablabbottrop', 'fablabbrighton', 'fablabcept', 'fablabcharlottelatin', 'fablabdassault', 'fablabdigiscope', 'fablabechofab', 'fablabecostudio', 'fablabegypt', 'fablaberfindergarden', 'fablabesan', 'fablabfacens', 'fablabfct', 'fablabgearbox', 'fablabincitefocus', 'fablabirbid', 'fablabisafjorour', 'fablabkamakura', 'fablabkamplintfort', 'fablabkhairpur', 'fablabkochi', 'fablabkromlaboro', 'fablablccc', 'fablableon', 'fablabmadridceu', 'fablabmexico', 'fablabodessa', 'fablabopendot', 'fablaboshanghai', 'fablaboulu', 'fablabpuebla', 'fablabreykjavik', 'fablabrwanda', 'fablabsantiago', 'fablabseoul', 'fablabseoulinnovation', 'fablabsiena', 'fablabsocom', 'fablabsorbonne', 'fablabspinderihallerne', 'fablabszoil', 'fablabtechworks', 'fablabtecsup', 'fablabtembisa', 'fablabtrivandrum', 'fablabuae', 'fablabulb', 'fablabutec', 'fablabvigyanasharm', 'fablabwgtn', 'fablabyachay', 'fablabyucatan', 'fablabzoi', 'falabdeusto', 'falabvestmannaeyjar', 'farmlabalgarve', 'fct', 'formshop', 'hkispace', 'ied', 'incitefocus', 'ingegno', 'inphb', 'insper', 'ioannina', 'irbid', 'isafjordur', 'jubail', 'kamakura', 'kamplintfort', 'kannai', 'kaust', 'keolab', 'khairpur', 'kitakagaya', 'kochi', 'lakazlab', 'lamachinerie', 'lccc', 'leon', 'libya', 'lima', 'napoli', 'newcairo', 'ningbo', 'opendot', 'oshanghai', 'oulu', 'plusx', 'polytech', 'puebla', 'qbic', 'reykjavik', 'riidl', 'rwanda', 'santachiara', 'sedi', 'seoul', 'seoulinnovation', 'singapore', 'sorbonne', 'stjude', 'szoil', 'taipei', 'talents', 'techworks', 'tecsup', 'tecsupaqp', 'tianhelab', 'tinkerers', 'trivandrum', 'twarda', 'uae', 'ucal', 'ucontinental', 'uemadrid', 'ulb', 'ulima', 'utec', 'vancouver', 'vestmannaeyjar', 'vigyanashram', 'waag', 'wheaton', 'winam', 'yucatan', 'zoi']\n\nMIN_STUDENTS = 5\n\nlabs_by_continent = {\n    \"vigyanashram\":\"Asia\", # India\n    \"oulu\":\"Europe\", # Finland\n    \"kamplintfort\":\"Europe\", # Germany\n    \"charlotte\":\"North America\", # USA (Assumed)\n    \"lccc\":\"North America\", # USA (Assumed)\n    \"bahrain\":\"Asia\", # Bahrain\n    \"uae\":\"Asia\", # United Arab Emirates\n    \"libya\":\"Africa\", # Libya\n    \"techworks\":\"North America\", # USA (Assumed)\n    \"newcairo\":\"Africa\", # Egypt\n    \"egypt\":\"Africa\", # Egypt\n    \"lakazlab\":\"Africa\", # Mauritius (Assumed)\n    \"tecsup\":\"South America\", # Peru\n    \"wheaton\":\"North America\", # USA (Assumed)\n    \"fablabuae\":\"Asia\", # United Arab Emirates\n    \"qbic\":\"Asia\", # Qatar (Assumed)\n    \"kochi\":\"Asia\", # India\n    \"ied\":\"Europe\", # Italy (Assumed)\n    \"fablabtrivandrum\":\"Asia\", # India\n    \"fablabakgec\":\"Asia\", # India\n    \"barcelona\":\"Europe\", # Spain\n    \"fablabsorbonne\":\"Europe\", # France\n    \"fablabcept\":\"Asia\", # India\n    \"rwanda\":\"Africa\", # Rwanda\n    \"leon\":\"Europe\", # Spain (Assumed)\n    \"lamachinerie\":\"Europe\", # France (Assumed)\n    \"fablabdigiscope\":\"Europe\", # France (Assumed)\n    \"energylab\":\"Europe\", # Denmark (Assumed)\n    \"akgec\":\"Asia\", # India\n    \"irbid\":\"Asia\", # Jordan\n    \"reykjavik\":\"Europe\", # Iceland\n    \"sorbonne\":\"Europe\", # France\n    \"incitefocus\":\"North America\", # USA (Assumed)\n    \"puebla\":\"North America\", # Mexico\n    \"tecsupaqp\":\"South America\", # Peru\n    \"ucontinental\":\"South America\", # Peru\n    \"fablabopendot\":\"Europe\", # Italy\n    \"santachiara\":\"Europe\", # Italy\n    \"fablabechofab\":\"North America\", # Canada\n    \"zoi\":\"Asia\", # China (Assumed)\n    \"cidi\":\"North America\", # USA (Assumed)\n    \"dassault\":\"Europe\", # France (Assumed)\n    \"stjude\":\"North America\", # USA (Assumed)\n    \"aalto\":\"Europe\", # Finland\n    \"fablabzoi\":\"Asia\", # China (Assumed)\n    \"ecae\":\"Asia\", # United Arab Emirates\n    \"fablabbahrain\":\"Asia\", # Bahrain\n    \"khairpur\":\"Asia\", # Pakistan\n    \"insper\":\"South America\", # Brazil\n    \"trivandrum\":\"Asia\", # India\n    \"inphb\":\"Africa\", # Ivory Coast\n    \"digiscope\":\"Europe\", # France (Assumed)\n    \"ulb\":\"Europe\", # Belgium (Assumed)\n    \"lima\":\"South America\", # Peru\n    \"fablabspinderihallerne\":\"Europe\", # Denmark\n    \"fablabfct\":\"Europe\", # Portugal (Assumed)\n    \"fct\":\"Africa\", # Nigeria (Assumed)\n    \"opendot\":\"Europe\", # Italy\n    \"fablabtecsup\":\"South America\", # Peru\n    \"vancouver\":\"North America\", # Canada\n    \"fablabbrighton\":\"Europe\", # UK\n    \"akureyri\":\"Europe\", # Iceland\n    \"yucatan\":\"North America\", # Mexico\n    \"bhutan\":\"Asia\", # Bhutan\n    \"fablabaachen\":\"Europe\", # Germany\n    \"waag\":\"Europe\", # Netherlands\n    \"echofab\":\"North America\", # Canada\n    \"dilijan\":\"Asia\", # Armenia\n    \"polytech\":\"Europe\", # France (Assumed)\n    \"agrilab\":\"Asia\", # Armenia\n    \"fablabsiena\":\"Europe\", # Italy -- ChatGPT changed \"fablabsiena\" to \"siena\" -- corrected by hand\n    \"winam\":\"Africa\", # Kenya (Assumed)\n    \"fablaboulu\":\"Europe\", # Finland\n    \"fablabreykjavik\":\"Europe\", # Iceland\n    \"kamakura\":\"Asia\", # Japan\n    \"falabvestmannaeyjar\":\"Europe\", # Iceland\n    \"singapore\":\"Asia\", # Singapore\n    \"oshanghai\":\"Asia\", # China\n    \"fablaboshanghai\":\"Asia\", # China\n    \"fablabutec\":\"South America\", # Peru\n    \"fablabodessa\":\"Europe\", # Ukraine\n    \"esan\":\"South America\", # Peru\n    \"fablabvigyanasharm\":\"Asia\", # India\n    \"hkispace\":\"Asia\", # Hong Kong\n    \"taipei\":\"Asia\", # Taiwan\n    \"fablabmexico\":\"North America\", # Mexico\n    \"ciudadmexico\":\"North America\", # Mexico\n    \"aachen\":\"Europe\", # Germany\n    \"fablabbottrop\":\"Europe\", # Germany\n    \"fablabaalto\":\"Europe\", # Finland\n    \"keolab\":\"Asia\", # Japan (Assumed)\n    \"cpcc\":\"North America\", # USA (Assumed)\n    \"fablabkamplintfort\":\"Europe\", # Germany\n    \"ingegno\":\"Europe\", # Italy (Assumed)\n    \"fablabkamakura\":\"Asia\", # Japan\n    \"tinkerers\":\"Asia\", # United Arab Emirates (Assumed)\n    \"cit\":\"Europe\", # Ireland (Assumed)\n    \"utec\":\"South America\", # Peru\n    \"fablabamsterdam\":\"Europe\", # Netherlands\n    \"tianhelab\":\"Asia\", # China (Assumed)\n    \"bhubaneswar\":\"Asia\", # India\n    \"cept\":\"Asia\", # India\n    \"fablabbeijing\":\"Asia\", # China\n    \"talents\":\"Europe\", # Germany (Assumed)\n    \"fablabyachay\":\"South America\", # Ecuador\n    \"fablabdassault\":\"Europe\", # France (Assumed)\n    \"ecostudio\":\"North America\", # USA (Assumed)\n    \"fablabseoul\":\"Asia\", # South Korea\n    \"kaust\":\"Asia\", # Saudi Arabia\n    \"berytech\":\"Asia\", # Lebanon\n    \"fablabpuebla\":\"North America\", # Mexico\n    \"fablabrwanda\":\"Africa\", # Rwanda\n    \"fablabesan\":\"South America\", # Peru\n    \"fablabberytech\":\"Asia\", # Lebanon\n    \"crunchlab\":\"Europe\", # Portugal (Assumed)\n    \"ucal\":\"North America\", # USA (Assumed)\n    \"vestmannaeyjar\":\"Europe\", # Iceland\n    \"sedi\":\"Europe\", # Italy (Assumed)\n    \"isafjordur\":\"Europe\", # Iceland\n    \"fablabegypt\":\"Africa\", # Egypt\n    \"szoil\":\"Asia\", # China\n    \"formshop\":\"Asia\", # China (Assumed)\n    \"fablabkochi\":\"Asia\", # India\n    \"fablabincitefocus\":\"North America\", # USA (Assumed)\n    \"kitakagaya\":\"Asia\", # Japan\n    \"kannai\":\"Asia\", # Japan\n    \"dhahran\":\"Asia\", # Saudi Arabia\n    \"seoulinnovation\":\"Asia\", # South Korea\n    \"ioannina\":\"Europe\", # Greece\n    \"fablabyucatan\":\"North America\", # Mexico\n    \"fablabirbid\":\"Asia\", # Jordan\n    \"deusto\":\"Europe\", # Spain\n    \"falabdeusto\":\"Europe\", # Spain\n    \"riidl\":\"Asia\", # India\n    \"bottrop\":\"Europe\", # Germany\n    \"fablabisafjorour\":\"Europe\", # Iceland\n    \"plusx\":\"Asia\", # South Korea (Assumed)\n    \"fablaberfindergarden\":\"Europe\", # Germany (Assumed)\n    \"uemadrid\":\"Europe\", # Spain\n    \"fablabtembisa\":\"Africa\", # South Africa\n    \"brighton\":\"Europe\", # UK\n    \"fablabfacens\":\"South America\", # Brazil\n    \"fablableon\":\"Europe\", # Spain (Assumed)\n    \"fablabszoil\":\"Asia\", # China\n    \"fablabgearbox\":\"Africa\", # Kenya (Assumed)\n    \"farmlabalgarve\":\"Europe\", # Portugal\n    \"algarve\":\"Europe\", # Portugal\n    \"twarda\":\"Europe\", # Poland (Assumed)\n    \"bangalore\":\"Asia\", # India\n    \"fablabsantiago\":\"South America\", # Chile\n    \"fablablccc\":\"North America\", # USA (Assumed)\n    \"fablabcharlottelatin\":\"North America\", # USA\n    \"fablabat3flo\":\"Europe\", # Hungary (Assumed)\n    \"fablabecostudio\":\"North America\", # USA (Assumed)\n    \"fablabsocom\":\"Asia\", # China (Assumed)\n    \"boldseoul\":\"Asia\", # South Korea\n    \"napoli\":\"Europe\", # Italy\n    \"fablabkromlaboro\":\"Europe\", # Slovenia (Assumed)\n    \"seoul\":\"Asia\", # South Korea\n    \"fablabtechworks\":\"North America\", # USA (Assumed)\n    \"fablabkhairpur\":\"Asia\", # Pakistan\n    \"chaihuo\":\"Asia\", # China (Assumed)\n    \"fablabulb\":\"Europe\", # Belgium (Assumed)\n    \"esne\":\"Europe\", # Spain (Assumed)\n    \"ulima\":\"South America\", # Peru\n    \"fablabseoulinnovation\":\"Asia\", # South Korea\n    \"benfica\":\"Europe\", # Portugal (Assumed)\n    \"fablabmadridceu\":\"Europe\", # Spain\n    \"chandigarh\":\"Asia\", # India\n    \"jubail\":\"Asia\", # Saudi Arabia\n    \"ningbo\":\"Asia\", # China\n    \"fablabwgtn\":\"Oceania\" # New Zealand\n}\n\ngrouped_lab_names = [\n    ['aachen', 'fablabaachen'],\n    ['aalto', 'fablabaalto'],\n    ['agrilab'],\n    ['akgec', 'fablabakgec'],\n    ['akureyri'],\n    ['algarve', 'farmlabalgarve'],\n    ['bahrain', 'fablabbahrain'],\n    ['bangalore'],\n    ['barcelona'],\n    ['benfica'],\n    ['berytech', 'fablabberytech'],\n    ['bhubaneswar'],\n    ['bhutan'],\n    ['seoul', 'fablabseoul', 'fablabseoulinnovation', 'boldseoul', 'seoulinnovation'],\n    ['bottrop', 'fablabbottrop'],\n    ['brighton', 'fablabbrighton'],\n    ['cept', 'fablabcept'],\n    ['chaihuo'],\n    ['chandigarh'],\n    ['charlotte', 'fablabcharlottelatin'],\n    ['cidi'],\n    ['cit'],\n    ['ciudadmexico'],\n    ['cpcc'],\n    ['crunchlab'],\n    ['dassault', 'fablabdassault'],\n    ['deusto', 'falabdeusto'],\n    ['dhahran'],\n    ['digiscope', 'fablabdigiscope'],\n    ['dilijan'],\n    ['ecae'],\n    ['echofab', 'fablabechofab'],\n    ['ecostudio', 'fablabecostudio'],\n    ['egypt', 'fablabegypt'],\n    ['energylab'],\n    ['esan', 'fablabesan'],\n    ['esne'],\n    ['fablabamsterdam'],\n    ['fablabat3flo'],\n    ['fablabbeijing'],\n    ['fablabfacens'],\n    ['fablabfct'],\n    ['fablabgearbox'],\n    ['fablabincitefocus'],\n    ['fablabirbid', 'irbid'],\n    ['fablabisafjorour', 'isafjordur'],\n    ['fablabkamakura', 'kamakura'],\n    ['fablabkamplintfort', 'kamplintfort'],\n    ['fablabkhairpur', 'khairpur'],\n    ['fablabkochi', 'kochi'],\n    ['fablabkromlaboro'],\n    ['fablablccc', 'lccc'],\n    ['fablableon', 'leon'],\n    ['fablabmadridceu'],\n    ['fablabmexico', 'ciudadmexico'],\n    ['fablaberfindergarden'],\n    ['fablabodessa'],\n    ['fablabopendot', 'opendot'],\n    ['fablaboshanghai', 'oshanghai'],\n    ['fablaboulu', 'oulu'],\n    ['fablabpuebla', 'puebla'],\n    ['fablabreykjavik', 'reykjavik'],\n    ['fablabrwanda', 'rwanda'],\n    ['fablabsantiago'],\n    ['fablabsiena', 'santachiara'],\n    ['fablabsocom'],\n    ['fablabsorbonne', 'sorbonne'],\n    ['fablabspinderihallerne'],\n    ['fablabszoil', 'szoil'],\n    ['fablabtechworks', 'techworks'],\n    ['fablabtecsup', 'tecsup', 'tecsupaqp'],\n    ['fablabtembisa'],\n    ['fablabtrivandrum', 'trivandrum'],\n    ['fablabuae', 'uae'],\n    ['fablabulb', 'ulb'],\n    ['fablabutec', 'utec'],\n    ['fablabvigyanasharm', 'vigyanashram'],\n    ['fablabwgtn'],\n    ['fablabyachay'],\n    ['fablabyucatan', 'yucatan'],\n    ['fablabzoi', 'zoi'],\n    ['falabvestmannaeyjar', 'vestmannaeyjar'],\n    ['fct'],\n    ['formshop'],\n    ['hkispace'],\n    ['ied'],\n    ['incitefocus'],\n    ['ingegno'],\n    ['inphb'],\n    ['insper'],\n    ['ioannina'],\n    ['jubail'],\n    ['kannai'],\n    ['kaust'],\n    ['keolab'],\n    ['kitakagaya'],\n    ['lakazlab'],\n    ['lamachinerie'],\n    ['libya'],\n    ['lima'],\n    ['napoli'],\n    ['newcairo'],\n    ['ningbo'],\n    ['plusx'],\n    ['polytech'],\n    ['qbic'],\n    ['riidl'],\n    ['sedi'],\n    ['singapore'],\n    ['stjude'],\n    ['taipei'],\n    ['talents'],\n    ['tianhelab'],\n    ['tinkerers'],\n    ['twarda'],\n    ['ucal'],\n    ['ucontinental'],\n    ['uemadrid'],\n    ['ulima'],\n    ['vancouver'],\n    ['waag'],\n    ['wheaton'],\n    ['winam']\n]\n\ndef format_lab_group(lab_group):\n    return \"/\".join(lab_group)\n\ndef get_continent(lab_group):\n    for lab_name in lab_group:\n        if lab_name in labs_by_continent:\n            return labs_by_continent[lab_name]\n    raise Exception(\"Lab Not Found\")\n\ndef node_is_lab(node_id, lab_sort, year_sort):\n    url = node_id.split(\";\")[1]\n\n    lab = url.split(\"/\")[5]\n\n    if year_sort == True:\n        year = True\n    else:\n        year = url.split(\"/\")[3]\n\n    lab_group_current = None\n    for lab_group in grouped_lab_names:\n        if lab in lab_group:\n            lab_group_current = lab_group\n            break  \n    else:\n        raise Exception(\"Lab Not Found\")\n    if people_per_lab[format_lab_group(lab_group_current)] &lt; MIN_STUDENTS:\n        return False\n\n    return (lab.lower() in lab_sort) and (year or (year in year_sort))\n\nwith open(\"final_data.json\", \"rb\") as file:\n    final_data = json.load(file)\n\npeople_per_lab = {}\n\nfor lab_group in grouped_lab_names:\n    formatted = format_lab_group(lab_group)\n    people_per_lab[formatted] = 0\nfor student in final_data['nodes']:\n    lab = student['id'].split(\"/\")[5]\n    lab_group_name = None\n    for lab_group in grouped_lab_names:\n        if lab in lab_group:\n            lab_group_name = format_lab_group(lab_group)\n            break\n    else:\n        print(lab)\n        raise Exception(\"Lab Not Found\")\n    people_per_lab[lab_group_name] += 1\n\ndensities = {'lab':[], 'density':[], 'geography':[]}\n\nfor lab_group in grouped_lab_names:\n    if people_per_lab[format_lab_group(lab_group)] &lt; MIN_STUDENTS:\n        continue\n    G = nx.DiGraph()\n\n    students = []\n\n    LAB = lab_group\n    YEAR = True\n\n    # Add nodes to the graph\n    for node in final_data[\"nodes\"]:\n        students.append(node[\"id\"])\n        if not node_is_lab(node[\"id\"], LAB, YEAR):\n            continue\n        G.add_node(node[\"id\"])\n\n    # Add edges (links) to the graph\n    for link in final_data[\"links\"]:\n        if (not node_is_lab(link[\"source\"], LAB, YEAR)) or (not node_is_lab(link[\"target\"], LAB, YEAR)):\n            continue\n        G.add_edge(link[\"source\"], link[\"target\"], weight=link[\"value\"], topic=link[\"topic\"])\n\n    # Calculate density\n    density = nx.density(G)\n    densities['lab'].append(format_lab_group(lab_group))\n    densities['density'].append(density)\n    densities['geography'].append(get_continent(lab_group))\n\ndf = pd.DataFrame(data=densities)\ndf.to_csv(f\"density_by_lab_minimum_5_students.csv\")\n</code></pre> <p><code>in_degree_centrality_by_subject.py</code> creates a data table of each student's <code>in-degree centrality</code> for each subject area.</p> <p>in_degree_centrality_by_subject.py</p> <pre><code>import pandas as pd\nimport pickle, json\nimport networkx as nx\n\nTOPICS = [\n    \"Computer-Aided Design\",\n    \"Computer-Controlled Cutting\",\n    \"Embedded Programing\",\n    \"3D Scanning and Printing\",\n    \"Electronics Design\",\n    \"Computer-Controlled Machining\",\n    \"Electronics Production\",\n    \"Mechanical Design, Machine Design\",\n    \"Input Devices\",\n    \"Moulding and Casting\",\n    \"Output Devices\",\n    \"Embedded Networking and Communications\",\n    \"Interface and Application Programming\",\n    \"Wildcard Week\",\n    \"Applications and Implications\",\n    \"Invention, Intellectual Property and Business Models\",\n    \"Final Project\"\n]\n\nwith open(\"final_data.json\", \"rb\") as file:\n    final_data = json.load(file)\n\nfor topic in TOPICS:\n    G = nx.DiGraph()\n\n    # Add nodes to the graph\n    for node in final_data[\"nodes\"]:\n        G.add_node(node[\"id\"])\n\n    # Add edges (links) to the graph\n    for link in final_data[\"links\"]:\n        if link[\"topic\"] != topic:\n            continue\n        G.add_edge(link[\"source\"], link[\"target\"], weight=link[\"value\"], topic=link[\"topic\"])\n\n    # Calculate degree centrality\n    degree_centrality = nx.degree_centrality(G)\n\n    table_data = {\"student\":[],\"degree_centrality\":[]}\n\n    for student in list(degree_centrality.keys()):\n        table_data[\"student\"].append(student)\n        table_data[\"degree_centrality\"].append(degree_centrality[student])\n\n    df = pd.DataFrame(data=table_data)\n    df.to_csv(f\"in_degree_centrality_topic_{topic.replace(' ','_')}_all_labs_years.csv\")\n</code></pre> <p>Ranked Top 10 In-Degree Centrality</p> <p>Click on the image below to see the data table for all students who were ranked in the top 10 for their <code>in-degree centrality</code> in a subject area. The table includes the students' ranks across all subject areas and highlights in green whenever they were in the top 10. Only <code>111 students</code> were ranked in the top 10 for at least one of the 17 subject areas because several students were ranked top 10 in multiple categories.</p> <p></p> <ul> <li>Click here to download an <code>xlsx</code> Excel file of the data</li> </ul> <p>Full In-Degree Centrality Data</p> <p>Click on the image below to see the data table for all students' <code>in-degree centrality</code> value and ranking by subject area. These data are the basis for ranking students' expertise in a subject area.</p> <p></p> <ul> <li>Click here to download an <code>xlsx</code> Excel file of the data</li> </ul> <p>Density by Lab and Continent</p> <p>Below is a graph of the <code>density</code> of each lab's network, color coded by continent. Only labs with five or more students since 2018 were included in the analysis since very small labs skew the results (for example, a lab that only had one student has a network density of <code>1</code>). The dark blue vertical line represents the global network density of <code>0.00237457479499778</code>. <code>~91.3%</code> of the individual labs had a higher density than this, ranging from approximately <code>0.03</code> to <code>0.45</code> (with the exception of the <code>Rwanda</code> network density of <code>~0.013</code>), supporting my hypothesis that students frequently connected with experts in their own lab, but not in the global community. Click on the graph to open a spreadsheet with all of the data.</p> <p></p> <ul> <li>Click here to download an <code>xlsx</code> Excel file of the data</li> <li>Click here to download open or download the chart as a <code>jpg</code></li> </ul>"},{"location":"stem/expert-network-map/#step-3-data-visualization_1","title":"Step 3: Data Visualization","text":"<p>Download the webpage code for Step 3 here!</p> <p>Download the Python code and data files for Step 3 here!</p> <p>Download only the Python code for Step 3 here!</p>"},{"location":"stem/expert-network-map/#library-and-data-structure","title":"Library and Data Structure","text":"<p>I employed D3JS, a JavaScript library, to create the data visualization. I started off by browsing the D3 Gallery to select the format for my visualization. I was choosing between a <code>Disjoint Force-Directed Graph</code> and a <code>Force Directed Graph with Arrows</code>. Due to frequent two-way connections between nodes and a large amount of data (so very small lines for each individual connection, making arrowheads hard to discern), I decided on the <code>Disjoint Force-Directed Graph</code>.</p> <p> </p> <p>So I read through the example code from D3JS carefully and found that the input data was a JSON with the following format:</p> <pre><code>{\n  \"nodes\": {\n    {\"id\": \"ID1\", \"radius\": 1},\n    {\"id\": \"ID2\", \"radius\": 1},\n    {\"id\": \"ID3\", \"radius\": 1}\n  },\n  \"links\": {\n    {\"source\": \"ID1\", \"target\": \"ID3\", \"value\": 1},\n    {\"source\": \"ID2\", \"target\": \"ID3\", \"value\": 4},\n    {\"source\": \"ID2\", \"target\": \"ID1\", \"value\": 3}\n  }\n}\n</code></pre> <p>The <code>nodes</code> object contains every node's ID as well as other data, such as the node's radius. The <code>links</code> object contains each edge, in my case connection between students, and an associated value which can be used to control strength or thickness.</p>"},{"location":"stem/expert-network-map/#transforming-data","title":"Transforming Data","text":"<p>So the first step was to transform my <code>Pandas</code> dataframe into a JSON file of this format. I wrote <code>matrix2d3js.py</code>. When this script is run, it takes <code>final_data.csv</code> (the output from Step 2) and moves all of the data into a JSON file matching the structure outline above. This is then saved as <code>final_data.json</code>.</p> <p>matrix2d3js.py</p> <pre><code>import pandas as pd\nimport numpy as np\nimport json\n\nINPUT_FILE = \"final_data.csv\"\nOUTPUT_FILE = \"final_data.json\"\n\ndf = pd.read_csv(INPUT_FILE, header=[0, 1], index_col=0)\n\nSTUDENTS = list(df.iloc[:, 0].keys())\nTOPICS = [\n    \"Prefab\",\n    \"Computer-Aided Design\",\n    \"Computer-Controlled Cutting\",\n    \"Embedded Programing\",\n    \"3D Scanning and Printing\",\n    \"Electronics Design\",\n    \"Computer-Controlled Machining\",\n    \"Electronics Production\",\n    \"Mechanical Design, Machine Design\",\n    \"Input Devices\",\n    \"Moulding and Casting\",\n    \"Output Devices\",\n    \"Embedded Networking and Communications\",\n    \"Interface and Application Programming\",\n    \"Wildcard Week\",\n    \"Applications and Implications\",\n    \"Invention, Intellectual Property and Business Models\",\n    \"Final Project\",\n    \"Other\"\n]\n\ndef get_value(df, referencer_student, referenced_student, topic):\n    return df.loc[referencer_student, (referenced_student, topic)]\n\ndef generate_node_obj(name, group):\n    return {\n        \"id\": name,\n        \"group\": group\n    }\n\ndef generate_link_obj(name_from, name_to, strength, topic):\n    return {\n        \"source\": name_from,\n        \"target\": name_to,\n        \"value\": strength,\n        \"topic\": topic\n    }\n\nfinal_data = {\n    \"nodes\": [ ],\n    \"links\": [ ]\n}\n\ndef split_name(name):\n    return name.split(\";\")\n\nif __name__ == \"__main__\":\n    # create `nodes` object in final JSON\n    for student in STUDENTS:\n        student_name, student_link = split_name(student)\n        final_data['nodes'].append(generate_node_obj(student, 1))\n\n    # for each link between students, add a link object in the final JSON under the `links` object\n    for referencer_student in STUDENTS:\n        referencer_student_name, referencer_student_link = split_name(referencer_student)\n        for referenced_student in STUDENTS:\n            referenced_student_name, referenced_student_link = split_name(referenced_student)\n            for topic in TOPICS:\n                val = get_value(df, referencer_student, referenced_student, topic)\n\n                if val == 0 or np.isnan(val): continue\n\n                final_data['links'].append(generate_link_obj(referencer_student, referenced_student, val, topic))\n\n    with open(\"final_data.json\", \"w\") as outfile:\n        json.dump(final_data, outfile)\n</code></pre>"},{"location":"stem/expert-network-map/#name-conflicts","title":"Name Conflicts","text":"<p>Upon inspecting the data, I noticed that several students with longer names had names that did not reflect their listing on the Fab Academy Student Rosters (for example, click here to see the 2023 roster). To resolve this, I wrote <code>resolve_name_conflicts.py</code>. This identifies students based on the URL to their website (which acts as a unique identifier for every student) and checkes it against the webpage. This was especially challenging since some students whose names have diacritic marks or accent marks are sometimes displayed as characters and other times as unicode beginning with <code>\\u</code>, so I checked for both. The webpage name overrides the name collected during Step 2.</p> <p>So I ran <code>resolve_name_conflicts.py</code>, which takes <code>final_data.json</code> as an input and outputs <code>final_data_name_fixed.json</code>.</p> <p>Below is <code>resolve_name_conflicts.py</code>. Before that codeblock I include four functions that are imported from <code>main.py</code> (see Step 2) for reference. I did not include the libraries included in <code>main.py</code> as it is detailed above.</p> <pre><code># check if an object exists at the specified filepath\ndef save_exists(folder_name, name):\n    return os.path.exists(f\"{folder_name}/{name}.obj\")\n\n# return the pickled object saved in the specifed filepath\ndef load_obj(folder_name, name):\n    with open(f\"{folder_name}/{name}.obj\", \"rb\") as filehandler:\n        return pickle.load(filehandler)\n\n# return the webpage of fabacademy.org that includes every student's names from the specified year (and if this has already been downloaded and saved in a pickled object, load that instead of sending an HTTP request)\ndef get_people_soup(year):\n    filename = f\"{year}-soup\"\n    if save_exists(\"people_saves\", filename):\n        return load_obj(\"people_saves\", filename)\n\n    base_url = f\"https://fabacademy.org/{year}/people.html\"\n    soup = BeautifulSoup(requests.get(base_url).content, 'html.parser')\n\n    save_obj(\"people_saves\", soup, filename)\n\n    return soup\n\n# formats a student's ID by accessing their name as detailed on the fabacademy.org students list, as well as the URL to their website\ndef repo_name_to_student_name(name_and_web_url_tup):\n    name, web_url = name_and_web_url_tup\n    year = web_url.split(\"/\")[3]\n    href = f'/{\"/\".join(web_url.split(\"/\")[3:])}'\n    people_soup = get_people_soup(year)\n    As = people_soup.find_all('a', href=True)\n    a = [_ for _ in As if _['href'] == href or _['href'] == href[:-1]][0] # or to account for ending slash\n    name_final = a.text.strip()\n    return name_final, web_url\n</code></pre> <p>resolve_name_conflicts.py</p> <pre><code>from main import repo_name_to_student_name\nimport pandas as pd\nimport re\n\ndf = pd.read_csv(\"final_data.csv\", header=[0, 1], index_col=0)\n\nSTUDENTS = list(df.iloc[:, 0].keys())\n\nregexes = {}\n\nnormal_chars = \"abcdefghijklmnopqrstuvwxyz-\"\n\n# convert a char from a character with an accent/dialectic into unicode\ndef accent_to_code(char):\n    return format(ord(char), \"#06x\").replace(\"0x\", \"\\\\u\")\n\n# convert a char from unicode into a character with an accent/dialectic\ndef code_to_accent(code):\n    return chr(int(code.replace(\"\\\\u\", \"0x\"), 16))\n\n# takes a name, converts it to a list of chars, then converts all characters with accents/dialectics to unicode\ndef non_letters_into_codes(name):\n    lst = [_ for _ in name]\n    for i in range(len(lst)):\n        char = lst[i]\n        if char.lower() not in normal_chars:\n            lst[i] = accent_to_code(char)\n    return \"\".join(lst)\n\nif __name__ == \"__main__\":\n    # create a dictionary where keys are regexes of the student's previous names as standard text and as text where diacritics/accents are replaced with unicode, and values are the corrected names\n    for student in STUDENTS:\n        val = \";\".join(repo_name_to_student_name(student.split(\";\")))\n        regexes[student] = val\n        regexes[non_letters_into_codes(student.split(\";\")[0]) + \";\" + student.split(\";\")[1]] = val\n\n    # run the regex on final_data.json (literally replace the text, don't load as an object)\n    with open('final_data.json', 'r') as file:\n        content = file.read()\n        for key in regexes:\n            content = re.sub(re.escape(key), regexes[key], content)\n\n    # store the corrected data\n    with open('final_data_name_fixed.json', 'w', encoding='utf-8') as file: # encoding='utf-8' so that special characters in names can be written without UnicodeEncodeError\n        file.write(content)\n</code></pre>"},{"location":"stem/expert-network-map/#code-structure","title":"Code Structure","text":"<p>The JavaScript is spread out among several files, but is it centered around <code>app.js</code>. <code>app.js</code> loads the JSON data and initializes the visualization, setting up callbacks in other files to be run when the user interacts with the website. These callbacks are handled by <code>update_data.js</code> which has a three-part system for updating the visualization based off of user interactions. Read about <code>app.js</code> in detail here, and read about <code>update_data.js</code> in detail here.</p> <p>The project directory is structured as follows:</p> <pre><code>public\n\u2502   app.js\n\u2502   carousel.js\n\u2502   combined.js\n\u2502   constants.js\n\u2502   d3js_download.js\n\u2502   dial.js\n\u2502   final_data.json\n\u2502   force_boundary_download.js\n\u2502   helper_functions.js\n\u2502   index.html\n\u2502   jquery_download.js\n\u2502   lab_region.js\n\u2502   multiselect_dropdown.js\n\u2502   overlay_text.js\n\u2502   style.css\n\u2502   update_data.js\n\u2502   vars.js\n\u2502\n\u2514\u2500\u2500\u2500img\n    \u2514\u2500\u2500\u2500favicon\n        \u2514\u2500\u2500\u2500favicon.ico\n</code></pre>"},{"location":"stem/expert-network-map/#visualization-constants-and-global-variables","title":"Visualization Constants and Global Variables","text":"<p><code>constants.js</code> defines almost all of the constant variables, include color palletes, opacity levels, etc. I've compiled these into a separate file so that tweaking the visual appeal is consolidated to editing one file.</p> <p>constants.js</p> <pre><code>const NODE_STROKE_WIDTH_HIGHLIGHTED = \"1.5px\", // width of circle around node circle on hover\n    HOVER_NODE_STROKE_COLOR = \"black\", // color of circle around node circle on hover\n    NOT_HOVERING_NODE_STROKE_WIDTH = \"0px\", // width of circle around node circle when not hovering\n    NOT_HOVERING_NODE_STROKE_COLOR = \"\", // color of circle around node circle when not hovering\n    RGB_LINE_COLOR = \"0,0,0\", // color of edges\n    LINE_WIDTH = \"0.3px\", // width of edges\n    CAROUSEL_RECT_STROKE_COLOR = \"\", // color of rectangular outline of each rectangle in the subject-area-selection carousel\n    CAROUSEL_RECT_STROKE_WIDTH = \"0px\", // width of rectangular outline of each rectangle in the subject-area-selection carousel\n    CAROUSEL_SELECTOR_COLOR = \"black\", // color of the rectangular path that displays which subject area you have selected\n    DIAL_OUTLINE_COLOR = \"grey\", // color of the outline of the minimum times referenced dial\n    DIAL_TEXT_COLOR = \"black\", // color of the text labeling the minimum times referenced dial\n    OVERLAY_TEXT_LINK_COLOR = \"#7e7eed\"; // color of the links\n\n// all CSS customizable values not controlled through JS/D3JS are included as variables under :root in style.css\n\nconst SCALE_FACTOR = 1, // factor that the strength of edges in the force-simulation are multiplied by (higher number = nodes are pulled closer together)\n    forceBoundaryMargin = 30; // margin along the defined edges of the force simulation \n\nconst minOpacity = 0.15; // opacity of a node if the selected filters do not include the node\n\nconst NODE_HIGHLIGHTED_OPACITY = 1; // opacity of a node if the selected filters do include the node\nconst MINIMUM_STRENGTH_CONSTANT = 100; // lowest possible strength of edges (increasing this will linearly increase the strength of all edges in the graph)\n\n// colors of years-pie and subject-area-selection carousel\nconst PIE_SLICE_COLOR = 'grey',\n    PIE_TEXT_COLOR = 'white',\n    DIAL_STICK_COLOR = 'grey',\n    CAROUSEL_OPTION_COLOR = 'grey',\n    CAROUSEL_TEXT_COLOR = 'white';\n\n// color pallete of Fab Academy\nconst FAB_PALETTE = [\n    \"#f1f2f2\",\n    \"#f1d2f2\",\n    \"#f1b2f2\",\n    \"#f04260\",\n    \"#4abfbd\",\n    \"#284fb5\",\n    \"#f05c71\"\n];\n\n// color pallete of nodes by continent - encodes geographical data\nconst NODE_REGION_PALETTE = [\n    \"#1da619\",\n    \"#f04260\",\n    \"#4abfbd\",\n    \"#284fb5\",\n    \"#f05be1\",\n    \"#87743d\"\n];\n\n// list of continent names\nconst continent = [\n    \"Africa\",\n    \"Asia\",\n    \"Europe\",\n    \"North America\",\n    \"South America\",\n    \"Oceania\"\n];\n\n// zips the continent color pallete and list of continents above into an object\nconst continentColor = {};\nfor (let i = 0; i &lt; NODE_REGION_PALETTE.length; i++) continentColor[continent[i]] = NODE_REGION_PALETTE[i];\n\n// node radius parameters\nconst NODE_SIZE_MULTIPLIER = 50;\nconst NODE_SIZE_MINIMUM = 5;\n\n// list of Fab Academy subject-areas\nconst TOPICS = [\n    \"Prefab\",\n    \"Computer-Aided Design\",\n    \"Computer-Controlled Cutting\",\n    \"Embedded Programing\",\n    \"3D Scanning and Printing\",\n    \"Electronics Design\",\n    \"Computer-Controlled Machining\",\n    \"Electronics Production\",\n    \"Mechanical Design, Machine Design\",\n    \"Input Devices\",\n    \"Moulding and Casting\",\n    \"Output Devices\",\n    \"Embedded Networking and Communications\",\n    \"Interface and Application Programming\",\n    \"Wildcard Week\",\n    \"Applications and Implications\",\n    \"Invention, Intellectual Property and Business Models\",\n    \"Final Project\",\n    \"Other\"\n]\n\n// dictionary with keys of lab names and values of a list of the corresponding URL codes\nconst codesFromNames = {\"Talents\": [\"talents\"], \"AgriLab\": [\"agrilab\"], \"Amsterdam\": [\"fablabamsterdam\"], \"IED Madrid\": [\"ied\"], \"Bhutan\": [\"bhutan\"], \"Sorbonne University\": [\"fablabsorbonne\", \"sorbonne\"], \"ULB\": [\"fablabulb\", \"ulb\"], \"Leon\": [\"fablableon\", \"leon\"], \"Dilijan\": [\"dilijan\"], \"Universitario CIDi\": [\"cidi\"], \"Vestmannaeyjar\": [\"falabvestmannaeyjar\", \"vestmannaeyjar\"], \"Vancouver\": [\"vancouver\"], \"Waag\": [\"waag\"], \"EnergyLab-Lom\u00e9\": [\"energylab\"], \"Spinderihallerne\": [\"fablabspinderihallerne\"], \"New Cairo\": [\"newcairo\"], \"EchoFab\": [\"echofab\", \"fablabechofab\"], \"CEPT\": [\"cept\", \"fablabcept\"], \"Khairpur\": [\"fablabkhairpur\", \"khairpur\"], \"Reykjavik\": [\"fablabreykjavik\", \"reykjavik\"], \"Egypt\": [\"egypt\", \"fablabegypt\"], \"Oulu\": [\"fablaboulu\", \"oulu\"], \"Berytech\": [\"berytech\", \"fablabberytech\"], \"Bahrain\": [\"bahrain\", \"fablabbahrain\"], \"Charlotte Latin\": [\"charlotte\", \"fablabcharlottelatin\"], \"Santa Chiara\": [\"fablabsiena\", \"santachiara\"], \"Digiscope\": [\"digiscope\", \"fablabdigiscope\"], \"BoldLab\": [\"seoul\", \"fablabseoul\", \"fablabseoulinnovation\", \"boldseoul\", \"seoulinnovation\"], \"Beijing\": [\"fablabbeijing\"], \"O Shanghai\": [\"fablaboshanghai\", \"oshanghai\"], \"Aalto\": [\"aalto\", \"fablabaalto\"], \"La Machinerie\": [\"lamachinerie\"], \"Dassault Systemes\": [\"dassault\", \"fablabdassault\"], \"Kannai\": [\"kannai\"], \"ZOI\": [\"fablabzoi\", \"zoi\"], \"Irbid\": [\"fablabirbid\", \"irbid\"], \"Kamakura\": [\"fablabkamakura\", \"kamakura\"], \"Brighton\": [\"brighton\", \"fablabbrighton\"], \"AKGEC\": [\"akgec\", \"fablabakgec\"], \"Opendot\": [\"fablabopendot\", \"opendot\"], \"EcoStudio\": [\"ecostudio\", \"fablabecostudio\"], \"FCT\": [\"fct\", \"fablabfct\"], \"Bottrop\": [\"bottrop\", \"fablabbottrop\"], \"Aachen\": [\"aachen\", \"fablabaachen\"], \"Trivandrum\": [\"fablabtrivandrum\", \"trivandrum\"], \"UAE\": [\"fablabuae\", \"uae\"], \"Kochi\": [\"fablabkochi\", \"kochi\"], \"TechWorks Amman\": [\"fablabtechworks\", \"techworks\"], \"Singapore\": [\"singapore\"], \"LazLab\": [\"lakazlab\"], \"Vigyan Asharm\": [\"fablabvigyanasharm\", \"vigyanashram\"], \"Puebla\": [\"fablabpuebla\", \"puebla\"], \"Wheaton\": [\"wheaton\"], \"Ciudad Mexico\": [\"ciudadmexico\"], \"Barcelona\": [\"barcelona\"], \"Incite Focus\": [\"incitefocus\", \"fablabincitefocus\"], \"Santiago\": [\"fablabsantiago\"], \"Winam\": [\"winam\"], \"Kamp-Lintfort\": [\"fablabkamplintfort\", \"kamplintfort\"], \"TECSUP\": [\"fablabtecsup\", \"tecsup\", \"tecsupaqp\"], \"QBIC\": [\"qbic\"], \"ESAN\": [\"esan\", \"fablabesan\"], \"Rwanda\": [\"fablabrwanda\", \"rwanda\"], \"Lorain College\": [\"fablablccc\", \"lccc\"], \"Bhubaneswar\": [\"bhubaneswar\"], \"SZOIL\": [\"fablabszoil\", \"szoil\"], \"UTEC\": [\"fablabutec\", \"utec\"], \"Lima\": [\"lima\"], \"Taipei\": [\"taipei\"], \"Ucontinental\": [\"ucontinental\"], \"Akureyri\": [\"akureyri\"], \"Algarve\": [\"algarve\", \"farmlabalgarve\"], \"Bangalore\": [\"bangalore\"], \"Benfica\": [\"benfica\"], \"Chaihuo\": [\"chaihuo\"], \"Chandigarh\": [\"chandigarh\"], \"CIT\": [\"cit\"], \"CPCC\": [\"cpcc\"], \"Crunchlab\": [\"crunchlab\"], \"Deusto\": [\"deusto\", \"falabdeusto\"], \"Dhahran\": [\"dhahran\"], \"ECAE\": [\"ecae\"], \"ESNE\": [\"esne\"], \"At3flo\": [\"fablabat3flo\"], \"Erfindergarden\": [\"fablaberfindergarden\"], \"Facens\": [\"fablabfacens\"], \"Gearbox\": [\"fablabgearbox\"], \"Isafjorour\": [\"fablabisafjorour\", \"isafjorour\"], \"KromLaboro\": [\"fablabkromlaboro\"], \"Madrid CEU\": [\"fablabmadridceu\"], \"Odessa\": [\"fablabodessa\"], \"Tembisa\": [\"fablabtembisa\"], \"Wgtn\": [\"fablabwgtn\"], \"Yachay\": [\"fablabyachay\"], \"Yucat\u00e1n\": [\"fablabyucatan\", \"yucatan\"], \"Formshop Shanghai\": [\"formshop\"], \"Hong Kong iSPACE\": [\"hkispace\"], \"Ingegno\": [\"ingegno\"], \"INP-HB\": [\"inphb\"], \"Insper\": [\"insper\"], \"Ioannina\": [\"ioannina\"], \"Jubail\": [\"jubail\"], \"KAUST\": [\"kaust\"], \"KeoLAB\": [\"keolab\"], \"Kitakagaya\": [\"kitakagaya\"], \"Libya\": [\"libya\"], \"Napoli\": [\"napoli\"], \"Ningbo-NexMaker\": [\"ningbo\"], \"PlusX\": [\"plusx\"], \"Polytech\": [\"polytech\"], \"RIIDL\": [\"riidl\"], \"SEDI-Cup-ct\": [\"sedi\"], \"St. Jude\": [\"stjude\"], \"Tianhe Lab\": [\"tianhelab\"], \"Tinkerers\": [\"tinkerers\"], \"Twarda\": [\"twarda\"], \"UCAL\": [\"ucal\"], \"Universidad Europea\": [\"uemadrid\"], \"Ulima\": [\"ulima\"], \"SOCOM\": [\"fablabsocom\"], \"Isafjordur\": [\"isafjordur\"]};\n\n// dictionary with keys of URL codes and values of a list of the corresponding lab names\nconst namesFromCodes = {\"talents\": \"Talents\", \"agrilab\": \"AgriLab\", \"fablabamsterdam\": \"Amsterdam\", \"ied\": \"IED Madrid\", \"bhutan\": \"Bhutan\", \"fablabsorbonne\": \"Sorbonne University\", \"sorbonne\": \"Sorbonne University\", \"fablabulb\": \"ULB\", \"ulb\": \"ULB\", \"fablableon\": \"Leon\", \"leon\": \"Leon\", \"dilijan\": \"Dilijan\", \"cidi\": \"Universitario CIDi\", \"falabvestmannaeyjar\": \"Vestmannaeyjar\", \"vestmannaeyjar\": \"Vestmannaeyjar\", \"vancouver\": \"Vancouver\", \"waag\": \"Waag\", \"energylab\": \"EnergyLab-Lom\u00e9\", \"fablabspinderihallerne\": \"Spinderihallerne\", \"newcairo\": \"New Cairo\", \"echofab\": \"EchoFab\", \"fablabechofab\": \"EchoFab\", \"cept\": \"CEPT\", \"fablabcept\": \"CEPT\", \"fablabkhairpur\": \"Khairpur\", \"khairpur\": \"Khairpur\", \"fablabreykjavik\": \"Reykjavik\", \"reykjavik\": \"Reykjavik\", \"egypt\": \"Egypt\", \"fablabegypt\": \"Egypt\", \"fablaboulu\": \"Oulu\", \"oulu\": \"Oulu\", \"berytech\": \"Berytech\", \"fablabberytech\": \"Berytech\", \"bahrain\": \"Bahrain\", \"fablabbahrain\": \"Bahrain\", \"charlotte\": \"Charlotte Latin\", \"fablabcharlottelatin\": \"Charlotte Latin\", \"fablabsiena\": \"Santa Chiara\", \"santachiara\": \"Santa Chiara\", \"digiscope\": \"Digiscope\", \"fablabdigiscope\": \"Digiscope\", \"seoul\": \"BoldLab\", \"fablabseoul\": \"BoldLab\", \"fablabseoulinnovation\": \"BoldLab\", \"boldseoul\": \"BoldLab\", \"seoulinnovation\": \"BoldLab\", \"fablabbeijing\": \"Beijing\", \"fablaboshanghai\": \"O Shanghai\", \"oshanghai\": \"O Shanghai\", \"aalto\": \"Aalto\", \"fablabaalto\": \"Aalto\", \"lamachinerie\": \"La Machinerie\", \"dassault\": \"Dassault Systemes\", \"fablabdassault\": \"Dassault Systemes\", \"kannai\": \"Kannai\", \"fablabzoi\": \"ZOI\", \"zoi\": \"ZOI\", \"fablabirbid\": \"Irbid\", \"irbid\": \"Irbid\", \"fablabkamakura\": \"Kamakura\", \"kamakura\": \"Kamakura\", \"brighton\": \"Brighton\", \"fablabbrighton\": \"Brighton\", \"akgec\": \"AKGEC\", \"fablabakgec\": \"AKGEC\", \"fablabopendot\": \"Opendot\", \"opendot\": \"Opendot\", \"ecostudio\": \"EcoStudio\", \"fablabecostudio\": \"EcoStudio\", \"fct\": \"FCT\", \"fablabfct\": \"FCT\", \"bottrop\": \"Bottrop\", \"fablabbottrop\": \"Bottrop\", \"aachen\": \"Aachen\", \"fablabaachen\": \"Aachen\", \"fablabtrivandrum\": \"Trivandrum\", \"trivandrum\": \"Trivandrum\", \"fablabuae\": \"UAE\", \"uae\": \"UAE\", \"fablabkochi\": \"Kochi\", \"kochi\": \"Kochi\", \"fablabtechworks\": \"TechWorks Amman\", \"techworks\": \"TechWorks Amman\", \"singapore\": \"Singapore\", \"lakazlab\": \"LazLab\", \"fablabvigyanasharm\": \"Vigyan Asharm\", \"vigyanashram\": \"Vigyan Asharm\", \"fablabpuebla\": \"Puebla\", \"puebla\": \"Puebla\", \"wheaton\": \"Wheaton\", \"ciudadmexico\": \"Ciudad Mexico\", \"fablabmexico\": \"Ciudad Mexico\", \"barcelona\": \"Barcelona\", \"incitefocus\": \"Incite Focus\", \"fablabincitefocus\": \"Incite Focus\", \"winam\": \"Winam\", \"fablabkamplintfort\": \"Kamp-Lintfort\", \"kamplintfort\": \"Kamp-Lintfort\", \"fablabtecsup\": \"TECSUP\", \"tecsup\": \"TECSUP\", \"tecsupaqp\": \"TECSUP\", \"qbic\": \"QBIC\", \"esan\": \"ESAN\", \"fablabesan\": \"ESAN\", \"fablabrwanda\": \"Rwanda\", \"rwanda\": \"Rwanda\", \"fablablccc\": \"Lorain College\", \"lccc\": \"Lorain College\", \"bhubaneswar\": \"Bhubaneswar\", \"fablabszoil\": \"SZOIL\", \"szoil\": \"SZOIL\", \"fablabutec\": \"UTEC\", \"utec\": \"UTEC\", \"lima\": \"Lima\", \"taipei\": \"Taipei\", \"ucontinental\": \"Ucontinental\", \"akureyri\": \"Akureyri\", \"algarve\": \"Algarve\", \"farmlabalgarve\": \"Algarve\", \"bangalore\": \"Bangalore\", \"benfica\": \"Benfica\", \"chaihuo\": \"Chaihuo\", \"chandigarh\": \"Chandigarh\", \"cit\": \"CIT\", \"cpcc\": \"CPCC\", \"crunchlab\": \"Crunchlab\", \"deusto\": \"Deusto\", \"falabdeusto\": \"Deusto\", \"dhahran\": \"Dhahran\", \"ecae\": \"ECAE\", \"esne\": \"ESNE\", \"fablabat3flo\": \"At3flo\", \"fablaberfindergarden\": \"Erfindergarden\", \"fablabfacens\": \"Facens\", \"fablabgearbox\": \"Gearbox\", \"fablabisafjorour\": \"Isafjorour\", \"isafjorour\": \"Isafjorour\", \"fablabkromlaboro\": \"KromLaboro\", \"fablabmadridceu\": \"Madrid CEU\", \"fablabodessa\": \"Odessa\", \"fablabtembisa\": \"Tembisa\", \"fablabwgtn\": \"Wgtn\", \"fablabyachay\": \"Yachay\", \"fablabyucatan\": \"Yucat\u00e1n\", \"yucatan\": \"Yucat\u00e1n\", \"formshop\": \"Formshop Shanghai\", \"hkispace\": \"Hong Kong iSPACE\", \"ingegno\": \"Ingegno\", \"inphb\": \"INP-HB\", \"insper\": \"Insper\", \"ioannina\": \"Ioannina\", \"jubail\": \"Jubail\", \"kaust\": \"KAUST\", \"keolab\": \"KeoLAB\", \"kitakagaya\": \"Kitakagaya\", \"libya\": \"Libya\", \"napoli\": \"Napoli\", \"ningbo\": \"Ningbo-NexMaker\", \"plusx\": \"PlusX\", \"polytech\": \"Polytech\", \"riidl\": \"RIIDL\", \"sedi\": \"SEDI-Cup-ct\", \"stjude\": \"St. Jude\", \"tianhelab\": \"Tianhe Lab\", \"tinkerers\": \"Tinkerers\", \"twarda\": \"Twarda\", \"ucal\": \"UCAL\", \"uemadrid\": \"Universidad Europea\", \"ulima\": \"Ulima\", \"fablabsantiago\": \"Santiago\", \"fablabsocom\": \"SOCOM\", \"isafjordur\": \"Isafjordur\"};\n\nconst nonDiacriticLetters = \"abcdefghijklmnopqrstuvwxyz\";\n\n// simulation dimensions\nconst width = 2 * 928;\nconst height = 1.5 * 600;\n\n// function to access zipped continent color pallete list\nconst colorRegion = key =&gt; {\n    return continentColor[key];\n};\n\n// D3JS scaleOrdinal to access color and node shape pallets\nconst colorFab = d3.scaleOrdinal().range(FAB_PALETTE);\nconst shape = d3.scaleOrdinal().range(d3.symbols);\n\n// define empty object that stores radiuses of each student/node based on their ID\nconst radius_dict = {};\n\n// declare D3JS forceCollide\nconst forceCollide = d3.forceCollide();\n\n// coordinates and radius of year-select pie\nconst pieX = 210,\n    pieY = 720;\nconst pieRadius = 100;\n\n// list of subject-area carousel options\nconst topicCarouselList = [\"All\", ...TOPICS.slice(1, -1)];\n</code></pre> <p>I initialized all of the global mutable variables that needed to be accessed by multiple code in multiple files in <code>vars.js</code>.</p> <p>vars.js</p> <pre><code>let minMaxMap = {},\n    numLinksDict = {},\n    links_not_filtered,\n    nodes_not_filtered,\n    nodes,\n    node_ids,\n    links,\n    currentLabHighlightList,\n    currentYear = \"All\",\n    maxStrength,\n    labs,\n    simulation,\n    svg,\n    link,\n    node,\n    defs,\n    pieG,\n    minNumConnections = 20,\n    g, gl,\n    referenceCache,\n    currentTopic = \"All\",\n    mapMin = 1, // Start of the output range\n    mapMax = 60,\n    startDegree = -135, // Start of the dial in degrees\n    endDegree = 135, // End of the dial in degrees\n    startPos = -48,\n    currentDialDeg = startPos,\n    numText,\n    dialGroup,\n    mousePos,\n    linearGradient,\n    gl_,\n    linearGradientDict = {},\n    Tooltip,\n    transformation,\n    svgPoint,\n    boundingRect,\n    mouseIsDragging = false,\n    body,\n    tooltipFlippedX = false, // Track whether tooltip is flipped horizontally\n    tooltipFlippedY = false,\n    mouseIsOver = false,\n    objectBeingDragged; // Track whether tooltip is flipped vertically; \n</code></pre> <p>Additionally, <code>lab_region.js</code> includes the mapping of every Fab Lab globally to their continent. This was originally generating using ChatGPT 4.0 and checked manually. It was stunningly accurate outside of a typo on <code>fablabsiena</code>. I also had to go back and add a color to the color pallete for <code>Oceania</code> where <code>fablabwgtn</code> is located.</p> <p>lab_region.js</p> <pre><code>// mapping dictionary generated by ChatGPT 4.0\nLABS_CONTINENT = {\n    \"vigyanashram\":\"Asia\", // India\n    \"oulu\":\"Europe\", // Finland\n    \"kamplintfort\":\"Europe\", // Germany\n    \"charlotte\":\"North America\", // USA (Assumed)\n    \"lccc\":\"North America\", // USA (Assumed)\n    \"bahrain\":\"Asia\", // Bahrain\n    \"uae\":\"Asia\", // United Arab Emirates\n    \"libya\":\"Africa\", // Libya\n    \"techworks\":\"North America\", // USA (Assumed)\n    \"newcairo\":\"Africa\", // Egypt\n    \"egypt\":\"Africa\", // Egypt\n    \"lakazlab\":\"Africa\", // Mauritius (Assumed)\n    \"tecsup\":\"South America\", // Peru\n    \"wheaton\":\"North America\", // USA (Assumed)\n    \"fablabuae\":\"Asia\", // United Arab Emirates\n    \"qbic\":\"Asia\", // Qatar (Assumed)\n    \"kochi\":\"Asia\", // India\n    \"ied\":\"Europe\", // Italy (Assumed)\n    \"fablabtrivandrum\":\"Asia\", // India\n    \"fablabakgec\":\"Asia\", // India\n    \"barcelona\":\"Europe\", // Spain\n    \"fablabsorbonne\":\"Europe\", // France\n    \"fablabcept\":\"Asia\", // India\n    \"rwanda\":\"Africa\", // Rwanda\n    \"leon\":\"Europe\", // Spain (Assumed)\n    \"lamachinerie\":\"Europe\", // France (Assumed)\n    \"fablabdigiscope\":\"Europe\", // France (Assumed)\n    \"energylab\":\"Europe\", // Denmark (Assumed)\n    \"akgec\":\"Asia\", // India\n    \"irbid\":\"Asia\", // Jordan\n    \"reykjavik\":\"Europe\", // Iceland\n    \"sorbonne\":\"Europe\", // France\n    \"incitefocus\":\"North America\", // USA (Assumed)\n    \"puebla\":\"North America\", // Mexico\n    \"tecsupaqp\":\"South America\", // Peru\n    \"ucontinental\":\"South America\", // Peru\n    \"fablabopendot\":\"Europe\", // Italy\n    \"santachiara\":\"Europe\", // Italy\n    \"fablabechofab\":\"North America\", // Canada\n    \"zoi\":\"Asia\", // China (Assumed)\n    \"cidi\":\"North America\", // USA (Assumed)\n    \"dassault\":\"Europe\", // France (Assumed)\n    \"stjude\":\"North America\", // USA (Assumed)\n    \"aalto\":\"Europe\", // Finland\n    \"fablabzoi\":\"Asia\", // China (Assumed)\n    \"ecae\":\"Asia\", // United Arab Emirates\n    \"fablabbahrain\":\"Asia\", // Bahrain\n    \"khairpur\":\"Asia\", // Pakistan\n    \"insper\":\"South America\", // Brazil\n    \"trivandrum\":\"Asia\", // India\n    \"inphb\":\"Africa\", // Ivory Coast\n    \"digiscope\":\"Europe\", // France (Assumed)\n    \"ulb\":\"Europe\", // Belgium (Assumed)\n    \"lima\":\"South America\", // Peru\n    \"fablabspinderihallerne\":\"Europe\", // Denmark\n    \"fablabfct\":\"Europe\", // Portugal (Assumed)\n    \"fct\":\"Africa\", // Nigeria (Assumed)\n    \"opendot\":\"Europe\", // Italy\n    \"fablabtecsup\":\"South America\", // Peru\n    \"vancouver\":\"North America\", // Canada\n    \"fablabbrighton\":\"Europe\", // UK\n    \"akureyri\":\"Europe\", // Iceland\n    \"yucatan\":\"North America\", // Mexico\n    \"bhutan\":\"Asia\", // Bhutan\n    \"fablabaachen\":\"Europe\", // Germany\n    \"waag\":\"Europe\", // Netherlands\n    \"echofab\":\"North America\", // Canada\n    \"dilijan\":\"Asia\", // Armenia\n    \"polytech\":\"Europe\", // France (Assumed)\n    \"agrilab\":\"Asia\", // Armenia\n    \"fablabsiena\":\"Europe\", // Italy -- ChatGPT changed \"fablabsiena\" to \"siena\" -- corrected by hand\n    \"winam\":\"Africa\", // Kenya (Assumed)\n    \"fablaboulu\":\"Europe\", // Finland\n    \"fablabreykjavik\":\"Europe\", // Iceland\n    \"kamakura\":\"Asia\", // Japan\n    \"falabvestmannaeyjar\":\"Europe\", // Iceland\n    \"singapore\":\"Asia\", // Singapore\n    \"oshanghai\":\"Asia\", // China\n    \"fablaboshanghai\":\"Asia\", // China\n    \"fablabutec\":\"South America\", // Peru\n    \"fablabodessa\":\"Europe\", // Ukraine\n    \"esan\":\"South America\", // Peru\n    \"fablabvigyanasharm\":\"Asia\", // India\n    \"hkispace\":\"Asia\", // Hong Kong\n    \"taipei\":\"Asia\", // Taiwan\n    \"fablabmexico\":\"North America\", // Mexico\n    \"ciudadmexico\":\"North America\", // Mexico\n    \"aachen\":\"Europe\", // Germany\n    \"fablabbottrop\":\"Europe\", // Germany\n    \"fablabaalto\":\"Europe\", // Finland\n    \"keolab\":\"Asia\", // Japan (Assumed)\n    \"cpcc\":\"North America\", // USA (Assumed)\n    \"fablabkamplintfort\":\"Europe\", // Germany\n    \"ingegno\":\"Europe\", // Italy (Assumed)\n    \"fablabkamakura\":\"Asia\", // Japan\n    \"tinkerers\":\"Asia\", // United Arab Emirates (Assumed)\n    \"cit\":\"Europe\", // Ireland (Assumed)\n    \"utec\":\"South America\", // Peru\n    \"fablabamsterdam\":\"Europe\", // Netherlands\n    \"tianhelab\":\"Asia\", // China (Assumed)\n    \"bhubaneswar\":\"Asia\", // India\n    \"cept\":\"Asia\", // India\n    \"fablabbeijing\":\"Asia\", // China\n    \"talents\":\"Europe\", // Germany (Assumed)\n    \"fablabyachay\":\"South America\", // Ecuador\n    \"fablabdassault\":\"Europe\", // France (Assumed)\n    \"ecostudio\":\"North America\", // USA (Assumed)\n    \"fablabseoul\":\"Asia\", // South Korea\n    \"kaust\":\"Asia\", // Saudi Arabia\n    \"berytech\":\"Asia\", // Lebanon\n    \"fablabpuebla\":\"North America\", // Mexico\n    \"fablabrwanda\":\"Africa\", // Rwanda\n    \"fablabesan\":\"South America\", // Peru\n    \"fablabberytech\":\"Asia\", // Lebanon\n    \"crunchlab\":\"Europe\", // Portugal (Assumed)\n    \"ucal\":\"North America\", // USA (Assumed)\n    \"vestmannaeyjar\":\"Europe\", // Iceland\n    \"sedi\":\"Europe\", // Italy (Assumed)\n    \"isafjordur\":\"Europe\", // Iceland\n    \"fablabegypt\":\"Africa\", // Egypt\n    \"szoil\":\"Asia\", // China\n    \"formshop\":\"Asia\", // China (Assumed)\n    \"fablabkochi\":\"Asia\", // India\n    \"fablabincitefocus\":\"North America\", // USA (Assumed)\n    \"kitakagaya\":\"Asia\", // Japan\n    \"kannai\":\"Asia\", // Japan\n    \"dhahran\":\"Asia\", // Saudi Arabia\n    \"seoulinnovation\":\"Asia\", // South Korea\n    \"ioannina\":\"Europe\", // Greece\n    \"fablabyucatan\":\"North America\", // Mexico\n    \"fablabirbid\":\"Asia\", // Jordan\n    \"deusto\":\"Europe\", // Spain\n    \"falabdeusto\":\"Europe\", // Spain\n    \"riidl\":\"Asia\", // India\n    \"bottrop\":\"Europe\", // Germany\n    \"fablabisafjorour\":\"Europe\", // Iceland\n    \"plusx\":\"Asia\", // South Korea (Assumed)\n    \"fablaberfindergarden\":\"Europe\", // Germany (Assumed)\n    \"uemadrid\":\"Europe\", // Spain\n    \"fablabtembisa\":\"Africa\", // South Africa\n    \"brighton\":\"Europe\", // UK\n    \"fablabfacens\":\"South America\", // Brazil\n    \"fablableon\":\"Europe\", // Spain (Assumed)\n    \"fablabszoil\":\"Asia\", // China\n    \"fablabgearbox\":\"Africa\", // Kenya (Assumed)\n    \"farmlabalgarve\":\"Europe\", // Portugal\n    \"algarve\":\"Europe\", // Portugal\n    \"twarda\":\"Europe\", // Poland (Assumed)\n    \"bangalore\":\"Asia\", // India\n    \"fablabsantiago\":\"South America\", // Chile\n    \"fablablccc\":\"North America\", // USA (Assumed)\n    \"fablabcharlottelatin\":\"North America\", // USA\n    \"fablabat3flo\":\"Europe\", // Hungary (Assumed)\n    \"fablabecostudio\":\"North America\", // USA (Assumed)\n    \"fablabsocom\":\"Asia\", // China (Assumed)\n    \"boldseoul\":\"Asia\", // South Korea\n    \"napoli\":\"Europe\", // Italy\n    \"fablabkromlaboro\":\"Europe\", // Slovenia (Assumed)\n    \"seoul\":\"Asia\", // South Korea\n    \"fablabtechworks\":\"North America\", // USA (Assumed)\n    \"fablabkhairpur\":\"Asia\", // Pakistan\n    \"chaihuo\":\"Asia\", // China (Assumed)\n    \"fablabulb\":\"Europe\", // Belgium (Assumed)\n    \"esne\":\"Europe\", // Spain (Assumed)\n    \"ulima\":\"South America\", // Peru\n    \"fablabseoulinnovation\":\"Asia\", // South Korea\n    \"benfica\":\"Europe\", // Portugal (Assumed)\n    \"fablabmadridceu\":\"Europe\", // Spain\n    \"chandigarh\":\"Asia\", // India\n    \"jubail\":\"Asia\", // Saudi Arabia\n    \"ningbo\":\"Asia\", // China\n    \"fablabwgtn\":\"Oceania\", // New Zealand\n};\n</code></pre>"},{"location":"stem/expert-network-map/#app-js","title":"App JS","text":"<p><code>app.js</code> has three purposes: </p> <ul> <li>initialize hover tooltip</li> <li>load JSON network data</li> <li>initialize simulation and filters</li> </ul> <p>The code is broken up into blocks with explanations:</p> <p>app.js - tooltip</p> <p>A tooltip appears when a node is hovered over by the mouse to display information about a student.</p> <p></p> <p>When the window loads, select the <code>div</code> with an id of <code>tooltip</code>. Whenever the mouse moves, store the new position in the <code>mousePos</code> object. It then calculates the dimensions and coordinates of a tooltip.</p> <pre><code>// run when page loads\nwindow.onload = () =&gt; {\n    Tooltip = d3.select(\"#tooltip\");\n    body = document.getElementsByTagName('body')[0];\n\n    window.addEventListener('pointermove', (event) =&gt; {\n        mousePos = {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        let tooltipWidth = Tooltip.node().offsetWidth; // Width of the tooltip\n        let tooltipHeight = Tooltip.node().offsetHeight; // Height of the tooltip\n        let windowWidth = document.documentElement.clientWidth; // Width of the window\n        let windowHeight = document.documentElement.clientHeight; // Height of the window\n\n        let x = event.clientX + body.scrollLeft + 50;\n        let y = event.clientY + body.scrollTop - 10;\n\n        // Consider a buffer to ensure that \n        // the tooltip doesn't touch the edge of the viewport.\n        let buffer = {\n            \"x\": 50,\n            \"y\": 10\n        };\n\n        // If the tooltip would go off the right side of the screen\n        if (x + tooltipWidth + buffer.x - body.scrollLeft &gt; windowWidth) {\n            x = x - tooltipWidth - (50 * 2);\n        }\n\n        // If the tooltip would go off the bottom of the screen\n        if (y + tooltipHeight + buffer.y - body.scrollTop &gt; windowHeight) {\n            y = y - tooltipHeight + (10 * 2);\n        }\n\n        Tooltip.style(\"left\", x + \"px\");\n        Tooltip.style(\"top\", y + \"px\");\n    });\n</code></pre> <p>app.js - load data</p> <p>This section of the code loads data from <code>final_data.json</code>, precalculates data-intensive metrics that are used later in the visualization (largest and fewest number of times referenced for each subject area, dictionaries of edges with keys of students, all lab names, and strongest edge), and initializes the data arrays for the default settings (all labs, all subject areas, minimum of 20 times referenced).</p> <p>See all of the function definitions in <code>helper_functions.js</code> below, except for <code>updateData</code> which is defined in <code>update_data.js</code>, <code>initializeLabMultiselect</code> which is defined in <code>multiselect_dropdown.js</code>, <code>initializeDial</code> which is defined in <code>dial.js</code>, and <code>initializeCarousel</code> which is defined in <code>carousel.js</code>.</p> <pre><code>    // load the json data and filter out all references by students to themselves\n    create_not_filteredFromJSON().then(() =&gt; {\n\n        // store the most and least amount of references for a student in each subject area\n        calculateMinMaxMapFromFiltered(); \n\n        // go through all of the data and create an dictionary where you can look up a student and their subject area and recieve the number of times they were referenced in that subject area\n        createReferenceCache();\n\n        // create a dictionary of each time a student referenced another student for a certain topic\n        createNumLinksDictFrom_not_filtered(nodes_not_filtered, links_not_filtered);\n\n        // stores each student's lab (using their website URL) and removes all repeats\n        setLabs(nodes_not_filtered.map(n =&gt; n.id));\n\n        // stores all of the nodes and edges who meet the default filter criteria into the main `nodes`, `node_ids`, and `links` arrays\n        transferNot_filteredToArrays();\n\n        // stores the strongest edge between nodes\n        calculateMaxStrength();\n</code></pre> <p>app.js - initialize simulation and filters</p> <p>This section initializes the filters (subject area, labs, years, and minimum number of times referenced) and the visualization (SVG elements and linear gradients for edges when only one node is highlighted).</p> <pre><code>        // make the lab filter display the default option\n        setCurrentLabHighlightList();\n\n        // initialize the force graph simulation\n        createSimulation();\n\n        // initialize the HTML elements that the SVGs of the visualization\n        createAndFormatSVG();\n\n        // initialize linear gradients\n        initializeDefs();\n\n        // create the container SVG element for the graph\n        gl_ = svg.append(\"g\").attr(\"transform\", \"translate(150, -10)\");\n\n        // pair the linear gradient SVGs to all of the references, not only the selected ones, so that elements aren't created in real-time as filters are changed. (Doesn't take into account that some edges will never have a linear gradient)\n        registerLinearGradients(links_not_filtered);\n\n        // create SVG container for all of the nodes\n        nodesToNodeAndFormat();\n\n        // initialize year-select pie\n        createPie();\n\n        // create overlay text and links, such as link to documentation, mattermost channel, etc\n        createOverlayText();\n\n        // update the graph to display network on the SVG\n        updateData({\n            minNumConnections: 20,\n            simulation,\n            svg,\n            g,\n            \"gl\": gl_\n        })\n\n        // initialize subject-area-selection carousel\n        initializeCarousel(d =&gt; { // anonymous function defines behavior on carousel update\n            currentTopic = d;\n            if (currentTopic != \"All\") {\n                mapMin = minMaxMap[currentTopic].min;\n                mapMax = minMaxMap[currentTopic].max;\n            } else {\n                [mapMin, mapMax] = [1, 60];\n            }\n            updateDialText(currentDialDeg, dialCallback); \n        }, topicCarouselList, 350, 600, 30, 10, svg, FAB_PALETTE);\n\n        // defines callback function for lab filter being altered \n        const labCallback = lab_list =&gt; {\n            currentLabHighlightList = lab_list;\n            updateData({ // updates visualization with new filters\n                minNumConnections,\n                simulation,\n                svg,\n                g,\n                \"gl\": gl_\n            });\n        };\n\n        // defines callback function for minimum number of times referenced filter being altered\n        const dialCallback = (roundedVal, first = false) =&gt; {\n            minNumConnections = roundedVal;\n            updateData({ // updates visualization wth new filters\n                \"minNumConnections\": roundedVal,\n                simulation,\n                svg,\n                g,\n                \"gl\": gl_,\n                \"isFirst\": first\n            });\n        };\n\n        // initializes minimum number of times referenced dial\n        initializeDial(svg, dialCallback);\n\n        // initialize lab multiselect dropdown functionalityW\n        initializeLabMultiselect(labs, labCallback);\n\n    });\n};\n</code></pre>"},{"location":"stem/expert-network-map/#helper-functions","title":"Helper Functions","text":"<p><code>helper_functions.js</code> defines many functions used in other JavaScript files, including simulation initialization and data loading and processing. All of the functions are explained in the documentation or comments where they are called.</p> <pre><code>const clamp = (num, min, max) =&gt; Math.min(Math.max(num, min), max);\n\nconst toTitleCase = str =&gt; {\n    return str.replace(\n        /\\w\\S*/g,\n        function(txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        }\n    );\n};\n\nfunction normalize(value, min, max) {\n    return (value - min) / (max - min);\n}\n\nconst calculateMinMax = (ns, ls, topic) =&gt; {\n    let minV = Infinity;\n    let maxV = -Infinity;\n    ns.forEach(n =&gt; {\n        let v = 0;\n        ls.forEach(l =&gt; {\n            if (l.target == n.id &amp;&amp; (topic == l.topic || topic == \"All\")) {\n                v += l.value;\n            }\n        });\n        if (v &lt; minV) minV = v;\n        if (v &gt; maxV) maxV = v;\n    });\n    return {\n        min: minV,\n        max: maxV\n    };\n};\n\nconst sumObj = obj =&gt; Object.values(obj).reduce((a, b) =&gt; a + b, 0);\n\nconst getAllLabs = node_ids =&gt; {\n    let labs = [];\n    for (let i = 0; i &lt; node_ids.length; i++) {\n        const node_id = node_ids[i];\n        const lab = node_id.split(\";\")[1].split(\"/\")[5];\n        if (!labs.includes(lab)) labs.push(lab);\n    }\n\n    return labs;\n};\n\nconst filterStudents = (nodes_not_filtered, links_not_filtered, filterFunc) =&gt; {\n    let nodes = nodes_not_filtered.filter(n =&gt; filterFunc(n));\n\n    let node_ids = nodes.map(n =&gt; n.id);\n\n    let links = JSON.parse(JSON.stringify(links_not_filtered)).filter(l =&gt; { // deepcopy solves heisenbug\n        return ((node_ids.includes(l.target.id) || node_ids.includes(l.target)) &amp;&amp; (node_ids.includes(l.source.id) | node_ids.includes(l.source)));\n    });\n    return [nodes, node_ids, links];\n};\n\nconst uniqueId = l =&gt; {\n    let sT;\n    let tT;\n    if (typeof l.source == 'string') {\n        sT = l.source;\n        tT = l.target;\n    } else {\n        sT = l.source.id;\n        tT = l.target.id;\n    }\n\n    return `${sT}${tT}${l.topic}${l.value}`;\n};\n\nconst createNumLinksDictFrom_not_filtered = () =&gt; {\n    for (let i = 0; i &lt; nodes_not_filtered.length; i++) {\n        let toAdd = {\n            \"source\": {},\n            \"target\": {}\n        };\n        for (let j = 0; j &lt; TOPICS.length; j++) {\n            toAdd.source[TOPICS[j]] = 0;\n            toAdd.target[TOPICS[j]] = 0;\n        }\n        numLinksDict[nodes_not_filtered[i].id] = toAdd;\n    }\n    for (let i = 0; i &lt; links_not_filtered.length; i++) {\n        const l = links_not_filtered[i];\n        numLinksDict[l.target].target[l.topic] += l.value;\n        numLinksDict[l.source].source[l.topic] += l.value;\n    }\n};\n\n\nconst create_not_filteredFromJSON = async () =&gt; {\n    return d3.json('final_data.json').then(data =&gt; {\n        links_not_filtered = data.links.map(d =&gt; Object.assign({}, d)).filter(l =&gt; l.target != l.source);\n        nodes_not_filtered = data.nodes.map(d =&gt; Object.assign({}, d));\n    });\n};\n\nconst assignFilter = filterResult =&gt; [nodes, node_ids, links] = filterResult;\n\nconst transferNot_filteredToArrays = () =&gt; {\n    assignFilter(filterStudents(nodes_not_filtered, links_not_filtered, n =&gt; {\n        if (currentTopic == \"All\") {\n            return sumObj(numLinksDict[n.id].target) &gt;= minNumConnections;\n        } else {\n            return numLinksDict[n.id].target[currentTopic] &gt;= minNumConnections;\n        }\n    }));\n};\n\nconst initializeDefs = () =&gt; {\n    linearGradient = d3.select(\"defs\").selectAll(\"linearGradient\");\n};\n\nconst getGradientID = l =&gt; {\n    let sForm, tForm;\n    try {\n        sForm = l.source.id.replace(/\\W/g, '_');\n    } catch {\n        sForm = l.source.replace(/\\W/g, '_');\n    }\n\n    try {\n        tForm = l.target.id.replace(/\\W/g, '_');\n    } catch {\n        tForm = l.target.replace(/\\W/g, '_');\n    }\n\n    return `gradient_${sForm}|${tForm}`\n};\n\nconst registerLinearGradients = links =&gt; {\n    const elem = linearGradient.data(links, l =&gt; getGradientID(l));\n    elem.exit()\n        .each(function(e, i) {\n            const d = d3.select(this);\n            document.remove(linearGradient[getGradientID(d)]);\n            delete linearGradient[getGradientID(d)];\n        })\n        .remove();\n\n    const enter = elem.enter().append(\"linearGradient\")\n        .attr(\"gradientUnits\", \"userSpaceOnUse\")\n        .attr(\"id\", d =&gt; getGradientID(d))\n        .attr(\"x1\", 0)\n        .attr(\"x2\", 1)\n        .attr(\"y1\", 0)\n        .attr(\"y2\", 0);\n\n    enter.append(\"stop\").attr(\"offset\", \"0%\").attr(\"stop-color\", \"rgba(\" + RGB_LINE_COLOR + \",1)\");\n    enter.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"rgba(\" + RGB_LINE_COLOR + \",0)\");\n\n    d3.select(\"defs\").selectAll(\"linearGradient\").each(function(e, i) {\n        const d = d3.select(this)\n        linearGradientDict[getGradientID(e)] = d;\n    });\n};\n\nconst condenseLinksforSimulation = ls =&gt; {\n    let toReturn = [];\n    for (let l of ls) {\n        condensed = false;\n        for (let i = 0; i &lt; toReturn.length; i++) {\n            r = toReturn[i];\n            let lTargStr;\n            let rTargStr;\n            let lSourStr;\n            let rSourStr;\n            if (typeof l.target == 'string') lTargStr = l.target;\n            else lTargStr = l.target.id;\n            if (typeof r.target == 'string') rTargStr = r.target;\n            else rTargStr = r.target.id;\n            if (typeof l.source == 'string') lSourStr = l.source;\n            else lSourStr = l.source.id;\n            if (typeof r.source == 'string') rSourStr = r.source;\n            else rSourStr = r.source.id;\n            if ((lTargStr == rTargStr &amp;&amp; lSourStr == rSourStr) || (lTargStr == rSourStr &amp;&amp; lSourStr == rTargStr)) {\n                toReturn[i].value += l.value;\n                condensed = true;\n                break;\n            }\n        }\n        if (!condensed) {\n            delete l.topic;\n            toReturn.push(l);\n        }\n    }\n\n    return toReturn;\n};\n\nconst calculateMaxStrength = () =&gt; {\n    maxStrength = 0;\n    links.forEach(l =&gt; {\n        if (l.value &gt; maxStrength) {\n            maxStrength = l.value;\n        }\n    });\n}\n\nconst setLabs = node_ids =&gt; labs = getAllLabs(node_ids).sort();\n\nconst setCurrentLabHighlightList = () =&gt; currentLabHighlightList = labs;\n\nconst calculateSimulationStrength = (d, maxstrength) =&gt; (d =&gt; MINIMUM_STRENGTH_CONSTANT + Math.sqrt((normalize(d.value, 0, maxStrength) * 10 + 1) / SCALE_FACTOR)); // so that it returns the callback function\n\nconst createSimulation = () =&gt; {\n    simulation = d3.forceSimulation(nodes)\n        .force(\"boundary\", forceBoundary(forceBoundaryMargin, forceBoundaryMargin, width - forceBoundaryMargin, height - forceBoundaryMargin))\n        .force(\"link\", d3.forceLink(links).id(d =&gt; d.id).strength(d =&gt; calculateSimulationStrength(d, maxStrength)))\n        .force(\"charge\", d3.forceManyBody().strength(-60) /*(d3.forceManyBody().strength(-50 / SCALE_FACTOR)*/ )\n        .force(\"center\", d3.forceCenter(width / 2, height / 2));\n};\n\nconst createAndFormatSVG = () =&gt; {\n    svg = d3.select(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .attr(\"viewBox\", [0, 0, width, height])\n        .style(\"max-width\", \"100%\")\n        .style(\"height\", \"auto\")\n        .style(\"background-color\", \"white\");\n\n    transformation = svg.node().getCTM();\n    svgPoint = svg.node().createSVGPoint();\n    boundingRect = svg.node().getBoundingClientRect();\n};\n\nconst linksToLink = isFirst =&gt; {\n    if (isFirst) gl = svg.append(\"g\").attr(\"transform\", \"translate(150, -10)\");\n\n    const sel = gl.selectAll(\"path\").data(condenseLinksforSimulation(links), l =&gt; uniqueId(l));\n\n    sel.exit()\n        .remove();\n\n    sel.enter().append(\"path\").merge(sel)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke-width\", LINE_WIDTH)\n        .style(\"stroke-linecap\", \"round\");\n    return sel;\n};\n\nconst calculateMinMaxMapFromFiltered = () =&gt; {\n    [...TOPICS, \"All\"].forEach(topic =&gt; {\n        minMaxMap[topic] = calculateMinMax(nodes_not_filtered, links_not_filtered, topic);\n    });\n};\n\nconst nodesToNodeAndFormat = () =&gt; {\n    node = svg.append(\"g\").attr(\"transform\", \"translate(150, -10)\");\n    g = node;\n};\n\nconst configureNode = (node, nodes) =&gt; {\n    const sel = g.selectAll(\"circle\").data(nodes, n =&gt; n.id);\n\n    sel.exit()\n        .remove();\n\n    const ent = sel.enter().append(\"circle\").merge(sel);\n\n    ent.attr(\"r\", data =&gt; referenceCache[data.id][\"All\"]);\n\n    ent.attr(\"fill\", d =&gt; {\n            const lab = d.id.split(\";\")[1].split(\"/\")[5];\n            return colorRegion(LABS_CONTINENT[lab]);\n        })\n        .attr(\"opacity\", NODE_HIGHLIGHTED_OPACITY)\n        .call(d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended));\n\n    return g.selectAll(\"circle\");\n};\n\nfunction dragstarted(event, d) {\n    objectBeingDragged = d3.select(this);\n    if (!event.active) simulation.alphaTarget(0.3).restart();\n    d.fx = d.x;\n    d.fy = d.y;\n    mouseIsDragging = true;\n}\n\nfunction dragged(event, d) {\n    d.fx = event.x;\n    d.fy = event.y;\n}\n\nfunction dragended(event, d) {\n    if (!event.active) simulation.alphaTarget(0);\n    d.fx = null;\n    d.fy = null;\n    mouseIsDragging = false;\n    const pointerOut = pointerOutOfSVG();\n    if (pointerOut) {\n        tooltipMouseleave(null, null, objectBeingDragged);\n    }\n    objectBeingDragged = null;\n}\n\nconst getSimulationForceLinkDistance = d =&gt; referenceCache[d.target.id][currentTopic] + referenceCache[d.source.id][currentTopic]; // this is good but it doesn't completely fix the circle overlapping problem because of circles that are touching but aren't linked  //Math.max(referenceCache[d.target.id][currentTopic], referenceCache[d.source.id][currentTopic]);\n\nconst calibrateSimulation = () =&gt; {\n    simulation.force(\"collision\", forceCollide.radius(d =&gt; d.r / 1.2));\n\n    simulation.force(\"link\", d3.forceLink(links).id(d =&gt; d.id).distance(d =&gt; {\n        return getSimulationForceLinkDistance(d);\n    }));\n};\n\nconst activationCheck = (currentYear, currentLabHighlightList, year, lab) =&gt; (year == currentYear || currentYear == \"All\") &amp;&amp; (currentLabHighlightList.includes(lab));\n\nconst linkTick = () =&gt; {\n    link.attr(\"d\", d =&gt; {\n        const gradientID = getGradientID(d);\n        const lg = document.getElementById(gradientID);\n        const {\n            source,\n            sourceYear,\n            sourceLab,\n            target,\n            targetYear,\n            targetLab\n        } = getLinkSummary(d);\n        const sourceIsActivated = activationCheck(sourceYear, sourceLab);\n        const targetIsActivated = activationCheck(targetYear, targetLab);\n        if (!((sourceIsActivated &amp;&amp; targetIsActivated) || (!(sourceIsActivated || targetIsActivated)))) { // if only one is activated\n            if (sourceIsActivated) {\n                lg.setAttribute(\"x1\", d.source.x);\n                lg.setAttribute(\"y1\", d.source.y);\n                lg.setAttribute(\"x2\", d.target.x);\n                lg.setAttribute(\"y2\", d.target.y);\n            } else {\n                lg.setAttribute(\"x2\", d.source.x);\n                lg.setAttribute(\"y2\", d.source.y);\n                lg.setAttribute(\"x1\", d.target.x);\n                lg.setAttribute(\"y1\", d.target.y);\n            }\n        }\n\n        const path = d3.path();\n        path.moveTo(d.source.x, d.source.y);\n        path.lineTo(d.target.x, d.target.y);\n        return path.toString();\n    });\n};\n\nconst setSimulationTick = (node, link) =&gt; {\n\n    linkTick(); // so that the directions and everything are correct before the user first drags on the simulation\n    simulation.on(\"tick\", () =&gt; {\n        linkTick();\n        node\n            .attr(\"cx\", d =&gt; d.x)\n            .attr(\"cy\", d =&gt; d.y)\n    });\n};\n\nconst selectByTopic = topic =&gt; {\n    currentTopic = topic;\n    let maxStrength = 0;\n    links.forEach(l =&gt; {\n        if (l.value &gt; maxStrength &amp;&amp; (l.topic == topic || topic == \"All\")) {\n            maxStrength = l.value;\n        }\n    });\n\n    link\n        .attr('opacity', data =&gt; {\n            if (data.topic == topic || topic == \"All\") {\n                return (normalize(data.value, 0, maxStrength) / 2 + 0.5) / SCALE_FACTOR;\n            } else {\n                return 0;\n            }\n        });\n\n    simulation\n        .force(\"link\", d3.forceLink(links).id(d =&gt; d.id)\n            .strength(d =&gt; calculateSimulationStrength(d, maxStrength))\n            .distance(d =&gt; getSimulationForceLinkDistance(d)));\n\n    let topicLinks = [];\n    links.forEach(l =&gt; {\n        if (l.topic == topic || topic == \"All\") {\n            topicLinks.push(l);\n        }\n    });\n\n    node.attr(\"r\", data =&gt; referenceCache[data.id][topic]);\n    simulation.force(\"link\", d3.forceLink(topicLinks).id(d =&gt; d.id).distance(d =&gt; getSimulationForceLinkDistance(d)));\n    forceCollide.initialize(nodes);\n    simulation.alpha(1).restart();\n};\n\nconst configureGlowDefinitions = () =&gt; {\n    defs = svg.append(\"defs\");\n\n    defs.append(\"filter\")\n        .attr(\"id\", \"sofGlow\")\n        .attr(\"width\", \"300%\")\n        .attr(\"height\", \"300%\")\n        .attr(\"x\", \"-100%\")\n        .attr(\"y\", \"-100%\")\n        .attr(\"stdDeviation\", \"1\")\n        .attr(\"result\", \"coloredBlur\")\n        .append(\"feGaussianBlur\")\n        .attr(\"in\", \"thicken\")\n        .attr(\"stdDeviation\", \"1\")\n        .attr(\"result\", \"blurred\");\n};\n\nconst getLinkSummary = data =&gt; {\n    const source = data.source.id;\n    const sourceYear = source.split(\";\")[1].split(\"/\")[3];\n    const sourceLab = source.split(\";\")[1].split(\"/\")[5];\n    const target = data.target.id;\n    const targetYear = target.split(\";\")[1].split(\"/\")[3];\n    const targetLab = target.split(\";\")[1].split(\"/\")[5];\n    return {\n        source,\n        sourceYear,\n        sourceLab,\n        target,\n        targetYear,\n        targetLab\n    };\n};\n\nconst setLinkOpacity = () =&gt; {\n    link.attr(\"opacity\", data =&gt; {\n        const {\n            source,\n            sourceYear,\n            sourceLab,\n            target,\n            targetYear,\n            targetLab\n        } = getLinkSummary(data);\n        let sourceIsOn = false;\n        let targetIsOn = false;\n\n        if (activationCheck(sourceYear, sourceLab)) {\n            sourceIsOn = true;\n        }\n        if (activationCheck(targetYear, targetLab)) {\n            targetIsOn = true;\n        }\n\n        if ((sourceIsOn || targetIsOn) &amp;&amp; !(sourceIsOn &amp;&amp; targetIsOn)) {\n            return null;\n        }\n        return 1;\n    });\n    link.attr(\"stroke\", data =&gt; {\n        const source = data.source.id;\n        const sourceYear = source.split(\";\")[1].split(\"/\")[3];\n        const sourceLab = source.split(\";\")[1].split(\"/\")[5];\n        const target = data.target.id;\n        const targetYear = target.split(\";\")[1].split(\"/\")[3];\n        const targetLab = target.split(\";\")[1].split(\"/\")[5];\n        let sourceIsOn = false;\n        let targetIsOn = false;\n\n        if ((sourceYear == currentYear || currentYear == \"All\") &amp;&amp; (currentLabHighlightList.includes(sourceLab))) {\n            sourceIsOn = true;\n        }\n        if ((targetYear == currentYear || currentYear == \"All\") &amp;&amp; (currentLabHighlightList.includes(targetLab))) {\n            targetIsOn = true;\n        }\n\n        if (sourceIsOn &amp;&amp; targetIsOn) {\n            return \"rgba(255,255,255\" + ((normalize(data.value, 0, maxStrength) / 2 + 0.5) / SCALE_FACTOR).toString() + \")\";\n        } else if (sourceIsOn || targetIsOn) {\n            return `url(#${getGradientID(data)})`;\n        } else {\n            return \"rgba(255,255,255,0.05)\";\n        }\n    });\n};\n\nconst setYear = year =&gt; {\n    currentYear = year;\n    updateData({\n        minNumConnections,\n        simulation,\n        svg,\n        g,\n        \"gl\": gl_\n    })\n};\n\nconst createPie = () =&gt; {\n    const pieG = svg.append(\"g\")\n        .attr(\"transform\", \"translate(\" + pieX + \",\" + pieY + \") rotate(\" + 360 / 14 + \")\");\n\n    var pieData = {\n        \"All\": 1\n    };\n\n    for (let i = 2018; i &lt;= 2023; i++) {\n        pieData[i] = 1;\n    }\n\n    var pie = d3.pie()\n        .value(function(d) {\n            return d.value;\n        })\n    var data_ready = pie(Object.entries(pieData).map(([key, value]) =&gt; ({\n        key,\n        value\n    })));\n\n    var arcGenerator = d3.arc()\n        .innerRadius(50)\n        .outerRadius(pieRadius)\n\n    const rotatePie = d =&gt; {\n        var rotate = -((d.startAngle + d.endAngle) / 2);\n        pieG.transition()\n            .duration(1000)\n            .attr(\"transform\", \"translate(\" + pieX + \",\" + pieY + \") rotate(\" + (rotate / Math.PI * 180) + \")\");\n    };\n\n    pieG\n        .selectAll('mySlices')\n        .data(data_ready)\n        .enter()\n        .append('path')\n        .attr('d', arcGenerator)\n        .attr('fill', PIE_SLICE_COLOR)\n        .attr(\"stroke\", \"white\")\n        .style(\"stroke-width\", \"2px\")\n        .style(\"opacity\", 1)\n        .on('click', function(event, d) {\n            setYear(d.data.key);\n            rotatePie(d);\n        });\n\n    pieG\n        .selectAll('mySlices')\n        .data(data_ready)\n        .enter()\n        .append('text')\n        .text(function(d) {\n            return d.data.key\n        })\n        .attr(\"dy\", \"0.3em\")\n        .attr(\"transform\", function(d) {\n            return \"translate(\" + arcGenerator.centroid(d) + \") rotate(\" + (d.startAngle + d.endAngle) / 2 * (180 / Math.PI) + \")\";\n        })\n        .style('text-anchor', 'middle')\n        .style('fill', PIE_TEXT_COLOR)\n        .attr(\"font-weight\", 700)\n        .attr(\"font-family\", \"Saira\")\n        .style(\"font-size\", 18)\n        .on('click', function(event, d) {\n            setYear(d.data.key);\n            rotatePie(d);\n        });\n};\n\nconst createReferenceCache = () =&gt; {\n    referenceCache = {};\n    [\"All\", ...TOPICS.slice(1, -1)].forEach(topic =&gt; {\n        nodes_not_filtered.forEach(data =&gt; {\n            let r = 0;\n            links_not_filtered.forEach(l =&gt; {\n                if (l.target == data.id &amp;&amp; (topic == \"All\" || l.topic == topic)) {\n                    r += l.value;\n                }\n            });\n            r = normalize(r, minMaxMap[topic].min, minMaxMap[topic].max) * NODE_SIZE_MULTIPLIER * ((1 - (1 / minMaxMap[topic].max)) / 2) + NODE_SIZE_MINIMUM;\n            r /= SCALE_FACTOR;\n            data.r = r;\n            if (!(data.id in referenceCache)) referenceCache[data.id] = {};\n            referenceCache[data.id][topic] = r;\n        });\n    });\n};\n\nconst centerText = (txt, xPos) =&gt; {\n    let textWidth = txt.node().getBBox().width;\n    txt.attr(\"x\", (xPos - (textWidth / 2)));\n};\n\nconst pointerOutOfSVG = () =&gt; {\n    const el = document.elementFromPoint(mousePos.x, mousePos.y);\n    return !(svg.node() === el || svg.node().contains(el));\n};\n\nconst tooltipMouseover = function(event, d) {\n    if (mouseIsOver) return;\n    mouseIsOver = true;\n    Tooltip\n        .style(\"display\", \"initial\")\n        .style(\"visibility\", \"visible\");\n\n    d3.select(this)\n        .style(\"stroke\", HOVER_NODE_STROKE_COLOR)\n        .style(\"stroke-width\", NODE_STROKE_WIDTH_HIGHLIGHTED);\n}\n\nvar tooltipMousemove = function(event, d) {\n    Tooltip\n        .html(\"&lt;span&gt;Student: \" + d.id.split(\";\")[0] + \"&lt;br&gt;Year: \" + d.id.split(\";\")[1].split(\"/\")[3] + \"&lt;br&gt;Lab: \" + namesFromCodes[d.id.split(\";\")[1].split(\"/\")[5]] + \"&lt;br&gt;Region: &lt;span style=\\\"color:\" + colorRegion(LABS_CONTINENT[d.id.split(\";\")[1].split(\"/\")[5]]) + \";\\\"&gt;\" + LABS_CONTINENT[d.id.split(\";\")[1].split(\"/\")[5]] + \"&lt;/span&gt;&lt;/span&gt;\");\n};\n\nvar tooltipMouseleave = function(event, d, obj = null) {\n    if (mouseIsDragging) return;\n    mouseIsOver = false;\n    Tooltip\n        .style(\"display\", \"none\")\n        .style(\"visbility\", \"hidden\");\n\n    (obj == null ? d3.select(this) : obj)\n    .style(\"stroke\", NOT_HOVERING_NODE_STROKE_COLOR)\n        .style(\"stroke-width\", NOT_HOVERING_NODE_STROKE_WIDTH);\n};\n</code></pre>"},{"location":"stem/expert-network-map/#update-data","title":"Update Data","text":"<p>To create a scalable architecture for adding new features to the data visualization, the update sequence relies on multiples arrays of functions that each handle an aspect of the visualization. <code>updata_data.js</code> is the epicenter of interactivity in the visualization. See the following flowchart for an overview of the process.</p> <p></p> <p>The <code>updateData</code> function is called whenever a filter is changed that requires an update in the visualization. It takes as a parameter <code>absolutes</code>, an object that stores the newly changed filters and object references (for example, the HTML element encasing the SVGs of the visualization). It is called <code>absolutes</code> since they do not change from the time the filters are updates to when the data has been recalculated and the visualization has been updates. </p> <pre><code>const updateData = absolutes =&gt; {\n  absolutes = {\n      ...absolutes,\n      \"topic\": (\"topic\" in absolutes ? absolutes.topic : currentTopic),\n      \"year\": currentYear,\n      currentLabHighlightList\n  };\n  const data = filterData(updateCallbacks, absolutes);\n  const calculationDict = runCalculations(calculationCallbacks, data, absolutes);\n  setDataAttributes(attributeCallbacks, data, calculationDict, absolutes);\n}\n</code></pre> <p><code>updateData</code> first calls <code>filterData</code>, passing in <code>updateCallbacks</code> (an array of functions that filter which students and edges should appear given filters in <code>absolutes</code>) and <code>absolutes</code>. </p> <pre><code>// filter nodes and edges based on `absolutes`\nconst filterData = (funcs, absolutes) =&gt; {\n  let d = {\n      \"nodes\": nodes_not_filtered,\n      \"links\": links_not_filtered\n  };\n  for (let f of funcs) {\n      d = f(d, absolutes);\n  }\n  return d;\n};\n\n// run calculations for visualization\nconst runCalculations = (funcs, data, absolutes) =&gt; {\n  let calcs = {};\n  for (let f of funcs) {\n      calcs = {\n          ...calcs,\n          ...f(data, absolutes, calcs)\n      };\n  }\n  return calcs;\n}\n\n// update the visualization\nconst setDataAttributes = (funcs, data, calcs, absolutes) =&gt; {\n  for (let f of funcs) {\n      f(data, calcs, absolutes);\n  }\n}\n</code></pre> <p><code>updateCallbacks</code> filters the data by beginning with the arrays of all nodes and edges and removing students that do not meet the certain minimum number of times referenced for the selected subject area. However, students are not removed for filters such as lab and year - these nodes will have a lower opacity instead, set in the <code>attributeCallbacks</code> array.</p> <pre><code>const updateCallbacks = [\n  (data, absl) =&gt; {\n      const f = (nodes_not_filtered, links_not_filtered, filterFunc) =&gt; {\n          let nodes = nodes_not_filtered.filter(n =&gt; filterFunc(n));\n\n          let node_ids = nodes.map(n =&gt; n.id);\n          let links = JSON.parse(JSON.stringify(links_not_filtered)).filter(l =&gt; { // deepcopy solves heisenbug\n              return (l.topic == absl.topic || absl.topic == \"All\") &amp;&amp; (node_ids.includes(l.target)) &amp;&amp; (node_ids.includes(l.source));\n          });\n\n          return [nodes, links];\n      };\n      const [nodes, links] = f(data.nodes, data.links, n =&gt; {\n          if (absl.topic == \"All\") {\n              return sumObj(numLinksDict[n.id].target) &gt;= absl.minNumConnections;\n          } else {\n              return numLinksDict[n.id].target[absl.topic] &gt;= absl.minNumConnections;\n          }\n      });\n      return {\n          nodes,\n          links\n      };\n  }\n];\n</code></pre> <p><code>calculationCallbacks</code> runs all of the real-time calculations and fetches pre-calculated metrics that are required for the visualization. The functions are as follows:</p> <ul> <li>The strongest edge between two nodes (i.e. most times referenced each other out of any two pairs of students - number of times are pre-calculated, but which student has the highest for each subject-area is not) is found.</li> <li>Overlapping edges are condensed (i.e. Student A referenced Student B 5 times and Student B referenced Student A 4 times for the subject area \"Electronics Design\" becomes one edge with a value of 9).</li> <li>D3JS enter-update-exit protocol is used to update the <code>link</code> variable (different from <code>links</code>, <code>link</code> is a D3JS selection of the edge elements)</li> <li>D3JS enter-update-exit protocol is used to update the <code>node</code> variable (different from <code>nodes</code>, <code>node</code> is a D3JS selection of the node elements)</li> </ul> <pre><code>const calculationCallbacks = [\n  (data, absl) =&gt; {\n      let maxStrength = 0;\n      data.links.forEach(l =&gt; {\n          if (l.value &gt; maxStrength) {\n              maxStrength = l.value;\n          }\n      });\n      return {\n          maxStrength\n      };\n  },\n  (data, absl) =&gt; {\n      return {\n          \"condensedLinks\": condenseLinksforSimulation(data.links)\n      }\n  },\n  (data, absl, calcs) =&gt; {\n      const sel = absl.gl.selectAll(\"path\").data(calcs.condensedLinks, l =&gt; uniqueId(l));\n\n      sel.exit()\n          .remove();\n\n      const ent = sel.enter().append(\"path\").merge(sel);\n\n      return {\n          \"link\": ent\n      };\n  },\n  (data, absl) =&gt; {\n      const sel = absl.g.selectAll(\"circle\").data(data.nodes, n =&gt; n.id);\n      sel.exit()\n          .remove();\n\n      const ent = sel.enter().append(\"circle\").merge(sel);\n\n      return {\n          \"node\": ent\n      };\n  }\n];\n</code></pre> <p><code>attributeCallbacks</code> actually updates the visualization using the calculations and compiled arrays from the first two processes, <code>updateCallbacks</code> and <code>calculationCallbacks</code>. The functions are as follows:</p> <ul> <li>set node radii</li> <li>set force simulation edges, their lengths, and their strengths; set the collision circles for the nodes</li> <li>color nodes by continent, change node opacity, set node drag mouse events</li> <li>set edge stroke width and linecap</li> <li>activate linear gradient SVGs for edges where one node is highlighted and one isn't (due to filters from <code>absolutes</code> that weren't utilized in <code>updateCallbacks</code> to eliminate nodes)</li> <li>reduce opacity of unselected nodes</li> <li>set opacity of edges where either both nodes are highlighted or not highlighted</li> <li>when a student's node is clicked, open their documentation website</li> <li>reheat simulation</li> </ul> <pre><code>const attributeCallbacks = [\n  (data, calcs, absl) =&gt; { // node radii\n      calcs.node.attr(\"r\", d =&gt; {\n          return referenceCache[d.id][absl.topic];\n      });\n      absl.simulation.nodes(data.nodes);\n      forceCollide.initialize(data.nodes);\n  }, // simulation edges + node collision circles\n  (data, calcs, absl) =&gt; {\n      absl.simulation.force(\"link\", d3.forceLink(calcs.condensedLinks).id(d =&gt; d.id).distance(d =&gt; getSimulationForceLinkDistance(d)));\n      absl.simulation.force(\"collision\", forceCollide.radius(d =&gt; d.r));\n  },\n  (data, calcs, absl) =&gt; { // coloring nodes by continent, setting node opacity, defining dragging behavior\n      calcs.node.attr(\"fill\", d =&gt; {\n              const lab = d.id.split(\";\")[1].split(\"/\")[5];\n              return colorRegion(LABS_CONTINENT[lab]);\n          })\n          .attr(\"opacity\", NODE_HIGHLIGHTED_OPACITY)\n          .call(d3.drag()\n              .on(\"start\", dragstarted)\n              .on(\"drag\", dragged)\n              .on(\"end\", dragended));\n  },\n  (data, calcs, absl) =&gt; { // setting edge stroke width and linecap\n      calcs.link.attr(\"fill\", \"none\")\n          .attr(\"stroke-width\", LINE_WIDTH)\n          .style(\"stroke-linecap\", \"round\");\n  },\n  (data, calcs, absl) =&gt; { // manipulate linear gradient SVGs for edges where one node is highlighted and one isn't\n      const linkTick = () =&gt; {\n          calcs.link.attr(\"d\", d =&gt; {\n              const gradientID = getGradientID(d);\n              const lg = document.getElementById(gradientID);\n              const {\n                  source,\n                  sourceYear,\n                  sourceLab,\n                  target,\n                  targetYear,\n                  targetLab\n              } = getLinkSummary(d);\n              const sourceIsActivated = activationCheck(absl.year, absl.currentLabHighlightList, sourceYear, sourceLab);\n              const targetIsActivated = activationCheck(absl.year, absl.currentLabHighlightList, targetYear, targetLab);\n              if (!((sourceIsActivated &amp;&amp; targetIsActivated) || (!(sourceIsActivated || targetIsActivated)))) { // if only one is activated\n\n                  if (sourceIsActivated) {\n                      lg.setAttribute(\"x1\", d.source.x);\n                      lg.setAttribute(\"y1\", d.source.y);\n                      lg.setAttribute(\"x2\", d.target.x);\n                      lg.setAttribute(\"y2\", d.target.y);\n                  } else {\n                      lg.setAttribute(\"x2\", d.source.x);\n                      lg.setAttribute(\"y2\", d.source.y);\n                      lg.setAttribute(\"x1\", d.target.x);\n                      lg.setAttribute(\"y1\", d.target.y);\n                  }\n              }\n              const path = d3.path();\n              path.moveTo(d.source.x, d.source.y);\n              path.lineTo(d.target.x, d.target.y);\n              return path.toString();\n          });\n      }\n      linkTick();\n      absl.simulation.on(\"tick\", () =&gt; {\n          linkTick();\n          calcs.node\n              .attr(\"cx\", d =&gt; d.x)\n              .attr(\"cy\", d =&gt; d.y)\n      });\n  },\n  (d, calcs, absl) =&gt; { // reduce opacity of unselected nodes\n      calcs.node.attr(\"opacity\", data =&gt; {\n          const y = data.id.split(\";\")[1].split(\"/\")[3];\n          const lab = data.id.split(\";\")[1].split(\"/\")[5];\n          if ((y == absl.year || absl.year == \"All\") &amp;&amp; absl.currentLabHighlightList.includes(lab)) {\n              return NODE_HIGHLIGHTED_OPACITY;\n          } else {\n              return minOpacity;\n          }\n      });\n  },\n  (d, calcs, absl) =&gt; { // set opacity of edges where either both nodes are highlighted or not highlighted\n      calcs.link.attr(\"opacity\", data =&gt; {\n          const {\n              source,\n              sourceYear,\n              sourceLab,\n              target,\n              targetYear,\n              targetLab\n          } = getLinkSummary(data);\n          let sourceIsOn = false;\n          let targetIsOn = false;\n\n          if (activationCheck(absl.year, absl.currentLabHighlightList, sourceYear, sourceLab)) {\n              sourceIsOn = true;\n          }\n          if (activationCheck(targetYear, targetLab)) {\n              targetIsOn = true;\n          }\n\n          if ((sourceIsOn || targetIsOn) &amp;&amp; !(sourceIsOn &amp;&amp; targetIsOn)) {\n              return null;\n          }\n          return 1;\n      });\n      calcs.link.attr(\"stroke\", data =&gt; {\n          const source = data.source.id;\n          const sourceYear = source.split(\";\")[1].split(\"/\")[3];\n          const sourceLab = source.split(\";\")[1].split(\"/\")[5];\n          const target = data.target.id;\n          const targetYear = target.split(\";\")[1].split(\"/\")[3];\n          const targetLab = target.split(\";\")[1].split(\"/\")[5];\n          let sourceIsOn = false;\n          let targetIsOn = false;\n\n          if (activationCheck(absl.year, absl.currentLabHighlightList, sourceYear, sourceLab)) {\n              sourceIsOn = true;\n          }\n          if (activationCheck(absl.year, absl.currentLabHighlightList, targetYear, targetLab)) {\n              targetIsOn = true;\n          }\n\n          if (sourceIsOn &amp;&amp; targetIsOn) {\n              return \"rgba(\" + RGB_LINE_COLOR + \",1)\";\n          } else if (sourceIsOn || targetIsOn) {\n              return `url(#${getGradientID(data)})`;\n          } else {\n              return \"rgba(\" + RGB_LINE_COLOR + \",0.05)\";\n          }\n      });\n  },\n  (data, calcs, absl) =&gt; { // when a student's node is clicked, open their documentation website\n\n      calcs.node.each(function(e, i) {\n          const currentNode = d3.select(this);\n          if (!currentNode.on(\"mouseover\")) {\n              currentNode.on(\"mouseover\", tooltipMouseover)\n                  .on(\"mousemove\", tooltipMousemove)\n                  .on(\"mouseleave\", tooltipMouseleave);\n              currentNode.on('click', (d, i) =&gt; {\n                  window.open(i.id.split(\";\")[1], \"_blank\")\n              })\n          }\n      });\n  },\n  (data, calcs, absl) =&gt; absl.simulation.alpha(1).restart() // reheat simulation\n];\n</code></pre> <p>So all together, here's <code>update_data.js</code>.</p> <p>update_data.js</p> <pre><code>const updateCallbacks = [\n  (data, absl) =&gt; {\n      const f = (nodes_not_filtered, links_not_filtered, filterFunc) =&gt; {\n          let nodes = nodes_not_filtered.filter(n =&gt; filterFunc(n));\n\n          let node_ids = nodes.map(n =&gt; n.id);\n          let links = JSON.parse(JSON.stringify(links_not_filtered)).filter(l =&gt; { // deepcopy solves heisenbug\n              return (l.topic == absl.topic || absl.topic == \"All\") &amp;&amp; (node_ids.includes(l.target)) &amp;&amp; (node_ids.includes(l.source));\n          });\n\n          return [nodes, links];\n      };\n      const [nodes, links] = f(data.nodes, data.links, n =&gt; {\n          if (absl.topic == \"All\") {\n              return sumObj(numLinksDict[n.id].target) &gt;= absl.minNumConnections;\n          } else {\n              return numLinksDict[n.id].target[absl.topic] &gt;= absl.minNumConnections;\n          }\n      });\n      return {\n          nodes,\n          links\n      };\n  }\n];\n\nconst calculationCallbacks = [\n  (data, absl) =&gt; {\n      let maxStrength = 0;\n      data.links.forEach(l =&gt; {\n          if (l.value &gt; maxStrength) {\n              maxStrength = l.value;\n          }\n      });\n      return {\n          maxStrength\n      };\n  },\n  (data, absl) =&gt; {\n      return {\n          \"condensedLinks\": condenseLinksforSimulation(data.links)\n      }\n  },\n  (data, absl, calcs) =&gt; {\n      const sel = absl.gl.selectAll(\"path\").data(calcs.condensedLinks, l =&gt; uniqueId(l));\n\n      sel.exit()\n          .remove();\n\n      const ent = sel.enter().append(\"path\").merge(sel);\n\n      return {\n          \"link\": ent\n      };\n  },\n  (data, absl) =&gt; {\n      const sel = absl.g.selectAll(\"circle\").data(data.nodes, n =&gt; n.id);\n      sel.exit()\n          .remove();\n\n      const ent = sel.enter().append(\"circle\").merge(sel);\n\n      return {\n          \"node\": ent\n      };\n  }\n];\n\nconst attributeCallbacks = [\n    (data, calcs, absl) =&gt; { // node radii\n        calcs.node.attr(\"r\", d =&gt; {\n            return referenceCache[d.id][absl.topic];\n        });\n        absl.simulation.nodes(data.nodes);\n        forceCollide.initialize(data.nodes);\n    }, // simulation edges + node collision circles\n    (data, calcs, absl) =&gt; {\n        absl.simulation.force(\"link\", d3.forceLink(calcs.condensedLinks).id(d =&gt; d.id).distance(d =&gt; getSimulationForceLinkDistance(d)));\n        absl.simulation.force(\"collision\", forceCollide.radius(d =&gt; d.r));\n    },\n    (data, calcs, absl) =&gt; { // coloring nodes by continent, setting node opacity, defining dragging behavior\n        calcs.node.attr(\"fill\", d =&gt; {\n                const lab = d.id.split(\";\")[1].split(\"/\")[5];\n                return colorRegion(LABS_CONTINENT[lab]);\n            })\n            .attr(\"opacity\", NODE_HIGHLIGHTED_OPACITY)\n            .call(d3.drag()\n                .on(\"start\", dragstarted)\n                .on(\"drag\", dragged)\n                .on(\"end\", dragended));\n    },\n    (data, calcs, absl) =&gt; { // setting edge stroke width and linecap\n        calcs.link.attr(\"fill\", \"none\")\n            .attr(\"stroke-width\", LINE_WIDTH)\n            .style(\"stroke-linecap\", \"round\");\n    },\n    (data, calcs, absl) =&gt; { // manipulate linear gradient SVGs for edges where one node is highlighted and one isn't\n        const linkTick = () =&gt; {\n            calcs.link.attr(\"d\", d =&gt; {\n                const gradientID = getGradientID(d);\n                const lg = document.getElementById(gradientID);\n                const {\n                    source,\n                    sourceYear,\n                    sourceLab,\n                    target,\n                    targetYear,\n                    targetLab\n                } = getLinkSummary(d);\n                const sourceIsActivated = activationCheck(absl.year, absl.currentLabHighlightList, sourceYear, sourceLab);\n                const targetIsActivated = activationCheck(absl.year, absl.currentLabHighlightList, targetYear, targetLab);\n                if (!((sourceIsActivated &amp;&amp; targetIsActivated) || (!(sourceIsActivated || targetIsActivated)))) { // if only one is activated\n\n                    if (sourceIsActivated) {\n                        lg.setAttribute(\"x1\", d.source.x);\n                        lg.setAttribute(\"y1\", d.source.y);\n                        lg.setAttribute(\"x2\", d.target.x);\n                        lg.setAttribute(\"y2\", d.target.y);\n                    } else {\n                        lg.setAttribute(\"x2\", d.source.x);\n                        lg.setAttribute(\"y2\", d.source.y);\n                        lg.setAttribute(\"x1\", d.target.x);\n                        lg.setAttribute(\"y1\", d.target.y);\n                    }\n                }\n                const path = d3.path();\n                path.moveTo(d.source.x, d.source.y);\n                path.lineTo(d.target.x, d.target.y);\n                return path.toString();\n            });\n        }\n        linkTick();\n        absl.simulation.on(\"tick\", () =&gt; {\n            linkTick();\n            calcs.node\n                .attr(\"cx\", d =&gt; d.x)\n                .attr(\"cy\", d =&gt; d.y)\n        });\n    },\n    (d, calcs, absl) =&gt; { // reduce opacity of unselected nodes\n        calcs.node.attr(\"opacity\", data =&gt; {\n            const y = data.id.split(\";\")[1].split(\"/\")[3];\n            const lab = data.id.split(\";\")[1].split(\"/\")[5];\n            if ((y == absl.year || absl.year == \"All\") &amp;&amp; absl.currentLabHighlightList.includes(lab)) {\n                return NODE_HIGHLIGHTED_OPACITY;\n            } else {\n                return minOpacity;\n            }\n        });\n    },\n    (d, calcs, absl) =&gt; { // set opacity of edges where either both nodes are highlighted or not highlighted\n        calcs.link.attr(\"opacity\", data =&gt; {\n            const {\n                source,\n                sourceYear,\n                sourceLab,\n                target,\n                targetYear,\n                targetLab\n            } = getLinkSummary(data);\n            let sourceIsOn = false;\n            let targetIsOn = false;\n\n            if (activationCheck(absl.year, absl.currentLabHighlightList, sourceYear, sourceLab)) {\n                sourceIsOn = true;\n            }\n            if (activationCheck(targetYear, targetLab)) {\n                targetIsOn = true;\n            }\n\n            if ((sourceIsOn || targetIsOn) &amp;&amp; !(sourceIsOn &amp;&amp; targetIsOn)) {\n                return null;\n            }\n            return 1;\n        });\n        calcs.link.attr(\"stroke\", data =&gt; {\n            const source = data.source.id;\n            const sourceYear = source.split(\";\")[1].split(\"/\")[3];\n            const sourceLab = source.split(\";\")[1].split(\"/\")[5];\n            const target = data.target.id;\n            const targetYear = target.split(\";\")[1].split(\"/\")[3];\n            const targetLab = target.split(\";\")[1].split(\"/\")[5];\n            let sourceIsOn = false;\n            let targetIsOn = false;\n\n            if (activationCheck(absl.year, absl.currentLabHighlightList, sourceYear, sourceLab)) {\n                sourceIsOn = true;\n            }\n            if (activationCheck(absl.year, absl.currentLabHighlightList, targetYear, targetLab)) {\n                targetIsOn = true;\n            }\n\n            if (sourceIsOn &amp;&amp; targetIsOn) {\n                return \"rgba(\" + RGB_LINE_COLOR + \",1)\";\n            } else if (sourceIsOn || targetIsOn) {\n                return `url(#${getGradientID(data)})`;\n            } else {\n                return \"rgba(\" + RGB_LINE_COLOR + \",0.05)\";\n            }\n        });\n    },\n    (data, calcs, absl) =&gt; { // when a student's node is clicked, open their documentation website\n\n        calcs.node.each(function(e, i) {\n            const currentNode = d3.select(this);\n            if (!currentNode.on(\"mouseover\")) {\n                currentNode.on(\"mouseover\", tooltipMouseover)\n                    .on(\"mousemove\", tooltipMousemove)\n                    .on(\"mouseleave\", tooltipMouseleave);\n                currentNode.on('click', (d, i) =&gt; {\n                    window.open(i.id.split(\";\")[1], \"_blank\")\n                })\n            }\n        });\n    },\n    (data, calcs, absl) =&gt; absl.simulation.alpha(1).restart() // reheat simulation\n  ];\n\n\n// filter nodes and edges based on `absolutes`\nconst filterData = (funcs, absolutes) =&gt; {\n    let d = {\n        \"nodes\": nodes_not_filtered,\n        \"links\": links_not_filtered\n    };\n    for (let f of funcs) {\n        d = f(d, absolutes);\n    }\n    return d;\n  };\n\n  // run calculations for visualization\n  const runCalculations = (funcs, data, absolutes) =&gt; {\n    let calcs = {};\n    for (let f of funcs) {\n        calcs = {\n            ...calcs,\n            ...f(data, absolutes, calcs)\n        };\n    }\n    return calcs;\n  }\n\n  // update the visualization\n  const setDataAttributes = (funcs, data, calcs, absolutes) =&gt; {\n    for (let f of funcs) {\n        f(data, calcs, absolutes);\n    }\n  }\n\nconst updateData = absolutes =&gt; {\n  absolutes = {\n      ...absolutes,\n      \"topic\": (\"topic\" in absolutes ? absolutes.topic : currentTopic),\n      \"year\": currentYear,\n      currentLabHighlightList\n  };\n  const data = filterData(updateCallbacks, absolutes);\n  const calculationDict = runCalculations(calculationCallbacks, data, absolutes);\n  setDataAttributes(attributeCallbacks, data, calculationDict, absolutes);\n}\n</code></pre>"},{"location":"stem/expert-network-map/#lab-filter","title":"Lab Filter","text":"<p><code>multiselect-dropdown.js</code> contains the JavaScript functionality for the lab selection filter. The only part of the code that directly invovles the data visualization is the <code>initializeLabMultiselect</code> function. It takes in a list of labs and a callback function as parameters, initializes a new Multiselect object (defined earlier in the file), and binds the GUI to the callback. The callback is called whenever there is a change in the selection.</p> <pre><code>const initializeLabMultiselect = (labs, callback) =&gt; {\n    $(document).ready(function() {\n        var multi = new Multiselect(\"#countries\", callback);\n    });\n\n    const select = d3.select(\"#my_dataviz\").select(\"div div.container\");\n\n    let labNamesToDisplay = [];\n\n    labs.forEach(l =&gt; {\n        if (Object.keys(namesFromCodes).includes(l) &amp;&amp; !labNamesToDisplay.includes(namesFromCodes[l])) {\n            labNamesToDisplay.push(namesFromCodes[l]);\n        }\n        else if (!Object.keys(namesFromCodes).includes(l)){\n            labNamesToDisplay.push(l);\n        }\n    });\n\n    labNamesToDisplay.sort();\n\n    select.selectAll(\"option\")\n        .data([\"All\"].concat(labNamesToDisplay)) // Add \"All\" option to the start of the list\n        .join(\"option\")\n        .attr(\"value\", d =&gt; d)\n        .html(d =&gt; d);\n};\n</code></pre> <p>Here's the entire file. The code uses jQuery.</p> <p>multiselect-dropdown.js</p> <pre><code>Array.prototype.search = function(elem) {\n    for (var i = 0; i &lt; this.length; i++) {\n        if (this[i] == elem) return i;\n    }\n\n    return -1;\n};\n\nvar Multiselect = function(selector, callback) {\n    if (!$(selector)) {\n        console.error(\"ERROR: Element %s does not exist.\", selector);\n        return;\n    }\n\n    this.selector = selector;\n    this.selections = [];\n    this.callback = callback;\n\n    (function(that) {\n        that.events(callback);\n    })(this);\n};\n\nMultiselect.prototype = {\n    open: function(that) {\n        var target = $(that).parent().attr(\"data-target\");\n\n        // If we are not keeping track of this one's entries, then start doing so.\n        if (!this.selections) {\n            this.selections = [];\n        }\n\n        $(this.selector + \".multiselect\").toggleClass(\"active\");\n    },\n\n    close: function() {\n        $(this.selector + \".multiselect\").removeClass(\"active\");\n    },\n\n    events: function(callback) { // Pass the callback function as an argument\n        var that = this;\n\n        $(document).on(\"click\", that.selector + \".multiselect &gt; .title\", function(e) {\n            if (e.target.className.indexOf(\"close-icon\") &lt; 0) {\n                that.open();\n            }\n        });\n\n        $(document).on(\"click\", that.selector + \".multiselect &gt; .title &gt; .close-icon\", function(e) {\n            that.clearSelections();\n        });\n\n\n        $(document).on(\"click\", that.selector + \".multiselect option\", function(e) {\n            var selection = $(this).attr(\"value\");\n            var optionsCount = $(that.selector + \".multiselect option\").length;\n            if (selection == \"All\") {\n                if (that.selections.search(\"All\") &lt; 0) {\n                    // Select All\n                    that.selections = $(that.selector + \".multiselect option\").map(function() {\n                        return $(this).val();\n                    }).get();\n                } else {\n                    // Deselect All\n                    that.selections = [];\n                }\n            } else {\n\n                var io = that.selections.search(selection);\n                if (io &lt; 0) that.selections.push(selection)\n                else that.selections.splice(io, 1);\n\n                // If not all options are selected, deselect \"All\"\n                if (that.selections.length !== optionsCount &amp;&amp; that.selections.search(\"All\") &gt;= 0) {\n                    const res = that.selections.search(\"All\");\n                    if (res != -1) that.selections.splice(res, 1);\n                }\n                // If all options are selected, also select 'All'\n                else if (that.selections.length === optionsCount - 1 &amp;&amp; that.selections.search(\"All\") &lt; 0) {\n                    that.selections.push('All');\n                }\n            }\n\n            that.selectionStatus();\n            that.setSelectionsString();\n            if (typeof callback === \"function\") {\n                let selectionCodes = []; \n                that.selections.forEach(s =&gt; {\n                    if (s in codesFromNames) {\n                        codesFromNames[s].forEach(c =&gt; {\n                            selectionCodes.push(c);\n                        })\n                    }\n                    else selectionCodes.push(s);\n                });\n                callback(selectionCodes);\n            }\n        });\n    },\n\n    selectionStatus: function() {\n        var obj = $(this.selector + \".multiselect\");\n\n        if (this.selections.length) obj.addClass(\"selection\");\n        else obj.removeClass(\"selection\");\n    },\n\n    clearSelections: function() {\n        this.selections = [];\n        this.selectionStatus();\n        this.setSelectionsString();\n        this.callback([]);\n    },\n\n    getSelections: function() {\n        return this.selections;\n    },\n\n    setSelectionsString: function() {\n        var selects = this.getSelectionsString().split(\", \");\n        $(this.selector + \".multiselect &gt; .title\").attr(\"title\", selects);\n\n        var opts = $(this.selector + \".multiselect option\");\n\n        if (selects.toString().length &gt; 16) {\n            $(this.selector + \".multiselect &gt; .title &gt; .text\")\n                .text(selects.toString().slice(0, 16) + \"...\");\n        } else {\n            $(this.selector + \".multiselect &gt; .title &gt; .text\")\n                .text(selects);\n        }\n\n        for (var i = 0; i &lt; opts.length; i++) {\n            $(opts[i]).removeClass(\"selected\");\n        }\n        for (var j = 0; j &lt; selects.length; j++) {\n            var select = selects[j];\n            for (var i = 0; i &lt; opts.length; i++) {\n                if ($(opts[i]).attr(\"value\") == select || select == \"All\") {\n                    $(opts[i]).addClass(\"selected\");\n                    if (select != \"All\") break;\n                }\n            }\n        }\n    },\n\n    getSelectionsString: function() {\n        // If \"All\" is selected, return \"All\"\n        if (this.selections.search(\"All\") &gt;= 0)\n            return \"All\";\n        else if (this.selections.length &gt; 0)\n            return this.selections.join(\", \");\n        else return \"Filter Labs\";\n    },\n\n    setSelections: function(arr) {\n        if (!arr[0]) {\n            error(\"ERROR: This does not look like an array.\");\n            return;\n        }\n\n        this.selections = arr;\n        this.selectionStatus();\n        this.setSelectionsString();\n    },\n};\n\nconst initializeLabMultiselect = (labs, callback) =&gt; {\n    $(document).ready(function() {\n        var multi = new Multiselect(\"#countries\", callback);\n    });\n\n    const select = d3.select(\"#my_dataviz\").select(\"div div.container\");\n\n    let labNamesToDisplay = [];\n\n    labs.forEach(l =&gt; {\n        if (Object.keys(namesFromCodes).includes(l) &amp;&amp; !labNamesToDisplay.includes(namesFromCodes[l])) {\n            labNamesToDisplay.push(namesFromCodes[l]);\n        }\n        else if (!Object.keys(namesFromCodes).includes(l)){\n            labNamesToDisplay.push(l);\n        }\n    });\n\n    labNamesToDisplay.sort();\n\n    select.selectAll(\"option\")\n        .data([\"All\"].concat(labNamesToDisplay)) // Add \"All\" option to the start of the list\n        .join(\"option\")\n        .attr(\"value\", d =&gt; d)\n        .html(d =&gt; d);\n};\n</code></pre>"},{"location":"stem/expert-network-map/#minimum-times-referenced-dial","title":"Minimum Times Referenced Dial","text":"<p><code>dial.js</code> handles the minimum number of times referenced filter. </p> <p></p> <p>This filter originally was draggable left-to-right, but this movement was really unintuitive, and feedback from testers reveals that a circular dragging motion would significantly improve the user experience, so I implemented this change.</p> <p>The code handles:</p> <ul> <li>scaling rotation in degrees to a number in between the minimum and maximum number of times a student was referenced for that topic, with a cap set to 60 (<code>maxMap</code>).</li> <li>update number on dial when turned - only when the number rounds up to the next integer is the callback function called.</li> <li>carry out trigonometry to relate mouse dragging to rotation about a point. </li> <li>create dial SVG objects and set attributes (font, position, etc).</li> </ul> <p>dial.js</p> <pre><code>let prevSentToCallback;\nconst strokeWidth = 12; // stroke width of the line of the dial\nconst dialY = pieY; // y-coordinate of dial\nconst dialX = width - pieX; // x-coordinate of dial\n\n// scale rotation in degrees of dial to number of times referenced filter value\nconst generateDialMapScale = () =&gt; {\n    return d3.scaleLinear().domain([startDegree, endDegree]).range([clamp(mapMin, 1, Infinity), mapMax])\n};\n\n// update number on dial when turned and callback if now integer\nconst updateDialText = (currentDialDeg, callback) =&gt; {\n    if (!dialGroup) return;\n    dialGroup.attr(\"transform\", `translate(${dialX}, ${dialY}) rotate(${currentDialDeg})`);\n\n    var mapScale = generateDialMapScale();\n    var mappedValue = mapScale(currentDialDeg);\n\n    const rounded = Math.round(mappedValue);\n\n    numText\n        .text(rounded);\n    numTextWidth = numText.node().getBBox().width;\n    numText.attr(\"x\", (dialX - (numTextWidth / 2)));\n\n    callback(rounded);\n};\n\n// helper function to convert between coordinates for placement\nfunction convertSVGtoScreenCoordinates(svgElement, dialX, dialY) {\n    var pt = svgElement.createSVGPoint();\n    pt.x = dialX;\n    pt.y = dialY;\n\n    // getScreenCTM returns the matrix that transforms current user units to screen coordinates\n    var svgP = pt.matrixTransform(svgElement.getScreenCTM());\n\n    return {\n        x: svgP.x,\n        y: svgP.y\n    };\n}\n\n// helper function for dragging trigonometry \nfunction calculateAngle(center, point) {\n    let dy = point.y - center.y;\n    let dx = point.x - center.x;\n    let theta = Math.atan2(dy, dx);\n    return theta;\n}\n\n// create dial SVG objects and set attributes (font, position, etc)\nconst initializeDial = (svg, callback) =&gt; {\n    var width = +svg.attr(\"width\"),\n        height = +svg.attr(\"height\"),\n        radius = pieRadius - (strokeWidth / 2); // to be same as the year-select pie\n\n    // Get the input element for displaying the mapped value\n    var inputElement = document.getElementById(\"value-input\");\n\n    const clamp = (num, min, max) =&gt; Math.min(Math.max(num, min), max);\n    const sensitivity = 1;\n\n    const textElem = svg.append(\"text\");\n    textElem\n        .attr(\"x\", dialX)\n        .attr(\"y\", dialY + (radius + (strokeWidth * 2)))\n        .text(\"Minimum Times Referenced\")\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", \"13px\")\n        .attr(\"fill\", DIAL_TEXT_COLOR);\n    centerText(textElem, dialX);\n\n    numText = svg.append(\"text\");\n    numText\n        .attr(\"x\", dialX)\n        .attr(\"y\", dialY + ((radius / 2) + strokeWidth))\n        .text(\"20\")\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", \"40px\")\n        .attr(\"fill\", DIAL_TEXT_COLOR);\n    let numTextWidth = numText.node().getBBox().width;\n    numText.attr(\"x\", (dialX - (numTextWidth / 2)));\n\n    window.addEventListener('mousemove', (event) =&gt; {\n        mousePos = {\n            x: event.clientX,\n            y: event.clientY\n        };\n    });\n\n    var drag = d3.drag()\n        .on(\"start\", (event, d) =&gt; {\n            d.x = event.sourceEvent.clientX;\n            d.y = event.sourceEvent.clientY;\n            if (!d.currentDeg) d.currentDeg = startPos;\n        })\n        .on(\"drag\", (event, d) =&gt; {\n            let vals = convertSVGtoScreenCoordinates(document.getElementsByTagName('svg')[0], dialX, dialY);\n            let newXY = {\n                \"x\": event.sourceEvent.clientX,\n                \"y\": event.sourceEvent.clientY\n            };\n            let theta = calculateAngle(vals, /*mousePos*/ newXY);\n            let thetaDegrees = theta * (180 / Math.PI);\n            let oldXY = {\n                \"x\": d.x,\n                \"y\": d.y\n            };\n            let oldAngle = calculateAngle(vals, oldXY);\n            let oldAngleDegrees = oldAngle * (180 / Math.PI)\n            let angleDelta = ((thetaDegrees - oldAngleDegrees + 180 + 360) % 360) - 180;\n            d.x = newXY.x;\n            d.y = newXY.y;\n\n            d.degNew = angleDelta + d.currentDeg;\n            d.currentDeg = d.degNew;\n            currentDialDeg = clamp(angleDelta + currentDialDeg, startDegree, endDegree);\n\n            updateDialText(currentDialDeg, callback);\n        })\n        .on(\"end\", (event, d) =&gt; {\n            d.currentDeg = d.degNew;\n        });\n\n\n    dialGroup = svg.append(\"g\")\n        .data([{\n            x: 0,\n            scale: d3.scaleLinear().domain([0, width]).range([startDegree, endDegree])\n        }]) // initial data for dialGroup\n        .attr(\"transform\", `translate(${dialX}, ${dialY}) rotate(${startPos})`)\n        .call(drag);\n\n    // Add a transparent circle for better dragging\n    dialGroup.append(\"circle\")\n        .attr(\"r\", radius)\n        .style(\"fill\", \"transparent\");\n\n    dialGroup.append(\"circle\")\n        .attr(\"r\", radius)\n        .style(\"fill\", \"none\")\n        .style(\"stroke\", DIAL_OUTLINE_COLOR)\n        .style(\"stroke-width\", `${strokeWidth}px`);\n\n    dialGroup.append(\"line\")\n        .attr(\"x1\", 0)\n        .attr(\"y1\", 0)\n        .attr(\"x2\", 0)\n        .attr(\"y2\", -(radius - strokeWidth))\n        .style(\"stroke\", DIAL_STICK_COLOR)\n        .style(\"stroke-width\", `${strokeWidth}px`)\n        .style(\"stroke-linecap\", \"round\");\n\n    // Display the initial mapped value\n    var initialScale = d3.scaleLinear().domain([startDegree, endDegree]).range([mapMin, mapMax]);\n    var initialMappedValue = initialScale(startPos);\n}\n</code></pre>"},{"location":"stem/expert-network-map/#subject-area-carousel","title":"Subject-Area Carousel","text":"<p><code>carousel.js</code> only handles the initialization of the subject-area-selection carousel. By carousel, I am referring to the selection of a rectangle of the subject-area where a black rectangular outline moves down to highlight the selection. I originally planned to use a more traditional carousel design but altered the axis and mobility of the options for aesthetic reasons.</p> <p></p> <p>carousel.js</p> <pre><code>const initializeCarousel = (callback, carousel_data, width, height, x, y, svg, colorPalette) =&gt; {\n    // create SVG group (&lt;g&gt;) HTML element\n    const g = svg.append(\"g\"); \n\n    // create D3JS scale band for the y-axis of the filter\n    const yScale = d3.scaleBand()\n        .range([ 0, height ])\n        .domain(carousel_data)\n        .padding(0.2);\n\n    // create D3JS color scale\n    const color = d3.scaleOrdinal().range(colorPalette);\n\n    // make D3JS selection for option rectangles and set aesthetic attributes based on constants\n    const rect = g.selectAll(\"rect\")\n        .data(carousel_data)\n        .enter()\n        .append(\"rect\")\n        .attr('x', 10 + x)\n        .attr('y', d =&gt; yScale(d) + y)\n        .attr('width', width)\n        .attr('height', yScale.bandwidth())\n        .attr('stroke', CAROUSEL_RECT_STROKE_COLOR)\n        .attr('stroke-width', CAROUSEL_RECT_STROKE_WIDTH)\n        .attr('fill', CAROUSEL_OPTION_COLOR/*d =&gt; color(d)*/)\n        .on('click', (event, d) =&gt; {\n            movePointerTo(d);\n        });\n\n    // calculat width of outline selection rectangle\n    var outerWidth = ((height / carousel_data.length) - yScale.bandwidth()) + width, outerHeight = height / carousel_data.length;\n    var innerWidth = width, innerHeight = yScale.bandwidth();\n\n    var outerRectangle = { top: yScale(carousel_data[0]) + ((yScale.bandwidth() - (height / carousel_data.length)))/2, left: 10 - ((height / carousel_data.length) - yScale.bandwidth())/2, width: outerWidth, height: outerHeight };\n    var innerRectangle = { \n        top: outerRectangle.top + (outerHeight - innerHeight) / 2, \n        left: outerRectangle.left + (outerWidth - innerWidth) / 2,\n        width: innerWidth,\n        height: innerHeight\n    };\n\n    // SVG path for outer selection rectangle\n    var pathData = [\n        \"M\", outerRectangle.left, outerRectangle.top, // Move to the top-left corner of the outer rectangle\n        \"h\", outerWidth, // Draw the top side\n        \"v\", outerHeight, // Draw the right side\n        \"h\", -outerWidth, // Draw the bottom side\n        \"v\", -outerHeight, // Draw the left side\n        \"M\", innerRectangle.left, innerRectangle.top, // Move to the top-left corner of the inner rectangle\n        \"h\", innerWidth, // Draw the top side\n        \"v\", innerHeight, // Draw the right side\n        \"h\", -innerWidth, // Draw the bottom side\n        \"v\", -innerHeight, // Draw the left side\n        \"Z\" // Close the path\n    ].join(\" \");\n\n    // create definitions section of &lt;g&gt;\n    var defs = g.append(\"defs\");\n\n    // create mask (for selection rectangle outline)\n    var mask = defs.append(\"mask\")\n        .attr(\"id\", \"myMask\");\n\n    // Add a white rectangle to the mask\n    mask.append(\"rect\")\n        .attr(\"x\", x)\n        .attr(\"y\", y)\n        .attr(\"width\", \"100%\")\n        .attr(\"height\", \"100%\")\n        .attr(\"fill\", \"white\");\n\n    // Add a smaller black rectangle to the mask to cut out\n    mask.append(\"rect\")\n        .attr(\"x\", innerRectangle.left + x)\n        .attr(\"y\", innerRectangle.top + y)\n        .attr(\"width\", innerRectangle.width)\n        .attr(\"height\", innerRectangle.height)\n        .attr(\"fill\", \"black\");\n\n    // Draw a rectangle with the mask\n    const selectionRect = g.append(\"rect\")\n        .attr(\"x\", outerRectangle.left + x)\n        .attr(\"y\", outerRectangle.top + y)\n        .attr(\"width\", outerRectangle.width)\n        .attr(\"height\", outerRectangle.height)\n        .attr(\"fill\", CAROUSEL_SELECTOR_COLOR)\n        .attr(\"mask\", \"url(#myMask)\");\n\n    // when an option is clicked, move the selection rectangle to that option\n    const movePointerTo = d =&gt; {\n        selectionRect.transition()\n            .duration(1000)\n            .attr('transform', \"translate(0, \" + (yScale(d) - yScale(carousel_data[0])) + \")\");\n            callback(d);\n    };\n\n    // set text attributes and click callback for option rectangles\n    const text = g.selectAll(\"text\")\n        .data(carousel_data)\n        .enter()\n        .append(\"text\")\n        .attr('x', 10 + width/2 + x)\n        .attr('y', d =&gt; yScale(d) + yScale.bandwidth()/2 + y)\n        .attr('dy', '0.3em')\n        .text(d =&gt; d)\n        .on('click', (event, d) =&gt; {\n            movePointerTo(d);\n        });\n\n    // set text style attributes\n    text\n        .style('text-anchor', 'middle')\n        .style('fill', CAROUSEL_TEXT_COLOR)\n        .attr(\"font-weight\", 700)\n        .attr(\"font-family\", \"Saira\")\n        .attr(\"font-size\", 13)\n};\n</code></pre>"},{"location":"stem/expert-network-map/#year-selection","title":"Year Selection","text":"<p>The year selection pie was not substantial enough to be moved into its own file, so its code is found in <code>helper_functions.js</code>. I'll provide a snippet and explanation below.</p> <p>The code does the following:</p> <ul> <li>create a new SVG group for the filter</li> <li>add a slice for each year</li> <li>handle rotation on click</li> <li>style the text inside each slice</li> </ul> <pre><code>const createPie = () =&gt; {\n    const pieG = svg.append(\"g\")\n        .attr(\"transform\", \"translate(\" + pieX + \",\" + pieY + \") rotate(\" + 360 / 14 + \")\");\n\n    var pieData = {\n        \"All\": 1\n    };\n\n    for (let i = 2018; i &lt;= 2023; i++) {\n        pieData[i] = 1;\n    }\n\n    var pie = d3.pie()\n        .value(function(d) {\n            return d.value;\n        })\n    var data_ready = pie(Object.entries(pieData).map(([key, value]) =&gt; ({\n        key,\n        value\n    })));\n\n    var arcGenerator = d3.arc()\n        .innerRadius(50)\n        .outerRadius(pieRadius)\n\n    const rotatePie = d =&gt; {\n        var rotate = -((d.startAngle + d.endAngle) / 2);\n        pieG.transition()\n            .duration(1000)\n            .attr(\"transform\", \"translate(\" + pieX + \",\" + pieY + \") rotate(\" + (rotate / Math.PI * 180) + \")\");\n    };\n\n    pieG\n        .selectAll('mySlices')\n        .data(data_ready)\n        .enter()\n        .append('path')\n        .attr('d', arcGenerator)\n        .attr('fill', PIE_SLICE_COLOR)\n        .attr(\"stroke\", \"white\")\n        .style(\"stroke-width\", \"2px\")\n        .style(\"opacity\", 1)\n        .on('click', function(event, d) {\n            setYear(d.data.key);\n            rotatePie(d);\n        });\n\n    pieG\n        .selectAll('mySlices')\n        .data(data_ready)\n        .enter()\n        .append('text')\n        .text(function(d) {\n            return d.data.key\n        })\n        .attr(\"dy\", \"0.3em\")\n        .attr(\"transform\", function(d) {\n            return \"translate(\" + arcGenerator.centroid(d) + \") rotate(\" + (d.startAngle + d.endAngle) / 2 * (180 / Math.PI) + \")\";\n        })\n        .style('text-anchor', 'middle')\n        .style('fill', PIE_TEXT_COLOR)\n        .attr(\"font-weight\", 700)\n        .attr(\"font-family\", \"Saira\")\n        .style(\"font-size\", 18)\n        .on('click', function(event, d) {\n            setYear(d.data.key);\n            rotatePie(d);\n        });\n};\n</code></pre>"},{"location":"stem/expert-network-map/#overlay-text","title":"Overlay Text","text":"<p><code>overlay_text.js</code> handles the creation of text and links in the SVG through D3JS. The code defines the <code>createTxt</code> function then calls that with different text and URLs.</p> <p>overlay_text.js</p> <pre><code>const createOverlayText = () =&gt; {\n    createdBy();\n};\n\nconst createdBy = () =&gt; {\n    const xPos = 10; // 10px from the left edge\n\n    const createTxt = (ySub, txt, lnk_txt, lnk) =&gt; {\n        const yPos = height - ySub; // 10px from the bottom edge\n        svg.append(\"text\")\n            .attr(\"font-size\", \"14px\")\n            .attr(\"x\", xPos)\n            .attr(\"y\", yPos)\n            .attr(\"class\", \"overlay-text\")\n            .text(txt + \" \")\n            .append(\"a\")\n            .attr(\"xlink:href\", lnk)\n            .attr(\"target\", \"_blank\") \n            .style(\"fill\", OVERLAY_TEXT_LINK_COLOR)\n            .attr(\"font-size\", \"14px\")\n            .text(lnk_txt);\n    };\n\n    createTxt(50, \"Created by\", \"Adam Stone\", \"https://fabacademy.org/2023/labs/charlotte/students/adam-stone/\")\n    //createTxt(50, \"To join the Mattermost channel\", \"click here\", \"https://chat.academany.org/fabacademy-2023/channels/fab-academy-data-viz\");\n    createTxt(35, \"For documentation\", \"click here\", \"https://gitlab.fabcloud.org/pub/project/expert-network-map/-/blob/main/documentation.md\")\n    createTxt(20, \"Took inspiration from\", \"Nadieh Bremer\", \"https://royalconstellations.visualcinnamon.com/\")\n    createTxt(5, \"Recieved guidance and support from\", \"Francisco Sanchez\", \"https://www.fablabs.io/users/francisco\")\n\n    svg.append(\"text\")\n        .attr(\"font-size\", \"30px\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height - 10)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"class\", \"overlay-text\")\n        .style(\"fill\", \"red\")\n        .text(\"Join the Mattermost Channel \")\n        .append(\"a\")\n        .attr(\"xlink:href\", \"https://chat.academany.org/fabacademy-2023/channels/fab-academy-data-viz\")\n        .attr(\"target\", \"_blank\") \n        .style(\"fill\", OVERLAY_TEXT_LINK_COLOR)\n        .attr(\"font-size\", \"30px\")\n        .text(\"Here\");\n};\n</code></pre>"},{"location":"stem/expert-network-map/#other-files-minification-and-google-analytics","title":"Other Files, Minification, and Google Analytics","text":"<p>I downloaded D3JS minified, D3JS force boundary library minified, and jQuery minified in the <code>d3js_download.js</code>, <code>force_boundary_downoad.js</code>, and <code>jquery_download.js</code> files respectively to increase performance where three extra HTTP requests to not have to be sent before the content loads.</p> <p>I also combined the code for all of the different JavaScript files into one file, <code>combined.js</code>, and minified it using Toptal JavaScript Minifier. This maximizes performance by reducing initial loading time. I pasted files into the minifier in the order they are linked in an older version of the HTML below.</p> <pre><code>&lt;script src=\"vars.js\"&gt;&lt;/script&gt;\n&lt;script src=\"lab_region.js\"&gt;&lt;/script&gt;\n&lt;script src=\"update_data.js\"&gt;&lt;/script&gt;\n&lt;script src=\"helper_functions.js\"&gt;&lt;/script&gt;\n&lt;script src=\"constants.js\"&gt;&lt;/script&gt;\n&lt;script src=\"carousel.js\"&gt;&lt;/script&gt;\n&lt;script src=\"dial.js\"&gt;&lt;/script&gt;\n&lt;script src=\"multiselect_dropdown.js\"&gt;&lt;/script&gt;\n&lt;script src=\"overlay_text.js\"&gt;&lt;/script&gt;\n&lt;script src=\"app.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Finally, I use Google Analytics to measure traffic on the site and measure usage.</p>"},{"location":"stem/expert-network-map/#html","title":"HTML","text":"<p>Since the website is a static webpage, I only use one HTML file, <code>index.html</code>. </p> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"./img/favicon/favicon.ico\"&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Expert Network Map&lt;/title&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"https://fonts.googleapis.com/css?family=Saira:100,200,300,400,500,600,700,800,900\" rel=\"stylesheet\"&gt;\n    &lt;script type=\"text/javascript\" src=\"jquery_download.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"d3js_download.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"force_boundary_download.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"combined.js\"&gt;&lt;/script&gt;\n    &lt;!-- Google tag (gtag.js) --&gt;\n    &lt;script async src=\"https://www.googletagmanager.com/gtag/js?id=G-GJZ579DNTW\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(arguments);}\n        gtag('js', new Date());\n\n        gtag('config', 'G-GJZ579DNTW');\n    &lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body id=\"my_dataviz\"&gt;\n    &lt;div id=\"tooltip\"&gt;&lt;/div&gt;\n    &lt;div id=\"top-intro\"&gt;\n        &lt;div id=\"top-title\"&gt;Expert Network Map&lt;/div&gt;\n        &lt;div id=\"intro-title\"&gt;\n            &lt;div id=\"top-subtitle\"&gt;Six generations of Fab Academy students intertwined&lt;/div&gt;\n            &lt;div id=\"top-blurb\"&gt;\n                &lt;h3&gt;Seek Out &lt;i&gt;Topic Experts&lt;/i&gt;&lt;/h3&gt;\n                &lt;p&gt;The &lt;i&gt;Expert Network Map&lt;/i&gt; allows users to visually identify &lt;i&gt;Topic Experts&lt;/i&gt; in the Fab community. &lt;i&gt;Topic Experts&lt;/i&gt; are Fab Academy students who are frequently referenced by peers. Fab Academy students often link each other's websites in their documentation, and mapping these connections creates a network intertwined across labs, years, and countries. The more times a student is referenced correlates with expertise level in specific subject areas. For current Fab Academy students, it can be extremely helpful to quickly identify &lt;i&gt;Topic Experts&lt;/i&gt; to access their documentation for reference. Interacting with the Map can determine &lt;i&gt;Topic Experts&lt;/i&gt; by year and specific labs. Once &lt;i&gt;Topic Experts&lt;/i&gt; are found, clicking on their circle redirects the user to their Fab Academy Documentation Website.&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"intro-text\"&gt;\n            &lt;div id=\"top-explanation\"&gt;\n                &lt;p&gt;The &lt;i&gt;Expert Network Map&lt;/i&gt; allows users to navigate the massive web of interconnected students and highlights &lt;i&gt;Topics Experts&lt;/i&gt; dating back to 2018. Each Fab Academy student is represented by a circle. Drag around different students to play with the data and gain insight into the interconnectedness of the Fab community.&lt;/p&gt;\n                &lt;p&gt;The larger a student's circle, the more times they have been referenced. Hover over a circle to see the student's name, year, lab, and region, and click on it to open their documentation website. Click the tabs on the left to filter by topic area; click different years on the bottom left circle to highlight students from that year; use the dropdown on the top right to highlight students from certain Fab Labs; and use the dial on the bottom right to set a minimum number of references that a student must have, changing the &lt;i&gt;Expertise Threshold&lt;/i&gt;.&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div style=\"width:100%;position:relative;\"&gt;\n        &lt;div style=\"background: white; position: absolute; right: 10px; top: 10px; display: inline-block;\" class=\"multiselect\" id=\"countries\" multiple=\"multiple\" data-target=\"multi-0\"&gt;\n            &lt;div class=\"title noselect\"&gt;\n                &lt;span class=\"text\"&gt;Filter Labs&lt;/span&gt;\n                &lt;span class=\"close-icon\"&gt;&amp;times;&lt;/span&gt;\n                &lt;span class=\"expand-icon\"&gt;&amp;plus;&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=\"container\"&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;svg xmlns=\"http://www.w3.org/2000/svg\"&gt;\n        &lt;defs&gt;&lt;/defs&gt;\n    &lt;/svg&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"stem/expert-network-map/#css","title":"CSS","text":"<p>All styles not created through D3JS are located in <code>style.css</code>. This includes background color, orienting description text, etc.</p> <p>styles.css</p> <pre><code>:root {\n    --tooltip-background-color: white;\n    --node-stroke: #000;\n    --top-title-color: #393836;\n    --top-subtitle-color: grey;\n    --top-blurb-h3-color: #595754;\n    --body-background-color: white;\n    --overlay-text-color: black;\n}\n\n#tooltip {\n    background-color: var(--tooltip-background-color);\n    border: black solid 1px;\n    border-radius: 5px;\n    padding: 5px;\n    position: absolute;\n    visibility: hidden;\n    display: none;\n    pointer-events: none;\n}\n\n#tooltip span {\n    color: black;\n    font-family: 'Saira';\n}\n\nhtml {\n    Overflow-y: auto;\n}\n\nbody {\n    Overflow-y: scroll;\n}\n\nbody {\n    margin: 0;\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n}\n\ncircle {\n    stroke: var(--node-stroke);\n    stroke-width: 0px;\n}\n\nline {\n    stroke: #999;\n    stroke-opacity: 0.6;\n}\n\nbody {\n    font-family: sans-serif;\n    background-color: var(--body-background-color);\n}\n\n#top-intro {\n    margin: 0 auto;\n    padding-left: 70px;\n    padding-right: 70px;\n}\n\n#top-title {\n    font-size: 57px;\n    color: var(--top-title-color);\n    font-family: 'IM Fell DW Pica', serif;\n    margin-bottom: -12px;\n    margin-top: 20px;\n    margin-right: 20px;\n}\n\n#intro-title {\n    width: 46%;\n    display: inline-block;\n}\n\n#top-subtitle {\n    font-size: 17px;\n    font-weight: 300;\n    margin-top: 11px;\n    line-height: 150%;\n    padding-bottom: 0px;\n    color: var(--top-subtitle-color);\n}\n\n#top-blurb {\n    margin-top: 20px;\n}\n\n#top-blurb p {\n    font-size: 11px;\n    text-align: justify;\n    line-height: 155%;\n    color: #777777;\n}\n\n#top-blurb h3 {\n    font-size: 16px;\n    color: var(--top-blurb-h3-color);\n    font-family: 'IM Fell DW Pica', serif;\n    margin-bottom: -8px;\n}\n\n#intro-text {\n    width: 45%;\n    display: inline-block;\n    padding-left: 50px;\n    padding-right: 0px;\n    vertical-align: top;\n    padding-bottom: 10px;\n}\n\n#top-explanation {\n    font-size: 12px;\n    text-align: justify;\n}\n\n#top-explanation p {\n    line-height: 160%;\n    color: #777777;\n}\n\n.noselect {\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\n.multiselect {\n    width: 170px;\n    font-size: 15px;\n    padding-bottom: 4px;\n    border-radius: 3px;\n    border: 1px solid rgba(0, 0, 0, 0.1);\n    transition: 0.2s;\n    outline: none;\n}\n\n.multiselect:hover {\n    border: 1px solid rgba(0, 0, 0, 0.3);\n}\n\n.multiselect.active {\n    border-bottom-left-radius: 0px;\n    border-bottom-right-radius: 0px;\n    border-bottom: 1px solid transparent;\n}\n\n.multiselect&gt;.title {\n    cursor: pointer;\n    height: 16px;\n    padding: 6px;\n}\n\n.multiselect&gt;.title&gt;.text {\n    max-width: 130px;\n    max-height: 25px;\n    display: block;\n    float: left;\n    overflow: hidden;\n    line-height: 1.3em;\n}\n\n.multiselect&gt;.title&gt;.expand-icon,\n.multiselect&gt;.title&gt;.close-icon {\n    float: right;\n    border-radius: 50%;\n    padding: 0 4px;\n    border: 1px solid rgba(0, 0, 0, 0.1);\n    font-weight: 700;\n    transition: 0.2s;\n    display: none;\n}\n\n.multiselect.selection&gt;.title&gt;.expand-icon {\n    display: none;\n}\n\n.multiselect.selection&gt;.title&gt;.expand-icon:hover {\n    border: 1px solid rgba(0, 0, 0, 0.3);\n    background: rgb(203, 32, 32);\n    color: #fff;\n}\n\n.multiselect&gt;.title&gt;.expand-icon,\n.multiselect.selection&gt;.title&gt;.close-icon {\n    display: block;\n}\n\n.multiselect&gt;.title&gt;.close-icon:hover {\n    border: 1px solid rgba(0, 0, 0, 0.3);\n    background: rgb(203, 32, 32);\n    color: #fff;\n}\n\n.multiselect&gt;.container {\n    max-height: 200px;\n    overflow: auto;\n    margin-top: 4px;\n    margin-left: -1px;\n    width: 170px;\n    transition: 0.2s;\n    position: absolute;\n    z-index: 99;\n    background: #fff;\n    border: 1px solid transparent;\n    border-top: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n.multiselect.active&gt;.container {\n    border: 1px solid rgba(0, 0, 0, 0.1);\n    border-bottom-left-radius: 3px;\n    border-bottom-right-radius: 3px;\n    border-top: 0;\n}\n\n.multiselect:hover&gt;.container {\n    border-top-color: rgba(0, 0, 0, 0.3);\n}\n\n.multiselect.active:hover&gt;.container {\n    border-color: rgba(0, 0, 0, 0.3);\n}\n\n.multiselect&gt;.container&gt;option {\n    display: none;\n    padding: 5px;\n    cursor: pointer;\n    transition: 0.2s;\n    border-top: 1px solid transparent;\n    border-bottom: 1px solid transparent;\n}\n\n.multiselect&gt;.container&gt;option.selected {\n    background: rgb(122, 175, 233);\n    border-top: 1px solid rgba(0, 0, 0, 0.1);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n    color: #fff;\n}\n\n.multiselect&gt;.container&gt;option:hover {\n    background: rgba(0, 0, 0, 0.1);\n    color: #000;\n}\n\n.multiselect&gt;.container&gt;option.selected:hover {\n    background: rgba(53, 112, 130, 0.4);\n    color: #000;\n}\n\n.multiselect.active&gt;.container&gt;option {\n    display: block;\n}\n\noption[value=All] {\n    font-weight: bold;\n}\n\n#value-input {\n    position: absolute;\n    /*right: 120px;*/\n    /*top: 48%;*/\n    text-align: center;\n    width: 60px;\n    border: none;\n    background: none;\n    outline: none;\n    font-size: 18px;\n    color: white;\n}\n\n.overlay-text {\n    fill: var(--overlay-text-color);\n    font-family: Arial, sans-serif;\n}\n</code></pre>"},{"location":"stem/expert-network-map/#updates","title":"Updates","text":"<p>Since the initial presentation of the project in Bhutan, I have updated the codebase to scrape and classify new references between student documentation every week. Throughout the 2024 Fab Academy cycle, the map successfully evolved as new students made references to one another and to previous students in their documentation.</p>"},{"location":"stem/expert-network-map/#high-level-overview","title":"High-Level Overview","text":"<p>On the <code>pipeline_testing</code> branch of the GitLab Repo, at 3:00am every Wednesday, two Pipeline Schedules are run. Below is the <code>.gitlab-ci.yml</code> file in the <code>pipeline_testing</code> branch that contains the functionality for the two pipelines. The first pipeline runs the <code>update_data</code> job, and the second pipeline runs the <code>format_data</code> job. All of the code being run in these jobs can be found in the <code>update-data</code> directory of the <code>pipeline_testing</code> branch of the repo.</p> <pre><code># Functions that should be executed before the build script is run\nbefore_script: []\n\nstages:\n  - collect\n  - format\n  - production\n\nupdate_data:\n  stage: collect\n  image: python:3.9\n  script:\n    - cd update-data\n    - pip install --upgrade pip\n    - pip install -r requirements.txt\n    - echo \"Running update-data/main.py\"\n    - python main.py\n    - cd ..\n    - echo \"Running update_data complete, now committing!\"\n    - git config --global user.email \"ci-cd-bot@example.com\"\n    - git config --global user.name \"CI/CD Bot\"\n    - git remote set-url origin https://oauth2:${CI_ACCESS_TOKEN}@gitlab.fabcloud.org/pub/project/expert-network-map.git\n    - git add update-data/final_data.csv update-data/student_repo_id_saves/*.obj\n    - git commit -m \"update-data ran and final_data.csv updated\"\n    - git push origin HEAD:pipeline_testing\n  timeout: 2 hours\n  rules:\n    - if: $TRIGGER_CONTEXT == \"pipeline_test\"\n  tags:\n    - longer\n\nformat_data:\n  stage: format\n  image: python:3.9\n  script:\n    - cd update-data\n    - pip install --upgrade pip\n    - pip install -r requirements.txt\n    - echo \"Running update-data/matrix2d3js.py\"\n    - python matrix2d3js.py\n    - echo \"Running update-data/resolve_name_conflicts.py\"\n    - python resolve_name_conflicts.py\n    - cat final_data_name_fixed.json &gt; ./final_data.json\n    - cd ..\n    - echo \"Running format_data complete, now committing!\"\n    - git config --global user.email \"ci-cd-bot@example.com\"\n    - git config --global user.name \"CI/CD Bot\"\n    - git remote set-url origin https://oauth2:${CI_ACCESS_TOKEN}@gitlab.fabcloud.org/pub/project/expert-network-map.git\n    - mv update-data/final_data.json public/final_data.json\n    - git add public/final_data.json\n    - git commit -m \"format_data ran and final_data.json updated\"\n    - git push origin HEAD:pipeline_testing\n    - git fetch origin main\n    - git stash\n    - git switch main\n    - curl https://gitlab.fabcloud.org/pub/project/expert-network-map/-/raw/pipeline_testing/public/final_data.json?ref_type=heads -o public/final_data.json\n    - git add public/final_data.json\n    - git commit -m \"copied public/final_data.json from pipeline_testing branch after format_data ran\"\n    - git push origin HEAD:main\n  timeout: 2 hours\n  rules:\n    - if: $TRIGGER_CONTEXT == \"pipeline_test_2\"\n  tags:\n    - longer \n\npages:\n  stage: production\n  image: busybox\n  script:\n    - echo \"The site will be deployed to $CI_PAGES_URL\"\n  artifacts:\n    paths:\n      # The folder that contains the files to be exposed at the Page URL\n      - public\n  rules:\n    # This ensures that only pushes to the default branch will trigger\n    # a pages deploy\n    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH\n</code></pre>"},{"location":"stem/expert-network-map/#update-data_1","title":"Update Data","text":"<p>The <code>update_data</code> job runs <code>main.py</code>, which scrapes all of the references between student repo, classified the references using the text-classification neural network, then creates a commit on the <code>pipeline_testing</code> branch that stores the exported <code>.csv</code> and <code>.obj</code> files created.</p>"},{"location":"stem/expert-network-map/#format-data","title":"Format Data","text":"<p>The <code>format_data</code> job then runs <code>matrix2d3js.py</code> and <code>resolve_name_conflicts.py</code>, which convert and format the <code>CSV</code> data as a <code>JSON</code>, then commits the data to the <code>main</code> and <code>pipeline_testing</code> branches. The commit on hte <code>main</code> branch then triggers the <code>GitLab Pages</code> pipeline which automatically updates the live site with the new data.</p>"},{"location":"stem/expert-network-map/#examples-of-automated-commits","title":"Examples of Automated Commits","text":"<p>Click here to see examples of the automated commits on the <code>main</code> branch!</p> <p>Click here to see examples of the automated commits on the <code>pipeline_testing</code> branch!</p>"},{"location":"stem/expert-network-map/#offshoot-projects","title":"Offshoot Projects","text":"<p><code>C\u00e9sar Garc\u00eda</code>, Technical Systems Engineer and a member of the 52-person <code>Mattermost</code> channel dedicated to the <code>Expert Network Map</code>, created the <code>Fab Academy Retrieval-Augmented Generation (FabRAG)</code>, a AI-powered system that uses expert documentation identified by the <code>Expert Network Map</code> to help further democratize access to education in the Fab Academy network. The project enables students to talk to the AI model with text, and the AI has access to all of the expertise of the most helpful documentation websties. Here is an example of the project's usage, which pulls information from the most referenced student during <code>Moulding and Casting</code> week, <code>Adri\u00e1n Torres</code>:</p> <p></p> <p>Updated as of November 1st, 2024</p>"},{"location":"stem/fab-academy/","title":"Fab Academy","text":""},{"location":"stem/fab-academy/#fab-academy","title":"Fab Academy","text":"<p>Fab Academy is a five-month digital fabrication course led by MIT Professor Neil Gershenfeld focused on rapid-prototyping. </p> <p>I graduated from Fab Academy during my sophomore year of high school. Charlotte Latin School is the only high school Fab Lab in the world to participate in Fab Academy. Students learn to use all equipment in a Fab Lab, including laser cutters, 3D printers, CNC machines, and PCB board mills, as well as develop proficiency in digital fabrication skills, such as PCB design and production, surface-mount soldering, CAD, embedded programming, networking and communications, and interfacing. Students complete weekly projects, as well as a final project that showcases all the skills learned throughout the five-month course.</p> <p>Read about my final project here! To see my other weekly projects, click here!</p>"},{"location":"stem/panopticom/","title":"Panopticom","text":""},{"location":"stem/panopticom/#panopticom","title":"Panopticom","text":"<p>When singer <code>Peter Gabriel</code> (from Genesis) wanted to create a digital platform based on his song \u201cPanopticom,\u201d his friend <code>Professor Gershenfeld</code> recommended me as the lead developer based on the success of the Expert Network Map.</p> <p>I completed the demo website featuring an interactive globe where users explore multiple data layers by location, including Expert Network Map data, sustainability metrics, and radio live streams.</p> <p>I wrote all of the code for the Panopticom demo website. I scraped and formatted the datasets, designed and implemented the JSONL Schema, and created the visualization website. </p> <p><code>Jean-Michel Molenaar</code> from the Fab Foundation was the Panopticom project manager. He set up the GitLab Repo and wrote the \u201cabout\u201d page. Professor Gershenfeld provided strategic direction and Peter Gabriel was the creative visionary for the Panopticom website.</p>"},{"location":"stem/panopticom/#demo-website","title":"Demo Website","text":"<p>Click here to see the live site!</p> <p>Click here to see the project's code!</p> <p>Click here to see the human-readable JSONL Schema!</p> <p></p> <p></p> <p></p>"},{"location":"stem/panopticom/#project-launch-at-fab24","title":"Project Launch at Fab24","text":"<p>Click here to watch a recording of the Panopticom presentation at the 2024 International Fab Lab Conference and Symposium Presentation in Puebla, Mexico!</p> <p></p> <p></p>"},{"location":"stem/test-generator/","title":"Test Generator","text":""},{"location":"stem/test-generator/#test-generator","title":"Test Generator","text":"<p>In a Computer Science class at school, my teacher shared that creating tests with realistic, but incorrect, multiple-choice options was time intensive. To help, I coded the Test Generator, an application that requires two inputs from a teacher (test topic and number of questions) to generate a test within Google Forms in seconds. My code integrated ChatGPT with Google Forms to create a seamless experience for educators. The Test Generator is actively being used by teachers at the Charlotte Latin Innovation &amp; Design Department. </p> <p>Using Flask, I created a website for teachers to easily create tests in Google Forms by inputting the test topic and number of questions. The back-end queries the ChatGPT API and uses the Google Forms and OAuth APIs to create a new form in the teacher\u2019s account.</p> <p>I've limited the website to only Google Accounts I have approved since the API bills per request, but for a video demonstration, please see below:</p> <p>Video Demonstration</p>"},{"location":"stem/test-generator/#documentation","title":"Documentation","text":"<p>The documentation below covers the most interesting aspect of the project, which was networking with ChatGPT and Google Forms.</p>"},{"location":"stem/test-generator/#chatgpt","title":"ChatGPT","text":"<p>Let's break down the main code that interacts with ChatGPT, parses the response, and sends the formatted test to <code>google_forms.py</code>.</p> <p>First the <code>_Test</code>, <code>Question</code>, and <code>Answer</code> classes. The code will eventually parse ChatGPT's response and convert it to a <code>_Test</code> object.</p> <pre><code>class _Test(object):\n    def __init__(self, title, questions):\n        self.title = title # string\n        self.questions = questions # list of Questions\n        self.num_questions = len(questions)\n        self.url = None\n\n    def add_url(self, url):\n        self.url = url\n\nclass Question(object):\n    def __init__(self, question_title, potential_answers):\n        self.question_title = question_title # string\n        self.potential_answers = potential_answers # list of strings\n\nclass Answer(object):\n    def __init__(self, answer_text, is_correct):\n        self.answer_text = answer_text\n        self.is_correct = is_correct\n</code></pre> <p>The <code>query</code> function sends an API request to OpenAI. It uses the model <code>gpt-3.5-turbo</code>.</p> <pre><code>def query(txt):\n    return openai.ChatCompletion.create(\n        model= \"gpt-3.5-turbo\",\n        messages=[{\"role\": \"user\", \"content\": txt}]\n    ).choices[0].message.content\n</code></pre> <p>The <code>create_test</code> function defines the prompt for ChatGPT and parses the response. The prompt asks ChatGPT to use special characters, such as <code>##</code>, to indicate different parts of the test. This method has been a relatively consistent means of extracting different parts of the text from ChatGPT text-based response.</p> <p></p><pre><code>def create_test():      \n    prompt = f'''\nYou are a teacher who creates tests. Here are some examples.\n\nPrompt: Write a 3-question test about math\nAnswer:\n##MEASURE OF MATH\n^^What is 1+1?\n||$$2\n||-1\n||1\n||0\n||us\n^^Which of the following was a famous mathematician?\n||Michael Jordan\n||$$Albert Einstein\n||Michael Jackson\n^^What type of counting system do computers typically use?\n||$$Binary\n||Roman Numerals\n||Base-10\n\nPrompt: Write a 5-question test about geography\nAnswer:\n##GRAPPLING WITH GEOGRAPHY\n^^How many continents are there?\n||$$7\n||2\n||6\n||13\n^^Which of the following is a country in Europe?\n||China\n||Iraq\n||The United States\n||$$France\n||Uruguay\n^^What are latitude and longitude?\n||An antiquated method of measuring distance between multiple continents or planets\n||$$A coordinate system by means of which the position or location of any place on Earth's surface can be determined and described\n||Names of galaxies\n^^North America is ____ of Europe.\n||North\n||South\n||East\n||$$West\n^^What is the name of the largest country in the world?\n||Canada\n||Turkey\n||Afghanistan\n||$$Russia\n\nPrompt: Write a {num_questions}-question test about {test_subject}\nAnswer:\n    '''\n\n    response = query(prompt)\n\n    test_title = \"TEST\"\n    question_title = \"QUESTION\"\n    potential_answers = []\n    questions = []\n\n    for line in response.split(\"\\n\"):\n        s_line = line.strip()\n        prefix = s_line[:2]\n        substance = s_line[2:]\n        if prefix == \"##\":\n            test_title = substance\n        elif prefix == \"^^\":\n            if len(questions) &gt; 0:\n                questions[-1] = Question(question_title, potential_answers)\n            question_title = substance\n            questions.append(None)\n            potential_answers = []\n        elif prefix == \"||\":\n            correct = substance.strip()[:2] == \"$$\"\n            potential_answers.append(Answer((substance.strip()[2:] if correct else substance), correct))\n    if len(questions) &gt; int(num_questions):\n        questions = questions[:int(num_questions)]\n</code></pre> Finally, the parsed data is put into a <code>_Test</code> object and sent to Google Forms. <pre><code>    test = _Test(test_title, questions[:-1])\n    url = google_forms.create_form(creds, test.title, test.questions)\n    test.add_url(url)\n</code></pre> <p>All together, here's the code that interacts with ChatGPT.</p> <pre><code>class _Test(object):\n    def __init__(self, title, questions):\n        self.title = title # string\n        self.questions = questions # list of Questions\n        self.num_questions = len(questions)\n        self.url = None\n\n    def add_url(self, url):\n        self.url = url\n\nclass Question(object):\n    def __init__(self, question_title, potential_answers):\n        self.question_title = question_title # string\n        self.potential_answers = potential_answers # list of strings\n\nclass Answer(object):\n    def __init__(self, answer_text, is_correct):\n        self.answer_text = answer_text\n        self.is_correct = is_correct\n\ndef query(txt):\n    return openai.ChatCompletion.create(\n        model= \"gpt-3.5-turbo\",\n        messages=[{\"role\": \"user\", \"content\": txt}]\n    ).choices[0].message.content\n\ndef create_test():      \n    prompt = f'''\nYou are a teacher who creates tests. Here are some examples.\n\nPrompt: Write a 3-question test about math\nAnswer:\n##MEASURE OF MATH\n^^What is 1+1?\n||$$2\n||-1\n||1\n||0\n||us\n^^Which of the following was a famous mathematician?\n||Michael Jordan\n||$$Albert Einstein\n||Michael Jackson\n^^What type of counting system do computers typically use?\n||$$Binary\n||Roman Numerals\n||Base-10\n\nPrompt: Write a 5-question test about geography\nAnswer:\n##GRAPPLING WITH GEOGRAPHY\n^^How many continents are there?\n||$$7\n||2\n||6\n||13\n^^Which of the following is a country in Europe?\n||China\n||Iraq\n||The United States\n||$$France\n||Uruguay\n^^What are latitude and longitude?\n||An antiquated method of measuring distance between multiple continents or planets\n||$$A coordinate system by means of which the position or location of any place on Earth's surface can be determined and described\n||Names of galaxies\n^^North America is ____ of Europe.\n||North\n||South\n||East\n||$$West\n^^What is the name of the largest country in the world?\n||Canada\n||Turkey\n||Afghanistan\n||$$Russia\n\nPrompt: Write a {num_questions}-question test about {test_subject}\nAnswer:\n    '''\n\n    response = query(prompt)\n\n    test_title = \"TEST\"\n    question_title = \"QUESTION\"\n    potential_answers = []\n    questions = []\n\n    for line in response.split(\"\\n\"):\n        s_line = line.strip()\n        prefix = s_line[:2]\n        substance = s_line[2:]\n        if prefix == \"##\":\n            test_title = substance\n        elif prefix == \"^^\":\n            if len(questions) &gt; 0:\n                questions[-1] = Question(question_title, potential_answers)\n            question_title = substance\n            questions.append(None)\n            potential_answers = []\n        elif prefix == \"||\":\n            correct = substance.strip()[:2] == \"$$\"\n            potential_answers.append(Answer((substance.strip()[2:] if correct else substance), correct))\n\n    if len(questions) &gt; int(num_questions):\n        questions = questions[:int(num_questions)]\n\n    test = _Test(test_title, questions[:-1])\n    url = google_forms.create_form(creds, test.title, test.questions)\n    test.add_url(url)\n</code></pre>"},{"location":"stem/test-generator/#google-forms","title":"Google Forms","text":"<p>Code in <code>google_forms.py</code> is responsible for creating the test in the user's Google Forms account. The code defines the API scopes, formats the data from the <code>_Test</code> object to the dictionary/JSON format specified in the Google Forms API Documentation. It then uses the API to make the form into a quiz and selects the correct answers for each multiple choice question. Finally, the function returns the URL to the Google Form quiz.</p> <pre><code>SCOPES = [\"https://www.googleapis.com/auth/forms.body\"]\nDISCOVERY_DOC = \"https://forms.googleapis.com/$discovery/rest?version=v1\"\n\n# create the Google Form\ndef create_form(creds, form_title, _questions):\n    if creds is None:\n        raise ValueError(\"Invalid credentials\")\n\n    form_service = discovery.build('forms', 'v1', credentials=creds, discoveryServiceUrl=DISCOVERY_DOC, static_discovery=False)\n\n    # the request body for creating a form\n    NEW_FORM = {\n        \"info\": {\n            \"title\": form_title,\n            \"documentTitle\": form_title\n        }\n    }\n\n    questions = []\n\n    for question in _questions:\n        questions.append({})\n        questions[-1]['title'] = question.question_title\n        questions[-1]['questionItem'] = {\n                        \"question\": {\n                            \"required\": True,\n                            \"grading\": {\n                                \"pointValue\": 1,\n                                \"correctAnswers\": {\n                                    \"answers\": [{\"value\": ans.answer_text} for ans in question.potential_answers if ans.is_correct]\n                                },\n                                \"whenRight\": {\"text\": \"You got it!\"},\n                                \"whenWrong\": {\"text\": \"Sorry, that's wrong\"}\n                            },\n                            \"choiceQuestion\": {\n                                \"type\": \"RADIO\",\n                                \"options\": [\n                                    {\"value\": ans.answer_text}\n                                    for ans\n                                    in question.potential_answers\n                                ],\n                                \"shuffle\": True\n                            }\n                        }\n                    }\n\n    # the request body to add a multiple-choice question\n    question_requests = [ {\n        \"requests\": [{\n            \"createItem\": {\n                \"item\": question,\n                \"location\": {\n                    \"index\": n\n                }\n            }\n        }]\n    }\n    for n, question,\n    in enumerate(questions)\n    ]\n\n    # creates the blank form\n    result = form_service.forms().create(body=NEW_FORM).execute()\n\n    update = {\n        \"requests\": [\n            {\n                \"updateSettings\": {\n                    \"settings\": {\n                        \"quizSettings\": {\n                            \"isQuiz\": True\n                        }\n                    },\n                    \"updateMask\": \"quizSettings.isQuiz\"\n                }\n            }\n        ]\n    }\n\n    # converts the form into a quiz\n    question_setting = form_service.forms().batchUpdate(formId=result[\"formId\"],\n                                                        body=update).execute()\n\n    # adds the questions to the form\n    for qr in question_requests:\n        question_setting = form_service.forms().batchUpdate(formId=result[\"formId\"], body=qr).execute()\n\n    # stores result from the API\n    get_result = form_service.forms().get(formId=result[\"formId\"]).execute()\n\n    url = f\"https://docs.google.com/forms/d/{result['formId']}/edit\"\n\n    return url\n</code></pre>"}]}